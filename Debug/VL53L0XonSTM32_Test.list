
VL53L0XonSTM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08008dfc  08008dfc  00018dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800909c  0800909c  000204c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800909c  0800909c  000204c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800909c  0800909c  000204c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  080090a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200004c0  08009564  000204c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08009564  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ff6  00000000  00000000  000204e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000233f  00000000  00000000  000344df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  00036820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  000376f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ad4  00000000  00000000  000384d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca1f  00000000  00000000  00050fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091120  00000000  00000000  0005d9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eeaeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c4  00000000  00000000  000eeb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200004c0 	.word	0x200004c0
 8000158:	00000000 	.word	0x00000000
 800015c:	08008de4 	.word	0x08008de4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200004c4 	.word	0x200004c4
 8000178:	08008de4 	.word	0x08008de4

0800017c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000184:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000188:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800018c:	f003 0301 	and.w	r3, r3, #1
 8000190:	2b00      	cmp	r3, #0
 8000192:	d013      	beq.n	80001bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000194:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000198:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800019c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d00b      	beq.n	80001bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001a4:	e000      	b.n	80001a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f9      	beq.n	80001a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001b6:	687a      	ldr	r2, [r7, #4]
 80001b8:	b2d2      	uxtb	r2, r2
 80001ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001bc:	687b      	ldr	r3, [r7, #4]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <InitSensors>:
VL53L0X_RangingMeasurementData_t RangingMeasurementData;

VL53L0X_Dev_t VL53L0XDevs = { .Id=0, .DevLetter='i', .I2cHandle=&hi2c1, .I2cDevAddr=0x52 };

int InitSensors()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	int status;
	uint16_t Id = 1;
 80001ce:	2301      	movs	r3, #1
 80001d0:	80fb      	strh	r3, [r7, #6]
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDevs;
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <InitSensors+0x94>)
 80001d4:	60fb      	str	r3, [r7, #12]
	pDev->I2cDevAddr = 0x52;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	2252      	movs	r2, #82	; 0x52
 80001da:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2200      	movs	r2, #0
 80001e2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	HAL_Delay(2);
 80001e6:	2002      	movs	r0, #2
 80001e8:	f000 ff00 	bl	8000fec <HAL_Delay>

	printf("InitSensor...\n");
 80001ec:	481c      	ldr	r0, [pc, #112]	; (8000260 <InitSensors+0x98>)
 80001ee:	f007 ff13 	bl	8008018 <puts>

	if(status == VL53L0X_ERROR_NONE)
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d106      	bne.n	8000206 <InitSensors+0x3e>
	{
		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2188      	movs	r1, #136	; 0x88
 80001fc:	68f8      	ldr	r0, [r7, #12]
 80001fe:	f000 fd31 	bl	8000c64 <VL53L0X_WrByte>
 8000202:	4603      	mov	r3, r0
 8000204:	60bb      	str	r3, [r7, #8]
	}
	status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000206:	1dbb      	adds	r3, r7, #6
 8000208:	461a      	mov	r2, r3
 800020a:	21c0      	movs	r1, #192	; 0xc0
 800020c:	68f8      	ldr	r0, [r7, #12]
 800020e:	f000 fdd5 	bl	8000dbc <VL53L0X_RdWord>
 8000212:	4603      	mov	r3, r0
 8000214:	60bb      	str	r3, [r7, #8]
	if(status)
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <InitSensors+0x5a>
	{
		printf("Read id fail\n");
 800021c:	4811      	ldr	r0, [pc, #68]	; (8000264 <InitSensors+0x9c>)
 800021e:	f007 fefb 	bl	8008018 <puts>
	}
	if (Id == 0xEEAA)
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8000228:	4293      	cmp	r3, r2
 800022a:	d102      	bne.n	8000232 <InitSensors+0x6a>
	{
		printf("Sensor found...\n");
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <InitSensors+0xa0>)
 800022e:	f007 fef3 	bl	8008018 <puts>
	}

	status = VL53L0X_DataInit(pDev);
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f003 f812 	bl	800325c <VL53L0X_DataInit>
 8000238:	4603      	mov	r3, r0
 800023a:	60bb      	str	r3, [r7, #8]
	if (status == 0)
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d104      	bne.n	800024c <InitSensors+0x84>
	{
		pDev->Present = 1;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2201      	movs	r2, #1
 8000246:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800024a:	e002      	b.n	8000252 <InitSensors+0x8a>
	}
	else
	{
		printf("VL53L0X_DataInit fail...\n");
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <InitSensors+0xa4>)
 800024e:	f007 fee3 	bl	8008018 <puts>
	}


}
 8000252:	bf00      	nop
 8000254:	4618      	mov	r0, r3
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000004 	.word	0x20000004
 8000260:	08008dfc 	.word	0x08008dfc
 8000264:	08008e0c 	.word	0x08008e0c
 8000268:	08008e1c 	.word	0x08008e1c
 800026c:	08008e2c 	.word	0x08008e2c

08000270 <SetupSingleShot>:

void SetupSingleShot (RangingConfig_e rangingConfig)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800027a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8000280:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000284:	623b      	str	r3, [r7, #32]
	uint32_t timingBudget = 33000;
 8000286:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800028a:	61fb      	str	r3, [r7, #28]
	uint8_t preRangeVcselPeriod = 14;
 800028c:	230e      	movs	r3, #14
 800028e:	76fb      	strb	r3, [r7, #27]
	uint8_t finalRangeVcselPeriod = 10;
 8000290:	230a      	movs	r3, #10
 8000292:	76bb      	strb	r3, [r7, #26]

	if (VL53L0XDevs.Present)
 8000294:	4b71      	ldr	r3, [pc, #452]	; (800045c <SetupSingleShot+0x1ec>)
 8000296:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800029a:	2b00      	cmp	r3, #0
 800029c:	f000 80da 	beq.w	8000454 <SetupSingleShot+0x1e4>
	{
		status=VL53L0X_StaticInit(&VL53L0XDevs);
 80002a0:	486e      	ldr	r0, [pc, #440]	; (800045c <SetupSingleShot+0x1ec>)
 80002a2:	f003 f93f 	bl	8003524 <VL53L0X_StaticInit>
 80002a6:	4603      	mov	r3, r0
 80002a8:	617b      	str	r3, [r7, #20]
		if(status)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <SetupSingleShot+0x46>
		{
			printf("VL53L0X_StaticInit failed...\n");
 80002b0:	486b      	ldr	r0, [pc, #428]	; (8000460 <SetupSingleShot+0x1f0>)
 80002b2:	f007 feb1 	bl	8008018 <puts>
		}
		status = VL53L0X_PerformRefCalibration(&VL53L0XDevs, &VhvSettings, &PhaseCal);
 80002b6:	f107 0212 	add.w	r2, r7, #18
 80002ba:	f107 0313 	add.w	r3, r7, #19
 80002be:	4619      	mov	r1, r3
 80002c0:	4866      	ldr	r0, [pc, #408]	; (800045c <SetupSingleShot+0x1ec>)
 80002c2:	f003 ffdb 	bl	800427c <VL53L0X_PerformRefCalibration>
 80002c6:	4603      	mov	r3, r0
 80002c8:	617b      	str	r3, [r7, #20]
		if(status)
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d002      	beq.n	80002d6 <SetupSingleShot+0x66>
		{
			printf("PerformCalib failed...\n");
 80002d0:	4864      	ldr	r0, [pc, #400]	; (8000464 <SetupSingleShot+0x1f4>)
 80002d2:	f007 fea1 	bl	8008018 <puts>
		}
		status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs, &refSpadCount , &isApertureSpads);
 80002d6:	f107 020b 	add.w	r2, r7, #11
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4619      	mov	r1, r3
 80002e0:	485e      	ldr	r0, [pc, #376]	; (800045c <SetupSingleShot+0x1ec>)
 80002e2:	f004 fc59 	bl	8004b98 <VL53L0X_PerformRefSpadManagement>
 80002e6:	4603      	mov	r3, r0
 80002e8:	617b      	str	r3, [r7, #20]
		if (status)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <SetupSingleShot+0x86>
		{
			printf("RefSpadManagement failes...\n");
 80002f0:	485d      	ldr	r0, [pc, #372]	; (8000468 <SetupSingleShot+0x1f8>)
 80002f2:	f007 fe91 	bl	8008018 <puts>
		}
		status = VL53L0X_SetDeviceMode(&VL53L0XDevs, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80002f6:	2100      	movs	r1, #0
 80002f8:	4858      	ldr	r0, [pc, #352]	; (800045c <SetupSingleShot+0x1ec>)
 80002fa:	f003 fb25 	bl	8003948 <VL53L0X_SetDeviceMode>
 80002fe:	4603      	mov	r3, r0
 8000300:	617b      	str	r3, [r7, #20]
		if (status)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <SetupSingleShot+0x9e>
		{
			printf("SetDeviceMode failed...\n");
 8000308:	4858      	ldr	r0, [pc, #352]	; (800046c <SetupSingleShot+0x1fc>)
 800030a:	f007 fe85 	bl	8008018 <puts>
		}
		status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2100      	movs	r1, #0
 8000312:	4852      	ldr	r0, [pc, #328]	; (800045c <SetupSingleShot+0x1ec>)
 8000314:	f003 fdae 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 8000318:	4603      	mov	r3, r0
 800031a:	617b      	str	r3, [r7, #20]
		if (status)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d002      	beq.n	8000328 <SetupSingleShot+0xb8>
		{
			printf("SetLimitCheckEnable failed 1...\n");
 8000322:	4853      	ldr	r0, [pc, #332]	; (8000470 <SetupSingleShot+0x200>)
 8000324:	f007 fe78 	bl	8008018 <puts>
		}
		status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	2101      	movs	r1, #1
 800032c:	484b      	ldr	r0, [pc, #300]	; (800045c <SetupSingleShot+0x1ec>)
 800032e:	f003 fda1 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 8000332:	4603      	mov	r3, r0
 8000334:	617b      	str	r3, [r7, #20]
		if (status)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d002      	beq.n	8000342 <SetupSingleShot+0xd2>
		{
			printf("SetLimitCheckEnable failed 2...\n");
 800033c:	484d      	ldr	r0, [pc, #308]	; (8000474 <SetupSingleShot+0x204>)
 800033e:	f007 fe6b 	bl	8008018 <puts>
		}
        switch(rangingConfig) {
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d01e      	beq.n	8000386 <SetupSingleShot+0x116>
 8000348:	2b02      	cmp	r3, #2
 800034a:	d00f      	beq.n	800036c <SetupSingleShot+0xfc>
 800034c:	2b00      	cmp	r3, #0
 800034e:	d128      	bne.n	80003a2 <SetupSingleShot+0x132>
        case LONG_RANGE:
        	signalLimit = (FixPoint1616_t)(0.1*65536);
 8000350:	f641 1399 	movw	r3, #6553	; 0x1999
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
        	sigmaLimit = (FixPoint1616_t)(60*65536);
 8000356:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800035a:	623b      	str	r3, [r7, #32]
        	timingBudget = 33000;
 800035c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8000360:	61fb      	str	r3, [r7, #28]
        	preRangeVcselPeriod = 18;
 8000362:	2312      	movs	r3, #18
 8000364:	76fb      	strb	r3, [r7, #27]
        	finalRangeVcselPeriod = 14;
 8000366:	230e      	movs	r3, #14
 8000368:	76bb      	strb	r3, [r7, #26]
        	break;
 800036a:	e01d      	b.n	80003a8 <SetupSingleShot+0x138>
        case HIGH_ACCURACY:
			signalLimit = (FixPoint1616_t)(0.25*65536);
 800036c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
			sigmaLimit = (FixPoint1616_t)(18*65536);
 8000372:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000376:	623b      	str	r3, [r7, #32]
			timingBudget = 200000;
 8000378:	4b3f      	ldr	r3, [pc, #252]	; (8000478 <SetupSingleShot+0x208>)
 800037a:	61fb      	str	r3, [r7, #28]
			preRangeVcselPeriod = 14;
 800037c:	230e      	movs	r3, #14
 800037e:	76fb      	strb	r3, [r7, #27]
			finalRangeVcselPeriod = 10;
 8000380:	230a      	movs	r3, #10
 8000382:	76bb      	strb	r3, [r7, #26]
			break;
 8000384:	e010      	b.n	80003a8 <SetupSingleShot+0x138>
        case HIGH_SPEED:
			signalLimit = (FixPoint1616_t)(0.25*65536);
 8000386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
			sigmaLimit = (FixPoint1616_t)(32*65536);
 800038c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000390:	623b      	str	r3, [r7, #32]
			timingBudget = 20000;
 8000392:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000396:	61fb      	str	r3, [r7, #28]
			preRangeVcselPeriod = 14;
 8000398:	230e      	movs	r3, #14
 800039a:	76fb      	strb	r3, [r7, #27]
			finalRangeVcselPeriod = 10;
 800039c:	230a      	movs	r3, #10
 800039e:	76bb      	strb	r3, [r7, #26]
			break;
 80003a0:	e002      	b.n	80003a8 <SetupSingleShot+0x138>
        default:
        	printf("Not Supported");
 80003a2:	4836      	ldr	r0, [pc, #216]	; (800047c <SetupSingleShot+0x20c>)
 80003a4:	f007 fdc4 	bl	8007f30 <iprintf>
        }

        status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80003a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003aa:	2101      	movs	r1, #1
 80003ac:	482b      	ldr	r0, [pc, #172]	; (800045c <SetupSingleShot+0x1ec>)
 80003ae:	f003 fe0f 	bl	8003fd0 <VL53L0X_SetLimitCheckValue>
 80003b2:	4603      	mov	r3, r0
 80003b4:	617b      	str	r3, [r7, #20]
		if( status ){
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <SetupSingleShot+0x152>
		   printf("VL53L0X_SetLimitCheckValue failed\n");
 80003bc:	4830      	ldr	r0, [pc, #192]	; (8000480 <SetupSingleShot+0x210>)
 80003be:	f007 fe2b 	bl	8008018 <puts>
		}

		status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80003c2:	6a3a      	ldr	r2, [r7, #32]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4825      	ldr	r0, [pc, #148]	; (800045c <SetupSingleShot+0x1ec>)
 80003c8:	f003 fe02 	bl	8003fd0 <VL53L0X_SetLimitCheckValue>
 80003cc:	4603      	mov	r3, r0
 80003ce:	617b      	str	r3, [r7, #20]
		if( status ){
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <SetupSingleShot+0x16c>
		   printf("VL53L0X_SetLimitCheckValue failed\n");
 80003d6:	482a      	ldr	r0, [pc, #168]	; (8000480 <SetupSingleShot+0x210>)
 80003d8:	f007 fe1e 	bl	8008018 <puts>
		}

        status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs,  timingBudget);
 80003dc:	69f9      	ldr	r1, [r7, #28]
 80003de:	481f      	ldr	r0, [pc, #124]	; (800045c <SetupSingleShot+0x1ec>)
 80003e0:	f003 fb2b 	bl	8003a3a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80003e4:	4603      	mov	r3, r0
 80003e6:	617b      	str	r3, [r7, #20]
        if( status ){
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d002      	beq.n	80003f4 <SetupSingleShot+0x184>
           printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80003ee:	4825      	ldr	r0, [pc, #148]	; (8000484 <SetupSingleShot+0x214>)
 80003f0:	f007 fe12 	bl	8008018 <puts>
        }

        status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80003f4:	7efb      	ldrb	r3, [r7, #27]
 80003f6:	461a      	mov	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	4818      	ldr	r0, [pc, #96]	; (800045c <SetupSingleShot+0x1ec>)
 80003fc:	f003 fb43 	bl	8003a86 <VL53L0X_SetVcselPulsePeriod>
 8000400:	4603      	mov	r3, r0
 8000402:	617b      	str	r3, [r7, #20]
		if( status ){
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <SetupSingleShot+0x1a0>
		   printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800040a:	481f      	ldr	r0, [pc, #124]	; (8000488 <SetupSingleShot+0x218>)
 800040c:	f007 fe04 	bl	8008018 <puts>
		}

        status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8000410:	7ebb      	ldrb	r3, [r7, #26]
 8000412:	461a      	mov	r2, r3
 8000414:	2101      	movs	r1, #1
 8000416:	4811      	ldr	r0, [pc, #68]	; (800045c <SetupSingleShot+0x1ec>)
 8000418:	f003 fb35 	bl	8003a86 <VL53L0X_SetVcselPulsePeriod>
 800041c:	4603      	mov	r3, r0
 800041e:	617b      	str	r3, [r7, #20]
		if( status ){
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <SetupSingleShot+0x1bc>
		   printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8000426:	4818      	ldr	r0, [pc, #96]	; (8000488 <SetupSingleShot+0x218>)
 8000428:	f007 fdf6 	bl	8008018 <puts>
		}

		status = VL53L0X_PerformRefCalibration(&VL53L0XDevs, &VhvSettings, &PhaseCal);
 800042c:	f107 0212 	add.w	r2, r7, #18
 8000430:	f107 0313 	add.w	r3, r7, #19
 8000434:	4619      	mov	r1, r3
 8000436:	4809      	ldr	r0, [pc, #36]	; (800045c <SetupSingleShot+0x1ec>)
 8000438:	f003 ff20 	bl	800427c <VL53L0X_PerformRefCalibration>
 800043c:	4603      	mov	r3, r0
 800043e:	617b      	str	r3, [r7, #20]
		if( status ){
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d002      	beq.n	800044c <SetupSingleShot+0x1dc>
		   printf("VL53L0X_PerformRefCalibration failed\n");
 8000446:	4811      	ldr	r0, [pc, #68]	; (800048c <SetupSingleShot+0x21c>)
 8000448:	f007 fde6 	bl	8008018 <puts>
		}

        VL53L0XDevs.LeakyFirst=1;
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <SetupSingleShot+0x1ec>)
 800044e:	2201      	movs	r2, #1
 8000450:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	}
}
 8000454:	bf00      	nop
 8000456:	3728      	adds	r7, #40	; 0x28
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000004 	.word	0x20000004
 8000460:	08008e48 	.word	0x08008e48
 8000464:	08008e68 	.word	0x08008e68
 8000468:	08008e80 	.word	0x08008e80
 800046c:	08008e9c 	.word	0x08008e9c
 8000470:	08008eb4 	.word	0x08008eb4
 8000474:	08008ed4 	.word	0x08008ed4
 8000478:	00030d40 	.word	0x00030d40
 800047c:	08008ef4 	.word	0x08008ef4
 8000480:	08008f04 	.word	0x08008f04
 8000484:	08008f28 	.word	0x08008f28
 8000488:	08008f60 	.word	0x08008f60
 800048c:	08008f84 	.word	0x08008f84

08000490 <Sensor_SetNewRange>:

void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	if( pRange->RangeStatus == 0)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	7e1b      	ldrb	r3, [r3, #24]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d124      	bne.n	80004ec <Sensor_SetNewRange+0x5c>
	{
		if (pDev->LeakyFirst)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d00a      	beq.n	80004c2 <Sensor_SetNewRange+0x32>
		{
			pDev->LeakyFirst = 0;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
			pDev->LeakyRange = pRange->RangeMilliMeter;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	891b      	ldrh	r3, [r3, #8]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	}
	else
	{
		pDev->LeakyFirst =1;
	}
}
 80004c0:	e018      	b.n	80004f4 <Sensor_SetNewRange+0x64>
			pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256 - LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <Sensor_SetNewRange+0x70>)
 80004ca:	6812      	ldr	r2, [r2, #0]
 80004cc:	fb02 f203 	mul.w	r2, r2, r3
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <Sensor_SetNewRange+0x70>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80004d8:	6839      	ldr	r1, [r7, #0]
 80004da:	8909      	ldrh	r1, [r1, #8]
 80004dc:	fb01 f303 	mul.w	r3, r1, r3
 80004e0:	4413      	add	r3, r2
 80004e2:	121a      	asrs	r2, r3, #8
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 80004ea:	e003      	b.n	80004f4 <Sensor_SetNewRange+0x64>
		pDev->LeakyFirst =1;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2201      	movs	r2, #1
 80004f0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000

08000504 <RangeDemo>:

int RangeDemo(int UseSensorsMaask, RangingConfig_e rangingConfig)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
	int status;
	SetupSingleShot(rangingConfig);
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff feac 	bl	8000270 <SetupSingleShot>

	while(1)
	{

		status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs, &RangingMeasurementData);
 8000518:	490c      	ldr	r1, [pc, #48]	; (800054c <RangeDemo+0x48>)
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <RangeDemo+0x4c>)
 800051c:	f004 f950 	bl	80047c0 <VL53L0X_PerformSingleRangingMeasurement>
 8000520:	4603      	mov	r3, r0
 8000522:	60fb      	str	r3, [r7, #12]
		if (status)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <RangeDemo+0x2c>
		{
			printf("Could not Measure...\n");
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <RangeDemo+0x50>)
 800052c:	f007 fd74 	bl	8008018 <puts>
		}
		printf("%d,%d \n",RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <RangeDemo+0x48>)
 8000532:	7e1b      	ldrb	r3, [r3, #24]
 8000534:	4619      	mov	r1, r3
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <RangeDemo+0x48>)
 8000538:	891b      	ldrh	r3, [r3, #8]
 800053a:	461a      	mov	r2, r3
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <RangeDemo+0x54>)
 800053e:	f007 fcf7 	bl	8007f30 <iprintf>
		Sensor_SetNewRange(&VL53L0XDevs, &RangingMeasurementData);
 8000542:	4902      	ldr	r1, [pc, #8]	; (800054c <RangeDemo+0x48>)
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <RangeDemo+0x4c>)
 8000546:	f7ff ffa3 	bl	8000490 <Sensor_SetNewRange>
		status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs, &RangingMeasurementData);
 800054a:	e7e5      	b.n	8000518 <RangeDemo+0x14>
 800054c:	2000057c 	.word	0x2000057c
 8000550:	20000004 	.word	0x20000004
 8000554:	08008fac 	.word	0x08008fac
 8000558:	08008fc4 	.word	0x08008fc4

0800055c <_write>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  for (int i = 0; i < len; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e009      	b.n	8000582 <_write+0x26>
    ITM_SendChar((*ptr++));
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	60ba      	str	r2, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe00 	bl	800017c <ITM_SendChar>
  for (int i = 0; i < len; i++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbf1      	blt.n	800056e <_write+0x12>
  return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
RangingConfig_e RangingConfig = LONG_RANGE;
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]
int UseSensorMask = 1 << 1;
 800059e:	2302      	movs	r3, #2
 80005a0:	603b      	str	r3, [r7, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fcb4 	bl	8000f0e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f81d 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8c1 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f895 	bl	80006dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b2:	f000 f865 	bl	8000680 <MX_I2C1_Init>
  printf("Welcome :)");
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <main+0x48>)
 80005b8:	f007 fcba 	bl	8007f30 <iprintf>
  InitSensors();
 80005bc:	f7ff fe04 	bl	80001c8 <InitSensors>
  HAL_Delay(500);
 80005c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c4:	f000 fd12 	bl	8000fec <HAL_Delay>
  printf("Succes");
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0x4c>)
 80005ca:	f007 fcb1 	bl	8007f30 <iprintf>

  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE);
  /* USER CODE BEGIN 2 */

  RangeDemo(UseSensorMask, RangingConfig);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4619      	mov	r1, r3
 80005d2:	6838      	ldr	r0, [r7, #0]
 80005d4:	f7ff ff96 	bl	8000504 <RangeDemo>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x44>
 80005da:	bf00      	nop
 80005dc:	08008fcc 	.word	0x08008fcc
 80005e0:	08008fd8 	.word	0x08008fd8

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b092      	sub	sp, #72	; 0x48
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fc93 	bl	8007f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <SystemClock_Config+0x98>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <SystemClock_Config+0x98>)
 8000610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000614:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2300      	movs	r3, #0
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800062a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000630:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fed6 	bl	80023ec <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000646:	f000 f8db 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2101      	movs	r1, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f9f2 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066e:	f000 f8c7 	bl	8000800 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3748      	adds	r7, #72	; 0x48
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40007000 	.word	0x40007000

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f000 ff41 	bl	8001544 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f89a 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200004e8 	.word	0x200004e8
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f002 fbb8 	bl	8002e88 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f86f 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000053c 	.word	0x2000053c
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a29      	ldr	r2, [pc, #164]	; (80007f0 <MX_GPIO_Init+0xc0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_GPIO_Init+0xc0>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a1d      	ldr	r2, [pc, #116]	; (80007f0 <MX_GPIO_Init+0xc0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_GPIO_Init+0xc0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_GPIO_Init+0xc0>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0xc4>)
 80007ac:	f000 feb2 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0xc8>)
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_GPIO_Init+0xcc>)
 80007c6:	f000 fd17 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ca:	2320      	movs	r3, #32
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xc4>)
 80007e2:	f000 fd09 	bl	80011f8 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	10110000 	.word	0x10110000
 80007fc:	40020800 	.word	0x40020800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_MspInit+0x58>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <HAL_MspInit+0x58>)
 8000818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081c:	6253      	str	r3, [r2, #36]	; 0x24
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_MspInit+0x58>)
 8000820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x58>)
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_MspInit+0x58>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6213      	str	r3, [r2, #32]
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x58>)
 8000838:	6a1b      	ldr	r3, [r3, #32]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x58>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_MspInit+0x58>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6253      	str	r3, [r2, #36]	; 0x24
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_MspInit+0x58>)
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d127      	bne.n	80008da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a2:	23c0      	movs	r3, #192	; 0xc0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a6:	2312      	movs	r3, #18
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b2:	2304      	movs	r3, #4
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <HAL_I2C_MspInit+0x84>)
 80008be:	f000 fc9b 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008cc:	6253      	str	r3, [r2, #36]	; 0x24
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d127      	bne.n	8000962 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6253      	str	r3, [r2, #36]	; 0x24
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x80>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x84>)
 800095e:	f000 fc4b 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <HardFault_Handler+0x4>

0800098a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <BusFault_Handler+0x4>

08000996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 faf6 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
	}

return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <_isatty>:

int _isatty(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
	return 1;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
	return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
	...

08000a68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x50>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x16>
		heap_end = &end;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <_sbrk+0x50>)
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <_sbrk+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <_sbrk+0x50>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <_sbrk+0x50>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	466a      	mov	r2, sp
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d907      	bls.n	8000aa2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a92:	f007 fa0f 	bl	8007eb4 <__errno>
 8000a96:	4602      	mov	r2, r0
 8000a98:	230c      	movs	r3, #12
 8000a9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	e006      	b.n	8000ab0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <_sbrk+0x50>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <_sbrk+0x50>)
 8000aac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200004dc 	.word	0x200004dc
 8000abc:	200005e0 	.word	0x200005e0

08000ac0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <SystemInit+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <SystemInit+0x5c>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <SystemInit+0x5c>)
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <SystemInit+0x5c>)
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <SystemInit+0x60>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <SystemInit+0x5c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <SystemInit+0x5c>)
 8000ae2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000ae6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000aea:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <SystemInit+0x5c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SystemInit+0x5c>)
 8000af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SystemInit+0x5c>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <SystemInit+0x5c>)
 8000afe:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b02:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SystemInit+0x5c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x64>)
 8000b0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b10:	609a      	str	r2, [r3, #8]
#endif
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	88ffc00c 	.word	0x88ffc00c
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	330a      	adds	r3, #10
 8000b38:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000b46:	b299      	uxth	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4613      	mov	r3, r2
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f000 fe1e 	bl	8001794 <HAL_I2C_Master_Transmit>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000b5c:	693b      	ldr	r3, [r7, #16]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b088      	sub	sp, #32
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	330a      	adds	r3, #10
 8000b76:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	b299      	uxth	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	4613      	mov	r3, r2
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f000 fefa 	bl	8001990 <HAL_I2C_Master_Receive>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000ba0:	693b      	ldr	r3, [r7, #16]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc4:	d902      	bls.n	8000bcc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8000bc6:	f06f 0303 	mvn.w	r3, #3
 8000bca:	e016      	b.n	8000bfa <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <VL53L0X_WriteMulti+0x58>)
 8000bce:	7afb      	ldrb	r3, [r7, #11]
 8000bd0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <VL53L0X_WriteMulti+0x5c>)
 8000bd8:	f007 f996 	bl	8007f08 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	461a      	mov	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <VL53L0X_WriteMulti+0x58>)
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff ff9f 	bl	8000b28 <_I2CWrite>
 8000bea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000bf2:	23ec      	movs	r3, #236	; 0xec
 8000bf4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000598 	.word	0x20000598
 8000c08:	20000599 	.word	0x20000599

08000c0c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000c20:	f107 030b 	add.w	r3, r7, #11
 8000c24:	2201      	movs	r2, #1
 8000c26:	4619      	mov	r1, r3
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff ff7d 	bl	8000b28 <_I2CWrite>
 8000c2e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000c36:	23ec      	movs	r3, #236	; 0xec
 8000c38:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000c3a:	e00c      	b.n	8000c56 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff ff90 	bl	8000b66 <_I2CRead>
 8000c46:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000c4e:	23ec      	movs	r3, #236	; 0xec
 8000c50:	75fb      	strb	r3, [r7, #23]
 8000c52:	e000      	b.n	8000c56 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8000c54:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8000c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
 8000c70:	4613      	mov	r3, r2
 8000c72:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <VL53L0X_WrByte+0x44>)
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <VL53L0X_WrByte+0x44>)
 8000c80:	78bb      	ldrb	r3, [r7, #2]
 8000c82:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000c84:	2202      	movs	r2, #2
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <VL53L0X_WrByte+0x44>)
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff4d 	bl	8000b28 <_I2CWrite>
 8000c8e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000c96:	23ec      	movs	r3, #236	; 0xec
 8000c98:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000598 	.word	0x20000598

08000cac <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	70fb      	strb	r3, [r7, #3]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <VL53L0X_WrWord+0x50>)
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <VL53L0X_WrWord+0x50>)
 8000cd0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8000cd2:	883b      	ldrh	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <VL53L0X_WrWord+0x50>)
 8000cd8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <VL53L0X_WrWord+0x50>)
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff22 	bl	8000b28 <_I2CWrite>
 8000ce4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000cec:	23ec      	movs	r3, #236	; 0xec
 8000cee:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000598 	.word	0x20000598

08000d00 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	4608      	mov	r0, r1
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4603      	mov	r3, r0
 8000d10:	70fb      	strb	r3, [r7, #3]
 8000d12:	460b      	mov	r3, r1
 8000d14:	70bb      	strb	r3, [r7, #2]
 8000d16:	4613      	mov	r3, r2
 8000d18:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8000d1e:	f107 020e 	add.w	r2, r7, #14
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f81e 	bl	8000d68 <VL53L0X_RdByte>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8000d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d110      	bne.n	8000d5a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8000d38:	7bba      	ldrb	r2, [r7, #14]
 8000d3a:	78bb      	ldrb	r3, [r7, #2]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8000d48:	7bba      	ldrb	r2, [r7, #14]
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff88 	bl	8000c64 <VL53L0X_WrByte>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e000      	b.n	8000d5c <VL53L0X_UpdateByte+0x5c>
        goto done;
 8000d5a:	bf00      	nop
done:
    return Status;
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	460b      	mov	r3, r1
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000d7a:	f107 030b 	add.w	r3, r7, #11
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff fed0 	bl	8000b28 <_I2CWrite>
 8000d88:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000d90:	23ec      	movs	r3, #236	; 0xec
 8000d92:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000d94:	e00c      	b.n	8000db0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff fee3 	bl	8000b66 <_I2CRead>
 8000da0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000da8:	23ec      	movs	r3, #236	; 0xec
 8000daa:	75fb      	strb	r3, [r7, #23]
 8000dac:	e000      	b.n	8000db0 <VL53L0X_RdByte+0x48>
    }
done:
 8000dae:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8000db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000dce:	f107 030b 	add.w	r3, r7, #11
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fea6 	bl	8000b28 <_I2CWrite>
 8000ddc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000de4:	23ec      	movs	r3, #236	; 0xec
 8000de6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000de8:	e017      	b.n	8000e1a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8000dea:	2202      	movs	r2, #2
 8000dec:	490e      	ldr	r1, [pc, #56]	; (8000e28 <VL53L0X_RdWord+0x6c>)
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff feb9 	bl	8000b66 <_I2CRead>
 8000df4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000dfc:	23ec      	movs	r3, #236	; 0xec
 8000dfe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000e00:	e00b      	b.n	8000e1a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <VL53L0X_RdWord+0x6c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <VL53L0X_RdWord+0x6c>)
 8000e0e:	785b      	ldrb	r3, [r3, #1]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8000e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000598 	.word	0x20000598

08000e2c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	460b      	mov	r3, r1
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000e3e:	f107 030b 	add.w	r3, r7, #11
 8000e42:	2201      	movs	r2, #1
 8000e44:	4619      	mov	r1, r3
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff fe6e 	bl	8000b28 <_I2CWrite>
 8000e4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000e54:	23ec      	movs	r3, #236	; 0xec
 8000e56:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000e58:	e01b      	b.n	8000e92 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	4910      	ldr	r1, [pc, #64]	; (8000ea0 <VL53L0X_RdDWord+0x74>)
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff fe81 	bl	8000b66 <_I2CRead>
 8000e64:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000e6c:	23ec      	movs	r3, #236	; 0xec
 8000e6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000e70:	e00f      	b.n	8000e92 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <VL53L0X_RdDWord+0x74>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	061a      	lsls	r2, r3, #24
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <VL53L0X_RdDWord+0x74>)
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	441a      	add	r2, r3
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <VL53L0X_RdDWord+0x74>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	4413      	add	r3, r2
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <VL53L0X_RdDWord+0x74>)
 8000e8a:	78d2      	ldrb	r2, [r2, #3]
 8000e8c:	441a      	add	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8000e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000598 	.word	0x20000598

08000ea4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f000 f89b 	bl	8000fec <HAL_Delay>
    return status;
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ec4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ec6:	e003      	b.n	8000ed0 <LoopCopyDataInit>

08000ec8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000eca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ecc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ece:	3104      	adds	r1, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ed4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ed8:	d3f6      	bcc.n	8000ec8 <CopyDataInit>
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000edc:	e002      	b.n	8000ee4 <LoopFillZerobss>

08000ede <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ee0:	f842 3b04 	str.w	r3, [r2], #4

08000ee4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ee8:	d3f9      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eea:	f7ff fde9 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f006 ffe7 	bl	8007ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff fb4f 	bl	8000594 <main>
  bx lr
 8000ef6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ef8:	080090a4 	.word	0x080090a4
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f00:	200004c0 	.word	0x200004c0
  ldr r2, =_sbss
 8000f04:	200004c0 	.word	0x200004c0
  ldr r3, = _ebss
 8000f08:	200005e0 	.word	0x200005e0

08000f0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_IRQHandler>

08000f0e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f939 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f80e 	bl	8000f40 <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f30:	f7ff fc6c 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_InitTick+0x68>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d022      	beq.n	8000f9a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_InitTick+0x6c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_InitTick+0x68>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f938 	bl	80011de <HAL_SYSTICK_Config>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10f      	bne.n	8000f94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	d809      	bhi.n	8000f8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f82:	f000 f910 	bl	80011a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_InitTick+0x70>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e004      	b.n	8000f9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e001      	b.n	8000f9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000019c 	.word	0x2000019c
 8000fac:	20000194 	.word	0x20000194
 8000fb0:	20000198 	.word	0x20000198

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200005d8 	.word	0x200005d8
 8000fd4:	2000019c 	.word	0x2000019c

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	200005d8 	.word	0x200005d8

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fff0 	bl	8000fd8 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d004      	beq.n	8001010 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_Delay+0x40>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001010:	bf00      	nop
 8001012:	f7ff ffe1 	bl	8000fd8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	429a      	cmp	r2, r3
 8001020:	d8f7      	bhi.n	8001012 <HAL_Delay+0x26>
  {
  }
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000019c 	.word	0x2000019c

08001030 <__NVIC_SetPriorityGrouping>:
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_SetPriority>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <SysTick_Config>:
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff90 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff49 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800120e:	e160      	b.n	80014d2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8152 	beq.w	80014cc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x40>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b12      	cmp	r3, #18
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	6939      	ldr	r1, [r7, #16]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d00b      	beq.n	80012d4 <HAL_GPIO_Init+0xdc>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	2b11      	cmp	r3, #17
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80ac 	beq.w	80014cc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a5c      	ldr	r2, [pc, #368]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	4b5a      	ldr	r3, [pc, #360]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 800138c:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001398:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d025      	beq.n	8001404 <HAL_GPIO_Init+0x20c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x300>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d01f      	beq.n	8001400 <HAL_GPIO_Init+0x208>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x304>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d019      	beq.n	80013fc <HAL_GPIO_Init+0x204>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x308>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d013      	beq.n	80013f8 <HAL_GPIO_Init+0x200>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x30c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00d      	beq.n	80013f4 <HAL_GPIO_Init+0x1fc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x310>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0x1f8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x314>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_GPIO_Init+0x1f4>
 80013e8:	2306      	movs	r3, #6
 80013ea:	e00c      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 80013ec:	2307      	movs	r3, #7
 80013ee:	e00a      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 80013f0:	2305      	movs	r3, #5
 80013f2:	e008      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 80013f8:	2303      	movs	r3, #3
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x20e>
 8001404:	2300      	movs	r3, #0
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001416:	4936      	ldr	r1, [pc, #216]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_GPIO_Init+0x318>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001448:	4a31      	ldr	r2, [pc, #196]	; (8001510 <HAL_GPIO_Init+0x318>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_GPIO_Init+0x318>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001472:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_GPIO_Init+0x318>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_GPIO_Init+0x318>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <HAL_GPIO_Init+0x318>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_GPIO_Init+0x318>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_GPIO_Init+0x318>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f47f ae97 	bne.w	8001210 <HAL_GPIO_Init+0x18>
  } 
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40021400 	.word	0x40021400
 800150c:	40021800 	.word	0x40021800
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001530:	e003      	b.n	800153a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e10f      	b.n	8001776 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff f97c 	bl	8000868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001588:	f001 fbf6 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 800158c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a7b      	ldr	r2, [pc, #492]	; (8001780 <HAL_I2C_Init+0x23c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d807      	bhi.n	80015a8 <HAL_I2C_Init+0x64>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_I2C_Init+0x240>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	e006      	b.n	80015b6 <HAL_I2C_Init+0x72>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a77      	ldr	r2, [pc, #476]	; (8001788 <HAL_I2C_Init+0x244>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	bf94      	ite	ls
 80015b0:	2301      	movls	r3, #1
 80015b2:	2300      	movhi	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0db      	b.n	8001776 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a72      	ldr	r2, [pc, #456]	; (800178c <HAL_I2C_Init+0x248>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a64      	ldr	r2, [pc, #400]	; (8001780 <HAL_I2C_Init+0x23c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d802      	bhi.n	80015f8 <HAL_I2C_Init+0xb4>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	e009      	b.n	800160c <HAL_I2C_Init+0xc8>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a63      	ldr	r2, [pc, #396]	; (8001790 <HAL_I2C_Init+0x24c>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	430b      	orrs	r3, r1
 8001612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800161e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4956      	ldr	r1, [pc, #344]	; (8001780 <HAL_I2C_Init+0x23c>)
 8001628:	428b      	cmp	r3, r1
 800162a:	d80d      	bhi.n	8001648 <HAL_I2C_Init+0x104>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1e59      	subs	r1, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fbb1 f3f3 	udiv	r3, r1, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b04      	cmp	r3, #4
 8001642:	bf38      	it	cc
 8001644:	2304      	movcc	r3, #4
 8001646:	e04f      	b.n	80016e8 <HAL_I2C_Init+0x1a4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d111      	bne.n	8001674 <HAL_I2C_Init+0x130>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1e58      	subs	r0, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	440b      	add	r3, r1
 800165e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001662:	3301      	adds	r3, #1
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e012      	b.n	800169a <HAL_I2C_Init+0x156>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1e58      	subs	r0, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	0099      	lsls	r1, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	fbb0 f3f3 	udiv	r3, r0, r3
 800168a:	3301      	adds	r3, #1
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf0c      	ite	eq
 8001694:	2301      	moveq	r3, #1
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Init+0x15e>
 800169e:	2301      	movs	r3, #1
 80016a0:	e022      	b.n	80016e8 <HAL_I2C_Init+0x1a4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10e      	bne.n	80016c8 <HAL_I2C_Init+0x184>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1e58      	subs	r0, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	460b      	mov	r3, r1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	440b      	add	r3, r1
 80016b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c6:	e00f      	b.n	80016e8 <HAL_I2C_Init+0x1a4>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	6809      	ldr	r1, [r1, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69da      	ldr	r2, [r3, #28]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6911      	ldr	r1, [r2, #16]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68d2      	ldr	r2, [r2, #12]
 8001722:	4311      	orrs	r1, r2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	430b      	orrs	r3, r1
 800172a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	000186a0 	.word	0x000186a0
 8001784:	001e847f 	.word	0x001e847f
 8001788:	003d08ff 	.word	0x003d08ff
 800178c:	431bde83 	.word	0x431bde83
 8001790:	10624dd3 	.word	0x10624dd3

08001794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	817b      	strh	r3, [r7, #10]
 80017a4:	4613      	mov	r3, r2
 80017a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff fc16 	bl	8000fd8 <HAL_GetTick>
 80017ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	f040 80e0 	bne.w	800197c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2319      	movs	r3, #25
 80017c2:	2201      	movs	r2, #1
 80017c4:	4970      	ldr	r1, [pc, #448]	; (8001988 <HAL_I2C_Master_Transmit+0x1f4>)
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fc34 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
 80017d4:	e0d3      	b.n	800197e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_I2C_Master_Transmit+0x50>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0cc      	b.n	800197e <HAL_I2C_Master_Transmit+0x1ea>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d007      	beq.n	800180a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001818:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2221      	movs	r2, #33	; 0x21
 800181e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2210      	movs	r2, #16
 8001826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	893a      	ldrh	r2, [r7, #8]
 800183a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a50      	ldr	r2, [pc, #320]	; (800198c <HAL_I2C_Master_Transmit+0x1f8>)
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800184c:	8979      	ldrh	r1, [r7, #10]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6a3a      	ldr	r2, [r7, #32]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fac2 	bl	8001ddc <I2C_MasterRequestWrite>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e08d      	b.n	800197e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001878:	e066      	b.n	8001948 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fcae 	bl	80021e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00d      	beq.n	80018a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b04      	cmp	r3, #4
 8001890:	d107      	bne.n	80018a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06b      	b.n	800197e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d11b      	bne.n	800191c <HAL_I2C_Master_Transmit+0x188>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d017      	beq.n	800191c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	6a39      	ldr	r1, [r7, #32]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fc9e 	bl	8002262 <I2C_WaitOnBTFFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00d      	beq.n	8001948 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	2b04      	cmp	r3, #4
 8001932:	d107      	bne.n	8001944 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001942:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e01a      	b.n	800197e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d194      	bne.n	800187a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800197c:	2302      	movs	r3, #2
  }
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	00100002 	.word	0x00100002
 800198c:	ffff0000 	.word	0xffff0000

08001990 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	461a      	mov	r2, r3
 800199c:	460b      	mov	r3, r1
 800199e:	817b      	strh	r3, [r7, #10]
 80019a0:	4613      	mov	r3, r2
 80019a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fb18 	bl	8000fd8 <HAL_GetTick>
 80019a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	f040 820b 	bne.w	8001dce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2319      	movs	r3, #25
 80019be:	2201      	movs	r2, #1
 80019c0:	497c      	ldr	r1, [pc, #496]	; (8001bb4 <HAL_I2C_Master_Receive+0x224>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fb36 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
 80019d0:	e1fe      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_I2C_Master_Receive+0x50>
 80019dc:	2302      	movs	r3, #2
 80019de:	e1f7      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d007      	beq.n	8001a06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2222      	movs	r2, #34	; 0x22
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2210      	movs	r2, #16
 8001a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	893a      	ldrh	r2, [r7, #8]
 8001a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4a5c      	ldr	r2, [pc, #368]	; (8001bb8 <HAL_I2C_Master_Receive+0x228>)
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a48:	8979      	ldrh	r1, [r7, #10]
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fa3a 	bl	8001ec8 <I2C_MasterRequestRead>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e1b8      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e18c      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d11b      	bne.n	8001ace <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e16c      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d11b      	bne.n	8001b0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	e14c      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b34:	e138      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	f200 80f1 	bhi.w	8001d22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d123      	bne.n	8001b90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fbc9 	bl	80022e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e139      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b8e:	e10b      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d14e      	bne.n	8001c36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4906      	ldr	r1, [pc, #24]	; (8001bbc <HAL_I2C_Master_Receive+0x22c>)
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fa46 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e10e      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
 8001bb2:	bf00      	nop
 8001bb4:	00100002 	.word	0x00100002
 8001bb8:	ffff0000 	.word	0xffff0000
 8001bbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c34:	e0b8      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4966      	ldr	r1, [pc, #408]	; (8001dd8 <HAL_I2C_Master_Receive+0x448>)
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f9f7 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0bf      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	2200      	movs	r2, #0
 8001c9a:	494f      	ldr	r1, [pc, #316]	; (8001dd8 <HAL_I2C_Master_Receive+0x448>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f9c9 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e091      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d20:	e042      	b.n	8001da8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fadc 	bl	80022e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e04c      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d118      	bne.n	8001da8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f47f aec2 	bne.w	8001b36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	00010004 	.word	0x00010004

08001ddc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	460b      	mov	r3, r1
 8001dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d006      	beq.n	8001e06 <I2C_MasterRequestWrite+0x2a>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d003      	beq.n	8001e06 <I2C_MasterRequestWrite+0x2a>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e04:	d108      	bne.n	8001e18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e00b      	b.n	8001e30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d107      	bne.n	8001e30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f8f9 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e035      	b.n	8001eb8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e54:	d108      	bne.n	8001e68 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	e01b      	b.n	8001ea0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e68:	897b      	ldrh	r3, [r7, #10]
 8001e6a:	11db      	asrs	r3, r3, #7
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 0306 	and.w	r3, r3, #6
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f063 030f 	orn	r3, r3, #15
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <I2C_MasterRequestWrite+0xe4>)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f92b 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e010      	b.n	8001eb8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <I2C_MasterRequestWrite+0xe8>)
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f91b 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	00010008 	.word	0x00010008
 8001ec4:	00010002 	.word	0x00010002

08001ec8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d006      	beq.n	8001f02 <I2C_MasterRequestRead+0x3a>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d003      	beq.n	8001f02 <I2C_MasterRequestRead+0x3a>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f00:	d108      	bne.n	8001f14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e00b      	b.n	8001f2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d107      	bne.n	8001f2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f87b 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e06d      	b.n	8002024 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f50:	d108      	bne.n	8001f64 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	e053      	b.n	800200c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f64:	897b      	ldrh	r3, [r7, #10]
 8001f66:	11db      	asrs	r3, r3, #7
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f003 0306 	and.w	r3, r3, #6
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f063 030f 	orn	r3, r3, #15
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	492a      	ldr	r1, [pc, #168]	; (800202c <I2C_MasterRequestRead+0x164>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8ad 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e048      	b.n	8002024 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4923      	ldr	r1, [pc, #140]	; (8002030 <I2C_MasterRequestRead+0x168>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f89d 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e038      	b.n	8002024 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f825 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e017      	b.n	8002024 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ff4:	897b      	ldrh	r3, [r7, #10]
 8001ff6:	11db      	asrs	r3, r3, #7
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0306 	and.w	r3, r3, #6
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f063 030e 	orn	r3, r3, #14
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4907      	ldr	r1, [pc, #28]	; (8002030 <I2C_MasterRequestRead+0x168>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f865 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	00010008 	.word	0x00010008
 8002030:	00010002 	.word	0x00010002

08002034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002044:	e025      	b.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d021      	beq.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204e:	f7fe ffc3 	bl	8000fd8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d116      	bne.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f043 0220 	orr.w	r2, r3, #32
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e023      	b.n	80020da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10d      	bne.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4013      	ands	r3, r2
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	e00c      	b.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4013      	ands	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d0b6      	beq.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020f0:	e051      	b.n	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002100:	d123      	bne.n	800214a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002110:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800211a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0204 	orr.w	r2, r3, #4
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e046      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d021      	beq.n	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7fe ff41 	bl	8000fd8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d116      	bne.n	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e020      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d10c      	bne.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4013      	ands	r3, r2
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	e00b      	b.n	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	43da      	mvns	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4013      	ands	r3, r2
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d18d      	bne.n	80020f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ec:	e02d      	b.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f8ce 	bl	8002390 <I2C_IsAcknowledgeFailed>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e02d      	b.n	800225a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d021      	beq.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe fee7 	bl	8000fd8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0220 	orr.w	r2, r3, #32
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e007      	b.n	800225a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d1ca      	bne.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226e:	e02d      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f88d 	bl	8002390 <I2C_IsAcknowledgeFailed>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e02d      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d021      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002288:	f7fe fea6 	bl	8000fd8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e007      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d1ca      	bne.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022f0:	e042      	b.n	8002378 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d119      	bne.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0210 	mvn.w	r2, #16
 8002308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e029      	b.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002334:	f7fe fe50 	bl	8000fd8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	d302      	bcc.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d1b5      	bne.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	d11b      	bne.n	80023e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e31d      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fe:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002408:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d07b      	beq.n	8002516 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d006      	beq.n	8002432 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d10f      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d10b      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002432:	4b87      	ldr	r3, [pc, #540]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06a      	beq.n	8002514 <HAL_RCC_OscConfig+0x128>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d166      	bne.n	8002514 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e2f7      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x74>
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7e      	ldr	r2, [pc, #504]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e02d      	b.n	80024bc <HAL_RCC_OscConfig+0xd0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x96>
 8002468:	4b79      	ldr	r3, [pc, #484]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a78      	ldr	r2, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e01c      	b.n	80024bc <HAL_RCC_OscConfig+0xd0>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0xb8>
 800248a:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a70      	ldr	r2, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6d      	ldr	r2, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xd0>
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd88 	bl	8000fd8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fd84 	bl	8000fd8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e2ad      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xe0>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd74 	bl	8000fd8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fd70 	bl	8000fd8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e299      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002506:	4b52      	ldr	r3, [pc, #328]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x108>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d05a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d119      	bne.n	8002562 <HAL_RCC_OscConfig+0x176>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d116      	bne.n	8002562 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_OscConfig+0x160>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e276      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b40      	ldr	r3, [pc, #256]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	493d      	ldr	r1, [pc, #244]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002560:	e03a      	b.n	80025d8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_RCC_OscConfig+0x268>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fd32 	bl	8000fd8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002578:	f7fe fd2e 	bl	8000fd8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e257      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	492a      	ldr	r1, [pc, #168]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
 80025aa:	e015      	b.n	80025d8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_OscConfig+0x268>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fd11 	bl	8000fd8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe fd0d 	bl	8000fd8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e236      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80b8 	beq.w	8002756 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d170      	bne.n	80026ce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_OscConfig+0x218>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e21a      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002610:	429a      	cmp	r2, r3
 8002612:	d921      	bls.n	8002658 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fbd5 	bl	8002dc8 <RCC_SetFlashLatencyFromMSIRange>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e208      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	4901      	ldr	r1, [pc, #4]	; (8002650 <HAL_RCC_OscConfig+0x264>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	e020      	b.n	8002692 <HAL_RCC_OscConfig+0x2a6>
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002658:	4ba4      	ldr	r3, [pc, #656]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	49a1      	ldr	r1, [pc, #644]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266a:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	499c      	ldr	r1, [pc, #624]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fba0 	bl	8002dc8 <RCC_SetFlashLatencyFromMSIRange>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1d3      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	0b5b      	lsrs	r3, r3, #13
 8002698:	3301      	adds	r3, #1
 800269a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80026a2:	4a92      	ldr	r2, [pc, #584]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80026a4:	6892      	ldr	r2, [r2, #8]
 80026a6:	0912      	lsrs	r2, r2, #4
 80026a8:	f002 020f 	and.w	r2, r2, #15
 80026ac:	4990      	ldr	r1, [pc, #576]	; (80028f0 <HAL_RCC_OscConfig+0x504>)
 80026ae:	5c8a      	ldrb	r2, [r1, r2]
 80026b0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026b2:	4a90      	ldr	r2, [pc, #576]	; (80028f4 <HAL_RCC_OscConfig+0x508>)
 80026b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026b6:	4b90      	ldr	r3, [pc, #576]	; (80028f8 <HAL_RCC_OscConfig+0x50c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fc40 	bl	8000f40 <HAL_InitTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d045      	beq.n	8002756 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	e1b5      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d029      	beq.n	800272a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d6:	4b89      	ldr	r3, [pc, #548]	; (80028fc <HAL_RCC_OscConfig+0x510>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fc7c 	bl	8000fd8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e4:	f7fe fc78 	bl	8000fd8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1a1      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026f6:	4b7d      	ldr	r3, [pc, #500]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002702:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4977      	ldr	r1, [pc, #476]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002714:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	4972      	ldr	r1, [pc, #456]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800272a:	4b74      	ldr	r3, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x510>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fc52 	bl	8000fd8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002738:	f7fe fc4e 	bl	8000fd8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e177      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800274a:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d030      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d016      	beq.n	8002798 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x514>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7fe fc32 	bl	8000fd8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fc2e 	bl	8000fd8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e157      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278a:	4b58      	ldr	r3, [pc, #352]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x38c>
 8002796:	e015      	b.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_OscConfig+0x514>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe fc1b 	bl	8000fd8 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe fc17 	bl	8000fd8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e140      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80b5 	beq.w	800293c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b42      	ldr	r3, [pc, #264]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	4a41      	ldr	r2, [pc, #260]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6253      	str	r3, [r2, #36]	; 0x24
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_OscConfig+0x518>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x518>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3d      	ldr	r2, [pc, #244]	; (8002904 <HAL_RCC_OscConfig+0x518>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe fbdf 	bl	8000fd8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fbdb 	bl	8000fd8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	; 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e104      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x518>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x466>
 8002844:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6353      	str	r3, [r2, #52]	; 0x34
 8002850:	e02d      	b.n	80028ae <HAL_RCC_OscConfig+0x4c2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x488>
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002864:	6353      	str	r3, [r2, #52]	; 0x34
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800286c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002870:	6353      	str	r3, [r2, #52]	; 0x34
 8002872:	e01c      	b.n	80028ae <HAL_RCC_OscConfig+0x4c2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x4aa>
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002886:	6353      	str	r3, [r2, #52]	; 0x34
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6353      	str	r3, [r2, #52]	; 0x34
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x4c2>
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	6353      	str	r3, [r2, #52]	; 0x34
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80028a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d015      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fb8f 	bl	8000fd8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fb8b 	bl	8000fd8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0b2      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_OscConfig+0x500>)
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ee      	beq.n	80028be <HAL_RCC_OscConfig+0x4d2>
 80028e0:	e023      	b.n	800292a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fb79 	bl	8000fd8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028e8:	e019      	b.n	800291e <HAL_RCC_OscConfig+0x532>
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08008fec 	.word	0x08008fec
 80028f4:	20000194 	.word	0x20000194
 80028f8:	20000198 	.word	0x20000198
 80028fc:	42470020 	.word	0x42470020
 8002900:	42470680 	.word	0x42470680
 8002904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe fb66 	bl	8000fd8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e08d      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ee      	bne.n	8002908 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	4a43      	ldr	r2, [pc, #268]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d079      	beq.n	8002a38 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d056      	beq.n	80029f8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b02      	cmp	r3, #2
 8002950:	d13b      	bne.n	80029ca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_OscConfig+0x65c>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fb3e 	bl	8000fd8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fb3a 	bl	8000fd8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e063      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	4319      	orrs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	430b      	orrs	r3, r1
 8002996:	492b      	ldr	r1, [pc, #172]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <HAL_RCC_OscConfig+0x65c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fb19 	bl	8000fd8 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fb15 	bl	8000fd8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e03e      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x5be>
 80029c8:	e036      	b.n	8002a38 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_OscConfig+0x65c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fb02 	bl	8000fd8 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fafe 	bl	8000fd8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e027      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5ec>
 80029f6:	e01f      	b.n	8002a38 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e01a      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_RCC_OscConfig+0x658>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470060 	.word	0x42470060

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e11a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b8f      	ldr	r3, [pc, #572]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d919      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x34>
 8002a74:	4b8a      	ldr	r3, [pc, #552]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a89      	ldr	r2, [pc, #548]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 0201 	bic.w	r2, r3, #1
 8002a88:	4985      	ldr	r1, [pc, #532]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a90:	4b83      	ldr	r3, [pc, #524]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0f9      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	497a      	ldr	r1, [pc, #488]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 808e 	beq.w	8002bea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad6:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0d7      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aee:	4b6d      	ldr	r3, [pc, #436]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0cb      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0bf      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0b7      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	495c      	ldr	r1, [pc, #368]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fa4e 	bl	8000fd8 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d112      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7fe fa46 	bl	8000fd8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e09b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b5e:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xfc>
 8002b6a:	e03e      	b.n	8002bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d112      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b76:	f7fe fa2f 	bl	8000fd8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e084      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b8c:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d1ee      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x12a>
 8002b98:	e027      	b.n	8002bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d11d      	bne.n	8002bde <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fa18 	bl	8000fd8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e06d      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x158>
 8002bc6:	e010      	b.n	8002bea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe fa06 	bl	8000fd8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e05b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d219      	bcs.n	8002c2c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x1be>
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	4923      	ldr	r1, [pc, #140]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e034      	b.n	8002c96 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4917      	ldr	r1, [pc, #92]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	490f      	ldr	r1, [pc, #60]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6a:	f000 f823 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c6e:	4601      	mov	r1, r0
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCC_ClockConfig+0x258>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x264>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f958 	bl	8000f40 <HAL_InitTick>
 8002c90:	4603      	mov	r3, r0
 8002c92:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c94:	7afb      	ldrb	r3, [r7, #11]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08008fec 	.word	0x08008fec
 8002cac:	20000194 	.word	0x20000194
 8002cb0:	20000198 	.word	0x20000198

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d006      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x24>
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d007      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x2a>
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d12c      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cd4:	613b      	str	r3, [r7, #16]
      break;
 8002cd6:	e037      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cda:	613b      	str	r3, [r7, #16]
      break;
 8002cdc:	e034      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	0d9b      	lsrs	r3, r3, #22
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d08:	fb02 f203 	mul.w	r2, r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e007      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d1a:	fb02 f203 	mul.w	r2, r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
      break;
 8002d2a:	e00d      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0b5b      	lsrs	r3, r3, #13
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	613b      	str	r3, [r7, #16]
      break;
 8002d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d48:	693b      	ldr	r3, [r7, #16]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200
 8002d60:	08008fe0 	.word	0x08008fe0

08002d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b02      	ldr	r3, [pc, #8]	; (8002d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	20000194 	.word	0x20000194

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d7c:	f7ff fff2 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d80:	4601      	mov	r1, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08008ffc 	.word	0x08008ffc

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da4:	f7ff ffde 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002da8:	4601      	mov	r1, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0adb      	lsrs	r3, r3, #11
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08008ffc 	.word	0x08008ffc

08002dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dd4:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d12c      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e016      	b.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6253      	str	r3, [r2, #36]	; 0x24
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e18:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002e2c:	d105      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e34:	d101      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002e36:	2301      	movs	r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 0201 	bic.w	r2, r3, #1
 8002e54:	490b      	ldr	r1, [pc, #44]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d001      	beq.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
 8002e84:	40023c00 	.word	0x40023c00

08002e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e03f      	b.n	8002f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fd1e 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f829 	bl	8002f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f64:	f023 030c 	bic.w	r3, r3, #12
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f90:	f040 80a5 	bne.w	80030de <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4aa4      	ldr	r2, [pc, #656]	; (800322c <UART_SetConfig+0x308>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d14f      	bne.n	800303e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f9e:	f7ff feff 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8002fa2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009a      	lsls	r2, r3, #2
 8002fae:	441a      	add	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	4a9d      	ldr	r2, [pc, #628]	; (8003230 <UART_SetConfig+0x30c>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	0119      	lsls	r1, r3, #4
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009a      	lsls	r2, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fda:	4b95      	ldr	r3, [pc, #596]	; (8003230 <UART_SetConfig+0x30c>)
 8002fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2064      	movs	r0, #100	; 0x64
 8002fe4:	fb00 f303 	mul.w	r3, r0, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a90      	ldr	r2, [pc, #576]	; (8003230 <UART_SetConfig+0x30c>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ffc:	4419      	add	r1, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009a      	lsls	r2, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fbb2 f2f3 	udiv	r2, r2, r3
 8003014:	4b86      	ldr	r3, [pc, #536]	; (8003230 <UART_SetConfig+0x30c>)
 8003016:	fba3 0302 	umull	r0, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2064      	movs	r0, #100	; 0x64
 800301e:	fb00 f303 	mul.w	r3, r0, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	3332      	adds	r3, #50	; 0x32
 8003028:	4a81      	ldr	r2, [pc, #516]	; (8003230 <UART_SetConfig+0x30c>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	f003 0207 	and.w	r2, r3, #7
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	440a      	add	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800303c:	e0f1      	b.n	8003222 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800303e:	f7ff fe9b 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8003042:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009a      	lsls	r2, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	4a75      	ldr	r2, [pc, #468]	; (8003230 <UART_SetConfig+0x30c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	0119      	lsls	r1, r3, #4
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009a      	lsls	r2, r3, #2
 800306e:	441a      	add	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fbb2 f2f3 	udiv	r2, r2, r3
 800307a:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <UART_SetConfig+0x30c>)
 800307c:	fba3 0302 	umull	r0, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2064      	movs	r0, #100	; 0x64
 8003084:	fb00 f303 	mul.w	r3, r0, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	3332      	adds	r3, #50	; 0x32
 800308e:	4a68      	ldr	r2, [pc, #416]	; (8003230 <UART_SetConfig+0x30c>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800309c:	4419      	add	r1, r3
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b4:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <UART_SetConfig+0x30c>)
 80030b6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	fb00 f303 	mul.w	r3, r0, r3
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a59      	ldr	r2, [pc, #356]	; (8003230 <UART_SetConfig+0x30c>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	440a      	add	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	e0a1      	b.n	8003222 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a52      	ldr	r2, [pc, #328]	; (800322c <UART_SetConfig+0x308>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d14e      	bne.n	8003186 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030e8:	f7ff fe5a 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 80030ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	4a4a      	ldr	r2, [pc, #296]	; (8003230 <UART_SetConfig+0x30c>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	0119      	lsls	r1, r3, #4
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4b42      	ldr	r3, [pc, #264]	; (8003230 <UART_SetConfig+0x30c>)
 8003126:	fba3 0302 	umull	r0, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	3332      	adds	r3, #50	; 0x32
 8003138:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <UART_SetConfig+0x30c>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003144:	4419      	add	r1, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <UART_SetConfig+0x30c>)
 800315e:	fba3 0302 	umull	r0, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2064      	movs	r0, #100	; 0x64
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	3332      	adds	r3, #50	; 0x32
 8003170:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <UART_SetConfig+0x30c>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	440a      	add	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	e04d      	b.n	8003222 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003186:	f7ff fdf7 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 800318a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	4a23      	ldr	r2, [pc, #140]	; (8003230 <UART_SetConfig+0x30c>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	0119      	lsls	r1, r3, #4
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <UART_SetConfig+0x30c>)
 80031c4:	fba3 0302 	umull	r0, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	2064      	movs	r0, #100	; 0x64
 80031cc:	fb00 f303 	mul.w	r3, r0, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	3332      	adds	r3, #50	; 0x32
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <UART_SetConfig+0x30c>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e2:	4419      	add	r1, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009a      	lsls	r2, r3, #2
 80031ee:	441a      	add	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <UART_SetConfig+0x30c>)
 80031fc:	fba3 0302 	umull	r0, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2064      	movs	r0, #100	; 0x64
 8003204:	fb00 f303 	mul.w	r3, r0, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <UART_SetConfig+0x30c>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	440a      	add	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40013800 	.word	0x40013800
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f001 fcbc 	bl	8004bc2 <VL53L0X_get_offset_calibration_data_micro_meter>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800325c:	b5b0      	push	{r4, r5, r7, lr}
 800325e:	b096      	sub	sp, #88	; 0x58
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800326a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003272:	2200      	movs	r2, #0
 8003274:	2188      	movs	r1, #136	; 0x88
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fcf4 	bl	8000c64 <VL53L0X_WrByte>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003290:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800329a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a9e      	ldr	r2, [pc, #632]	; (800351c <VL53L0X_DataInit+0x2c0>)
 80032a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a9d      	ldr	r2, [pc, #628]	; (8003520 <VL53L0X_DataInit+0x2c4>)
 80032aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fab4 	bl	8003828 <VL53L0X_GetDeviceParameters>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80032c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d112      	bne.n	80032f4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80032ce:	2300      	movs	r3, #0
 80032d0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80032d2:	2300      	movs	r3, #0
 80032d4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f103 0410 	add.w	r4, r3, #16
 80032dc:	f107 0510 	add.w	r5, r7, #16
 80032e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80032f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2264      	movs	r2, #100	; 0x64
 80032f8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003302:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800330c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003316:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003322:	2201      	movs	r2, #1
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fc9c 	bl	8000c64 <VL53L0X_WrByte>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003334:	4313      	orrs	r3, r2
 8003336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800333a:	2201      	movs	r2, #1
 800333c:	21ff      	movs	r1, #255	; 0xff
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fc90 	bl	8000c64 <VL53L0X_WrByte>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800334c:	4313      	orrs	r3, r2
 800334e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fc84 	bl	8000c64 <VL53L0X_WrByte>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003364:	4313      	orrs	r3, r2
 8003366:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800336a:	f107 030f 	add.w	r3, r7, #15
 800336e:	461a      	mov	r2, r3
 8003370:	2191      	movs	r1, #145	; 0x91
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fcf8 	bl	8000d68 <VL53L0X_RdByte>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003380:	4313      	orrs	r3, r2
 8003382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800338e:	2201      	movs	r2, #1
 8003390:	2100      	movs	r1, #0
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fc66 	bl	8000c64 <VL53L0X_WrByte>
 8003398:	4603      	mov	r3, r0
 800339a:	461a      	mov	r2, r3
 800339c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80033a6:	2200      	movs	r2, #0
 80033a8:	21ff      	movs	r1, #255	; 0xff
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fc5a 	bl	8000c64 <VL53L0X_WrByte>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80033be:	2200      	movs	r2, #0
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fc4e 	bl	8000c64 <VL53L0X_WrByte>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80033d6:	2300      	movs	r3, #0
 80033d8:	653b      	str	r3, [r7, #80]	; 0x50
 80033da:	e014      	b.n	8003406 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80033dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d114      	bne.n	800340e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80033e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2201      	movs	r2, #1
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fd41 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003402:	3301      	adds	r3, #1
 8003404:	653b      	str	r3, [r7, #80]	; 0x50
 8003406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003408:	2b05      	cmp	r3, #5
 800340a:	dde7      	ble.n	80033dc <VL53L0X_DataInit+0x180>
 800340c:	e000      	b.n	8003410 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800340e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003410:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003418:	2200      	movs	r2, #0
 800341a:	2102      	movs	r1, #2
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fd29 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003428:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003430:	2200      	movs	r2, #0
 8003432:	2103      	movs	r1, #3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fd1d 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003440:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003448:	2200      	movs	r2, #0
 800344a:	2104      	movs	r1, #4
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd11 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003458:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003460:	2200      	movs	r2, #0
 8003462:	2105      	movs	r1, #5
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fd05 	bl	8003e74 <VL53L0X_SetLimitCheckEnable>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003470:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003478:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800347c:	2100      	movs	r1, #0
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fda6 	bl	8003fd0 <VL53L0X_SetLimitCheckValue>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800348a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003496:	2101      	movs	r1, #1
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fd99 	bl	8003fd0 <VL53L0X_SetLimitCheckValue>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80034a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d108      	bne.n	80034be <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80034ac:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80034b0:	2102      	movs	r1, #2
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fd8c 	bl	8003fd0 <VL53L0X_SetLimitCheckValue>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80034be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80034c6:	2200      	movs	r2, #0
 80034c8:	2103      	movs	r1, #3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fd80 	bl	8003fd0 <VL53L0X_SetLimitCheckValue>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80034d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	22ff      	movs	r2, #255	; 0xff
 80034e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	2101      	movs	r1, #1
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fbba 	bl	8000c64 <VL53L0X_WrByte>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80034fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800350e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003512:	4618      	mov	r0, r3
 8003514:	3758      	adds	r7, #88	; 0x58
 8003516:	46bd      	mov	sp, r7
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
 800351a:	bf00      	nop
 800351c:	00016b85 	.word	0x00016b85
 8003520:	000970a4 	.word	0x000970a4

08003524 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003524:	b5b0      	push	{r4, r5, r7, lr}
 8003526:	b09e      	sub	sp, #120	; 0x78
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003532:	f107 031c 	add.w	r3, r7, #28
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fcef 	bl	8007f1e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003560:	2101      	movs	r1, #1
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f002 fa7f 	bl	8005a66 <VL53L0X_get_info_from_device>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003574:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800357c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003584:	2b01      	cmp	r3, #1
 8003586:	d80d      	bhi.n	80035a4 <VL53L0X_StaticInit+0x80>
 8003588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003592:	2b20      	cmp	r3, #32
 8003594:	d806      	bhi.n	80035a4 <VL53L0X_StaticInit+0x80>
 8003596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10e      	bne.n	80035bc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800359e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	d90b      	bls.n	80035bc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80035a4:	f107 0218 	add.w	r2, r7, #24
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f001 fd01 	bl	8004fb6 <VL53L0X_perform_ref_spad_management>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80035ba:	e009      	b.n	80035d0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80035bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035c0:	461a      	mov	r2, r3
 80035c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f001 ff02 	bl	80053ce <VL53L0X_set_reference_spads>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80035d0:	4b94      	ldr	r3, [pc, #592]	; (8003824 <VL53L0X_StaticInit+0x300>)
 80035d2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80035d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80035e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80035e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f6:	e001      	b.n	80035fc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80035f8:	4b8a      	ldr	r3, [pc, #552]	; (8003824 <VL53L0X_StaticInit+0x300>)
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80035fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003604:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f003 fdd0 	bl	80071ac <VL53L0X_load_tuning_settings>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003612:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800361a:	2300      	movs	r3, #0
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2304      	movs	r3, #4
 8003620:	2200      	movs	r2, #0
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f001 f8fb 	bl	8004820 <VL53L0X_SetGpioConfig>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003630:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003634:	2b00      	cmp	r3, #0
 8003636:	d121      	bne.n	800367c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003638:	2201      	movs	r2, #1
 800363a:	21ff      	movs	r1, #255	; 0xff
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd fb11 	bl	8000c64 <VL53L0X_WrByte>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003648:	f107 031a 	add.w	r3, r7, #26
 800364c:	461a      	mov	r2, r3
 800364e:	2184      	movs	r1, #132	; 0x84
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fd fbb3 	bl	8000dbc <VL53L0X_RdWord>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800365e:	4313      	orrs	r3, r2
 8003660:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003664:	2200      	movs	r2, #0
 8003666:	21ff      	movs	r1, #255	; 0xff
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd fafb 	bl	8000c64 <VL53L0X_WrByte>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003676:	4313      	orrs	r3, r2
 8003678:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800367c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003690:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8c2 	bl	8003828 <VL53L0X_GetDeviceParameters>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80036aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d110      	bne.n	80036d4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80036b2:	f107 0319 	add.w	r3, r7, #25
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f99f 	bl	80039fc <VL53L0X_GetFractionEnable>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80036c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80036cc:	7e7a      	ldrb	r2, [r7, #25]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80036d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10e      	bne.n	80036fa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f103 0410 	add.w	r4, r3, #16
 80036e2:	f107 051c 	add.w	r5, r7, #28
 80036e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80036f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80036fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d111      	bne.n	8003726 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003702:	f107 0319 	add.w	r3, r7, #25
 8003706:	461a      	mov	r2, r3
 8003708:	2101      	movs	r1, #1
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fb2c 	bl	8000d68 <VL53L0X_RdByte>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003716:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800371e:	7e7a      	ldrb	r2, [r7, #25]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9d6 	bl	8003ae4 <VL53L0X_SetSequenceStepEnable>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800373e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003746:	2200      	movs	r2, #0
 8003748:	2102      	movs	r1, #2
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9ca 	bl	8003ae4 <VL53L0X_SetSequenceStepEnable>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003756:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2203      	movs	r2, #3
 8003762:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003766:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800376e:	f107 0313 	add.w	r3, r7, #19
 8003772:	461a      	mov	r2, r3
 8003774:	2100      	movs	r1, #0
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f99d 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003782:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800378a:	7cfa      	ldrb	r2, [r7, #19]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003792:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800379a:	f107 0313 	add.w	r3, r7, #19
 800379e:	461a      	mov	r2, r3
 80037a0:	2101      	movs	r1, #1
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f987 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80037b6:	7cfa      	ldrb	r2, [r7, #19]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80037be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	461a      	mov	r2, r3
 80037cc:	2103      	movs	r1, #3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f002 fec8 	bl	8006564 <get_sequence_step_timeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80037ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	461a      	mov	r2, r3
 80037f8:	2104      	movs	r1, #4
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f002 feb2 	bl	8006564 <get_sequence_step_timeout>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003806:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003816:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800381a:	4618      	mov	r0, r3
 800381c:	3770      	adds	r7, #112	; 0x70
 800381e:	46bd      	mov	sp, r7
 8003820:	bdb0      	pop	{r4, r5, r7, pc}
 8003822:	bf00      	nop
 8003824:	200001a0 	.word	0x200001a0

08003828 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8cc 	bl	80039d8 <VL53L0X_GetDeviceMode>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3308      	adds	r3, #8
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa92 	bl	8003d7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800385c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	3310      	adds	r3, #16
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fac7 	bl	8003e0c <VL53L0X_GetXTalkCompensationRateMegaCps>
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fccf 	bl	8003234 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800389a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d134      	bne.n	800390c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	e02a      	b.n	80038fe <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d12a      	bne.n	8003906 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	b299      	uxth	r1, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	3308      	adds	r3, #8
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	461a      	mov	r2, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fbe6 	bl	8004094 <VL53L0X_GetLimitCheckValue>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80038d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d117      	bne.n	800390a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	b299      	uxth	r1, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3318      	adds	r3, #24
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	461a      	mov	r2, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fb4f 	bl	8003f8c <VL53L0X_GetLimitCheckEnable>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b05      	cmp	r3, #5
 8003902:	ddd1      	ble.n	80038a8 <VL53L0X_GetDeviceParameters+0x80>
 8003904:	e002      	b.n	800390c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800390a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800390c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	333c      	adds	r3, #60	; 0x3c
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fc48 	bl	80041b0 <VL53L0X_GetWrapAroundCheckEnable>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f894 	bl	8003a60 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800393c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b15      	cmp	r3, #21
 800395c:	d832      	bhi.n	80039c4 <VL53L0X_SetDeviceMode+0x7c>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <VL53L0X_SetDeviceMode+0x1c>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	080039bd 	.word	0x080039bd
 8003968:	080039bd 	.word	0x080039bd
 800396c:	080039c5 	.word	0x080039c5
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039c5 	.word	0x080039c5
 8003978:	080039c5 	.word	0x080039c5
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039c5 	.word	0x080039c5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039c5 	.word	0x080039c5
 800398c:	080039c5 	.word	0x080039c5
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039c5 	.word	0x080039c5
 80039a8:	080039c5 	.word	0x080039c5
 80039ac:	080039c5 	.word	0x080039c5
 80039b0:	080039c5 	.word	0x080039c5
 80039b4:	080039bd 	.word	0x080039bd
 80039b8:	080039bd 	.word	0x080039bd
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	741a      	strb	r2, [r3, #16]
		break;
 80039c2:	e001      	b.n	80039c8 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80039c4:	23f8      	movs	r3, #248	; 0xf8
 80039c6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7c1a      	ldrb	r2, [r3, #16]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80039ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	2109      	movs	r1, #9
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd f9aa 	bl	8000d68 <VL53L0X_RdByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f003 fa1d 	bl	8006e8a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f003 faea 	bl	800704a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
 8003a92:	4613      	mov	r3, r2
 8003a94:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003a9a:	78ba      	ldrb	r2, [r7, #2]
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f002 ff32 	bl	800690a <VL53L0X_set_vcsel_pulse_period>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4619      	mov	r1, r3
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f003 f9a4 	bl	8006e1c <VL53L0X_get_vcsel_pulse_period>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
 8003af0:	4613      	mov	r3, r2
 8003af2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003b00:	f107 030f 	add.w	r3, r7, #15
 8003b04:	461a      	mov	r2, r3
 8003b06:	2101      	movs	r1, #1
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fd f92d 	bl	8000d68 <VL53L0X_RdByte>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d15a      	bne.n	8003bd4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8003b1e:	78bb      	ldrb	r3, [r7, #2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d12b      	bne.n	8003b7c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d825      	bhi.n	8003b76 <VL53L0X_SetSequenceStepEnable+0x92>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b45 	.word	0x08003b45
 8003b34:	08003b4f 	.word	0x08003b4f
 8003b38:	08003b59 	.word	0x08003b59
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b6d 	.word	0x08003b6d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003b44:	7dbb      	ldrb	r3, [r7, #22]
 8003b46:	f043 0310 	orr.w	r3, r3, #16
 8003b4a:	75bb      	strb	r3, [r7, #22]
				break;
 8003b4c:	e043      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003b4e:	7dbb      	ldrb	r3, [r7, #22]
 8003b50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003b54:	75bb      	strb	r3, [r7, #22]
				break;
 8003b56:	e03e      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003b58:	7dbb      	ldrb	r3, [r7, #22]
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	75bb      	strb	r3, [r7, #22]
				break;
 8003b60:	e039      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003b62:	7dbb      	ldrb	r3, [r7, #22]
 8003b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b68:	75bb      	strb	r3, [r7, #22]
				break;
 8003b6a:	e034      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003b6c:	7dbb      	ldrb	r3, [r7, #22]
 8003b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b72:	75bb      	strb	r3, [r7, #22]
				break;
 8003b74:	e02f      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b76:	23fc      	movs	r3, #252	; 0xfc
 8003b78:	75fb      	strb	r3, [r7, #23]
 8003b7a:	e02c      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d825      	bhi.n	8003bce <VL53L0X_SetSequenceStepEnable+0xea>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b9d 	.word	0x08003b9d
 8003b8c:	08003ba7 	.word	0x08003ba7
 8003b90:	08003bb1 	.word	0x08003bb1
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bc5 	.word	0x08003bc5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003b9c:	7dbb      	ldrb	r3, [r7, #22]
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	75bb      	strb	r3, [r7, #22]
				break;
 8003ba4:	e017      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003ba6:	7dbb      	ldrb	r3, [r7, #22]
 8003ba8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003bac:	75bb      	strb	r3, [r7, #22]
				break;
 8003bae:	e012      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003bb0:	7dbb      	ldrb	r3, [r7, #22]
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	75bb      	strb	r3, [r7, #22]
				break;
 8003bb8:	e00d      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003bba:	7dbb      	ldrb	r3, [r7, #22]
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	75bb      	strb	r3, [r7, #22]
				break;
 8003bc2:	e008      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003bc4:	7dbb      	ldrb	r3, [r7, #22]
 8003bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bca:	75bb      	strb	r3, [r7, #22]
				break;
 8003bcc:	e003      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003bce:	23fc      	movs	r3, #252	; 0xfc
 8003bd0:	75fb      	strb	r3, [r7, #23]
 8003bd2:	e000      	b.n	8003bd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003bd4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	7dba      	ldrb	r2, [r7, #22]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d01e      	beq.n	8003c1c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8003be6:	7dbb      	ldrb	r3, [r7, #22]
 8003be8:	461a      	mov	r2, r3
 8003bea:	2101      	movs	r1, #1
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fd f839 	bl	8000c64 <VL53L0X_WrByte>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8003bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7dba      	ldrb	r2, [r7, #22]
 8003c02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003c14:	6939      	ldr	r1, [r7, #16]
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ff0f 	bl	8003a3a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	72fb      	strb	r3, [r7, #11]
 8003c36:	4613      	mov	r3, r2
 8003c38:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d836      	bhi.n	8003cb8 <sequence_step_enabled+0x90>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <sequence_step_enabled+0x28>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c77 	.word	0x08003c77
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003c9b 	.word	0x08003c9b
 8003c60:	08003cad 	.word	0x08003cad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003c64:	7abb      	ldrb	r3, [r7, #10]
 8003c66:	111b      	asrs	r3, r3, #4
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	701a      	strb	r2, [r3, #0]
		break;
 8003c74:	e022      	b.n	8003cbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003c76:	7abb      	ldrb	r3, [r7, #10]
 8003c78:	10db      	asrs	r3, r3, #3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	701a      	strb	r2, [r3, #0]
		break;
 8003c86:	e019      	b.n	8003cbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003c88:	7abb      	ldrb	r3, [r7, #10]
 8003c8a:	109b      	asrs	r3, r3, #2
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	701a      	strb	r2, [r3, #0]
		break;
 8003c98:	e010      	b.n	8003cbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003c9a:	7abb      	ldrb	r3, [r7, #10]
 8003c9c:	119b      	asrs	r3, r3, #6
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	701a      	strb	r2, [r3, #0]
		break;
 8003caa:	e007      	b.n	8003cbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003cac:	7abb      	ldrb	r3, [r7, #10]
 8003cae:	09db      	lsrs	r3, r3, #7
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	701a      	strb	r2, [r3, #0]
		break;
 8003cb6:	e001      	b.n	8003cbc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003cb8:	23fc      	movs	r3, #252	; 0xfc
 8003cba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop

08003ccc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003cde:	f107 030e 	add.w	r3, r7, #14
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd f83e 	bl	8000d68 <VL53L0X_RdByte>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003cf8:	7bba      	ldrb	r2, [r7, #14]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ff92 	bl	8003c28 <sequence_step_enabled>
 8003d04:	4603      	mov	r3, r0
 8003d06:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003d10:	7bba      	ldrb	r2, [r7, #14]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3302      	adds	r3, #2
 8003d16:	2101      	movs	r1, #1
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff85 	bl	8003c28 <sequence_step_enabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8003d2a:	7bba      	ldrb	r2, [r7, #14]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	2102      	movs	r1, #2
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff78 	bl	8003c28 <sequence_step_enabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003d44:	7bba      	ldrb	r2, [r7, #14]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	2103      	movs	r1, #3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff6b 	bl	8003c28 <sequence_step_enabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003d5e:	7bba      	ldrb	r2, [r7, #14]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	3304      	adds	r3, #4
 8003d64:	2104      	movs	r1, #4
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff5e 	bl	8003c28 <sequence_step_enabled>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8003d8a:	f107 030c 	add.w	r3, r7, #12
 8003d8e:	461a      	mov	r2, r3
 8003d90:	21f8      	movs	r1, #248	; 0xf8
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd f812 	bl	8000dbc <VL53L0X_RdWord>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d108      	bne.n	8003db6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	461a      	mov	r2, r3
 8003daa:	2104      	movs	r1, #4
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd f83d 	bl	8000e2c <VL53L0X_RdDWord>
 8003db2:	4603      	mov	r3, r0
 8003db4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8003dbe:	89bb      	ldrh	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	89ba      	ldrh	r2, [r7, #12]
 8003dc8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7f1b      	ldrb	r3, [r3, #28]
 8003df6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7bba      	ldrb	r2, [r7, #14]
 8003dfc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003e1a:	f107 030e 	add.w	r3, r7, #14
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2120      	movs	r1, #32
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fc ffca 	bl	8000dbc <VL53L0X_RdWord>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8003e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d118      	bne.n	8003e66 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8003e34:	89fb      	ldrh	r3, [r7, #14]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
 8003e4c:	e00b      	b.n	8003e66 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
 8003e80:	4613      	mov	r3, r2
 8003e82:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	d902      	bls.n	8003ea0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003e9a:	23fc      	movs	r3, #252	; 0xfc
 8003e9c:	75fb      	strb	r3, [r7, #23]
 8003e9e:	e05b      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8003ea0:	787b      	ldrb	r3, [r7, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73bb      	strb	r3, [r7, #14]
 8003eb2:	e00a      	b.n	8003eca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d841      	bhi.n	8003f54 <VL53L0X_SetLimitCheckEnable+0xe0>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003ef1 	.word	0x08003ef1
 8003edc:	08003efb 	.word	0x08003efb
 8003ee0:	08003f11 	.word	0x08003f11
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f25 	.word	0x08003f25
 8003eec:	08003f3d 	.word	0x08003f3d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003ef8:	e02e      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	2144      	movs	r1, #68	; 0x44
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fc fed1 	bl	8000cac <VL53L0X_WrWord>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	75fb      	strb	r3, [r7, #23]

			break;
 8003f0e:	e023      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003f18:	e01e      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003f22:	e019      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003f24:	7bbb      	ldrb	r3, [r7, #14]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003f2a:	7b7b      	ldrb	r3, [r7, #13]
 8003f2c:	22fe      	movs	r2, #254	; 0xfe
 8003f2e:	2160      	movs	r1, #96	; 0x60
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fc fee5 	bl	8000d00 <VL53L0X_UpdateByte>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8003f3a:	e00d      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003f3c:	7bbb      	ldrb	r3, [r7, #14]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003f42:	7b7b      	ldrb	r3, [r7, #13]
 8003f44:	22ef      	movs	r2, #239	; 0xef
 8003f46:	2160      	movs	r1, #96	; 0x60
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fc fed9 	bl	8000d00 <VL53L0X_UpdateByte>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003f52:	e001      	b.n	8003f58 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003f54:	23fc      	movs	r3, #252	; 0xfc
 8003f56:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003f60:	787b      	ldrb	r3, [r7, #1]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003f72:	e005      	b.n	8003f80 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	460b      	mov	r3, r1
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d905      	bls.n	8003fb0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003fa4:	23fc      	movs	r3, #252	; 0xfc
 8003fa6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e008      	b.n	8003fc2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003fb0:	897b      	ldrh	r3, [r7, #10]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7dba      	ldrb	r2, [r7, #22]
 8003fc0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fec:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003fee:	7dbb      	ldrb	r3, [r7, #22]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	e040      	b.n	8004086 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	2b05      	cmp	r3, #5
 8004008:	d830      	bhi.n	800406c <VL53L0X_SetLimitCheckValue+0x9c>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <VL53L0X_SetLimitCheckValue+0x40>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004029 	.word	0x08004029
 8004014:	08004031 	.word	0x08004031
 8004018:	08004047 	.word	0x08004047
 800401c:	0800404f 	.word	0x0800404f
 8004020:	08004057 	.word	0x08004057
 8004024:	08004057 	.word	0x08004057

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800402e:	e01f      	b.n	8004070 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	2144      	movs	r1, #68	; 0x44
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7fc fe36 	bl	8000cac <VL53L0X_WrWord>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004044:	e014      	b.n	8004070 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800404c:	e010      	b.n	8004070 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004054:	e00c      	b.n	8004070 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800405a:	b29b      	uxth	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7fc fe23 	bl	8000cac <VL53L0X_WrWord>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800406a:	e001      	b.n	8004070 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800406c:	23fc      	movs	r3, #252	; 0xfc
 800406e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004078:	897b      	ldrh	r3, [r7, #10]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	330c      	adds	r3, #12
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop

08004094 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	460b      	mov	r3, r1
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d847      	bhi.n	8004140 <VL53L0X_GetLimitCheckValue+0xac>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <VL53L0X_GetLimitCheckValue+0x24>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040d1 	.word	0x080040d1
 80040bc:	080040dd 	.word	0x080040dd
 80040c0:	08004103 	.word	0x08004103
 80040c4:	0800410f 	.word	0x0800410f
 80040c8:	0800411b 	.word	0x0800411b
 80040cc:	0800411b 	.word	0x0800411b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	77bb      	strb	r3, [r7, #30]
		break;
 80040da:	e033      	b.n	8004144 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80040dc:	f107 0316 	add.w	r3, r7, #22
 80040e0:	461a      	mov	r2, r3
 80040e2:	2144      	movs	r1, #68	; 0x44
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7fc fe69 	bl	8000dbc <VL53L0X_RdWord>
 80040ea:	4603      	mov	r3, r0
 80040ec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80040ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80040f6:	8afb      	ldrh	r3, [r7, #22]
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80040fc:	2301      	movs	r3, #1
 80040fe:	77bb      	strb	r3, [r7, #30]
		break;
 8004100:	e020      	b.n	8004144 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	77bb      	strb	r3, [r7, #30]
		break;
 800410c:	e01a      	b.n	8004144 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	77bb      	strb	r3, [r7, #30]
		break;
 8004118:	e014      	b.n	8004144 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800411a:	f107 0316 	add.w	r3, r7, #22
 800411e:	461a      	mov	r2, r3
 8004120:	2164      	movs	r1, #100	; 0x64
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7fc fe4a 	bl	8000dbc <VL53L0X_RdWord>
 8004128:	4603      	mov	r3, r0
 800412a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800412c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004134:	8afb      	ldrh	r3, [r7, #22]
 8004136:	025b      	lsls	r3, r3, #9
 8004138:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	77bb      	strb	r3, [r7, #30]
		break;
 800413e:	e001      	b.n	8004144 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004140:	23fc      	movs	r3, #252	; 0xfc
 8004142:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004144:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d12a      	bne.n	80041a2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800414c:	7fbb      	ldrb	r3, [r7, #30]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d124      	bne.n	800419c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d110      	bne.n	800417a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004158:	897b      	ldrh	r3, [r7, #10]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	330c      	adds	r3, #12
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800416c:	897b      	ldrh	r3, [r7, #10]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004178:	e013      	b.n	80041a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	330c      	adds	r3, #12
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800419a:	e002      	b.n	80041a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041a2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop

080041b0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80041be:	f107 030e 	add.w	r3, r7, #14
 80041c2:	461a      	mov	r2, r3
 80041c4:	2101      	movs	r1, #1
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fdce 	bl	8000d68 <VL53L0X_RdByte>
 80041cc:	4603      	mov	r3, r0
 80041ce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80041d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10e      	bne.n	80041f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80041d8:	7bba      	ldrb	r2, [r7, #14]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80041e0:	7bbb      	ldrb	r3, [r7, #14]
 80041e2:	b25b      	sxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	da03      	bge.n	80041f0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004220:	f107 030e 	add.w	r3, r7, #14
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fbd6 	bl	80039d8 <VL53L0X_GetDeviceMode>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f898 	bl	8004374 <VL53L0X_StartMeasurement>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f001 fb3e 	bl	80058d2 <VL53L0X_measurement_poll_for_completion>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800425a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004262:	7bbb      	ldrb	r3, [r7, #14]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2203      	movs	r2, #3
 800426c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004288:	2300      	movs	r3, #0
 800428a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800428c:	2301      	movs	r3, #1
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f001 fae0 	bl	8005858 <VL53L0X_perform_ref_calibration>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800429c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80042be:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80042c0:	7dbb      	ldrb	r3, [r7, #22]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d005      	beq.n	80042d2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80042c6:	7dbb      	ldrb	r3, [r7, #22]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d002      	beq.n	80042d2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80042cc:	7dbb      	ldrb	r3, [r7, #22]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d147      	bne.n	8004362 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	f107 0210 	add.w	r2, r7, #16
 80042da:	2101      	movs	r1, #1
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fbc3 	bl	8004a68 <VL53L0X_GetInterruptThresholds>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80042ec:	d803      	bhi.n	80042f6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80042ee:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80042f0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80042f4:	d935      	bls.n	8004362 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80042f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d131      	bne.n	8004362 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004304:	491a      	ldr	r1, [pc, #104]	; (8004370 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f002 ff50 	bl	80071ac <VL53L0X_load_tuning_settings>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]
 8004310:	e027      	b.n	8004362 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004312:	2204      	movs	r2, #4
 8004314:	21ff      	movs	r1, #255	; 0xff
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fca4 	bl	8000c64 <VL53L0X_WrByte>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	4313      	orrs	r3, r2
 8004324:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004326:	2200      	movs	r2, #0
 8004328:	2170      	movs	r1, #112	; 0x70
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fc9a 	bl	8000c64 <VL53L0X_WrByte>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	4313      	orrs	r3, r2
 8004338:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800433a:	2200      	movs	r2, #0
 800433c:	21ff      	movs	r1, #255	; 0xff
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fc90 	bl	8000c64 <VL53L0X_WrByte>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	4313      	orrs	r3, r2
 800434c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fc86 	bl	8000c64 <VL53L0X_WrByte>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	4313      	orrs	r3, r2
 8004360:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004362:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000294 	.word	0x20000294

08004374 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800437c:	2300      	movs	r3, #0
 800437e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004384:	f107 030e 	add.w	r3, r7, #14
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fb24 	bl	80039d8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004390:	2201      	movs	r2, #1
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc fc65 	bl	8000c64 <VL53L0X_WrByte>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800439e:	2201      	movs	r2, #1
 80043a0:	21ff      	movs	r1, #255	; 0xff
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fc5e 	bl	8000c64 <VL53L0X_WrByte>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80043ac:	2200      	movs	r2, #0
 80043ae:	2100      	movs	r1, #0
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fc fc57 	bl	8000c64 <VL53L0X_WrByte>
 80043b6:	4603      	mov	r3, r0
 80043b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80043c0:	461a      	mov	r2, r3
 80043c2:	2191      	movs	r1, #145	; 0x91
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc fc4d 	bl	8000c64 <VL53L0X_WrByte>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80043ce:	2201      	movs	r2, #1
 80043d0:	2100      	movs	r1, #0
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fc46 	bl	8000c64 <VL53L0X_WrByte>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80043dc:	2200      	movs	r2, #0
 80043de:	21ff      	movs	r1, #255	; 0xff
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc fc3f 	bl	8000c64 <VL53L0X_WrByte>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fc38 	bl	8000c64 <VL53L0X_WrByte>
 80043f4:	4603      	mov	r3, r0
 80043f6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80043f8:	7bbb      	ldrb	r3, [r7, #14]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d037      	beq.n	800446e <VL53L0X_StartMeasurement+0xfa>
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d04f      	beq.n	80044a2 <VL53L0X_StartMeasurement+0x12e>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d167      	bne.n	80044d6 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004406:	2201      	movs	r2, #1
 8004408:	2100      	movs	r1, #0
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fc2a 	bl	8000c64 <VL53L0X_WrByte>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d15d      	bne.n	80044dc <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 800442a:	f107 030d 	add.w	r3, r7, #13
 800442e:	461a      	mov	r2, r3
 8004430:	2100      	movs	r1, #0
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fc98 	bl	8000d68 <VL53L0X_RdByte>
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	3301      	adds	r3, #1
 8004440:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004442:	7b7a      	ldrb	r2, [r7, #13]
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	4013      	ands	r3, r2
 8004448:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800444a:	7bfa      	ldrb	r2, [r7, #15]
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8004450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800445e:	d3e1      	bcc.n	8004424 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004466:	d339      	bcc.n	80044dc <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004468:	23f9      	movs	r3, #249	; 0xf9
 800446a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800446c:	e036      	b.n	80044dc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800446e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004476:	2101      	movs	r1, #1
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff15 	bl	80042a8 <VL53L0X_CheckAndLoadInterruptSettings>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004482:	2202      	movs	r2, #2
 8004484:	2100      	movs	r1, #0
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fbec 	bl	8000c64 <VL53L0X_WrByte>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d123      	bne.n	80044e0 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2204      	movs	r2, #4
 800449c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80044a0:	e01e      	b.n	80044e0 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80044a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fefb 	bl	80042a8 <VL53L0X_CheckAndLoadInterruptSettings>
 80044b2:	4603      	mov	r3, r0
 80044b4:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80044b6:	2204      	movs	r2, #4
 80044b8:	2100      	movs	r1, #0
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fbd2 	bl	8000c64 <VL53L0X_WrByte>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80044c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2204      	movs	r2, #4
 80044d0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80044d4:	e006      	b.n	80044e4 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80044d6:	23f8      	movs	r3, #248	; 0xf8
 80044d8:	75fb      	strb	r3, [r7, #23]
 80044da:	e004      	b.n	80044e6 <VL53L0X_StartMeasurement+0x172>
		break;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <VL53L0X_StartMeasurement+0x172>
		break;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <VL53L0X_StartMeasurement+0x172>
		break;
 80044e4:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80044e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004506:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004508:	7bbb      	ldrb	r3, [r7, #14]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d112      	bne.n	8004534 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb1d 	bl	8004b54 <VL53L0X_GetInterruptMaskStatus>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d103      	bne.n	800452c <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e01c      	b.n	8004566 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e018      	b.n	8004566 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004534:	f107 030d 	add.w	r3, r7, #13
 8004538:	461a      	mov	r2, r3
 800453a:	2114      	movs	r1, #20
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fc fc13 	bl	8000d68 <VL53L0X_RdByte>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800454e:	7b7b      	ldrb	r3, [r7, #13]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e002      	b.n	8004566 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004566:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	b096      	sub	sp, #88	; 0x58
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004584:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004588:	230c      	movs	r3, #12
 800458a:	2114      	movs	r1, #20
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fc fb3d 	bl	8000c0c <VL53L0X_ReadMulti>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004598:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 80d2 	bne.w	8004746 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2200      	movs	r2, #0
 80045a6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80045ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4413      	add	r3, r2
 80045c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80045ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4413      	add	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	025b      	lsls	r3, r3, #9
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80045e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80045fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004602:	025b      	lsls	r3, r3, #9
 8004604:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800460a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	b29a      	uxth	r2, r3
 8004614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004618:	b29b      	uxth	r3, r3
 800461a:	4413      	add	r3, r2
 800461c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004626:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004628:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800462c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004636:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800463e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004642:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004648:	d047      	beq.n	80046da <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800464a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800464c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004658:	4a58      	ldr	r2, [pc, #352]	; (80047bc <VL53L0X_GetRangingMeasurementData+0x248>)
 800465a:	fb82 1203 	smull	r1, r2, r2, r3
 800465e:	1192      	asrs	r2, r2, #6
 8004660:	17db      	asrs	r3, r3, #31
 8004662:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004664:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7f1b      	ldrb	r3, [r3, #28]
 8004672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02d      	beq.n	80046da <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800467e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004680:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	121b      	asrs	r3, r3, #8
 800468a:	461a      	mov	r2, r3
				if ((SignalRate
 800468c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468e:	4293      	cmp	r3, r2
 8004690:	d10d      	bne.n	80046ae <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004692:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800469a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800469e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046a2:	e016      	b.n	80046d2 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 80046a4:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80046a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046ac:	e011      	b.n	80046d2 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80046ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046b4:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80046b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046ba:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80046be:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80046c2:	121b      	asrs	r3, r3, #8
 80046c4:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80046c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c8:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80046ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80046d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80046da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80046e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80046ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	75da      	strb	r2, [r3, #23]
 80046fc:	e006      	b.n	800470c <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004704:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800470c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004710:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004714:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4613      	mov	r3, r2
 8004720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f003 f9ea 	bl	8007afc <VL53L0X_get_pal_range_status>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004730:	4313      	orrs	r3, r2
 8004732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004736:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800473e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004746:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800474a:	2b00      	cmp	r3, #0
 800474c:	d12f      	bne.n	80047ae <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f107 040c 	add.w	r4, r7, #12
 8004754:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800475a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800475c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004760:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004768:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004776:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800477c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004782:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004788:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800478e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004794:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800479e:	f107 050c 	add.w	r5, r7, #12
 80047a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3750      	adds	r7, #80	; 0x50
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	10624dd3 	.word	0x10624dd3

080047c0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80047ce:	2100      	movs	r1, #0
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff f8b9 	bl	8003948 <VL53L0X_SetDeviceMode>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80047da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fd16 	bl	8004214 <VL53L0X_PerformSingleMeasurement>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80047ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80047f4:	6839      	ldr	r1, [r7, #0]
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff febc 	bl	8004574 <VL53L0X_GetRangingMeasurementData>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004808:	2100      	movs	r1, #0
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f962 	bl	8004ad4 <VL53L0X_ClearInterruptMask>
 8004810:	4603      	mov	r3, r0
 8004812:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	70fb      	strb	r3, [r7, #3]
 8004832:	460b      	mov	r3, r1
 8004834:	70bb      	strb	r3, [r7, #2]
 8004836:	4613      	mov	r3, r2
 8004838:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004844:	23f6      	movs	r3, #246	; 0xf6
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e107      	b.n	8004a5a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800484a:	78bb      	ldrb	r3, [r7, #2]
 800484c:	2b14      	cmp	r3, #20
 800484e:	d110      	bne.n	8004872 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004850:	7e3b      	ldrb	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004856:	2310      	movs	r3, #16
 8004858:	73bb      	strb	r3, [r7, #14]
 800485a:	e001      	b.n	8004860 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800485c:	2301      	movs	r3, #1
 800485e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	461a      	mov	r2, r3
 8004864:	2184      	movs	r1, #132	; 0x84
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc f9fc 	bl	8000c64 <VL53L0X_WrByte>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e0f3      	b.n	8004a5a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004872:	78bb      	ldrb	r3, [r7, #2]
 8004874:	2b15      	cmp	r3, #21
 8004876:	f040 8097 	bne.w	80049a8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800487a:	2201      	movs	r2, #1
 800487c:	21ff      	movs	r1, #255	; 0xff
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc f9f0 	bl	8000c64 <VL53L0X_WrByte>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	4313      	orrs	r3, r2
 800488c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc f9e6 	bl	8000c64 <VL53L0X_WrByte>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4313      	orrs	r3, r2
 80048a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80048a2:	2200      	movs	r2, #0
 80048a4:	21ff      	movs	r1, #255	; 0xff
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc f9dc 	bl	8000c64 <VL53L0X_WrByte>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80048b6:	2201      	movs	r2, #1
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc f9d2 	bl	8000c64 <VL53L0X_WrByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80048ca:	2202      	movs	r2, #2
 80048cc:	2185      	movs	r1, #133	; 0x85
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc f9c8 	bl	8000c64 <VL53L0X_WrByte>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	4313      	orrs	r3, r2
 80048dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80048de:	2204      	movs	r2, #4
 80048e0:	21ff      	movs	r1, #255	; 0xff
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc f9be 	bl	8000c64 <VL53L0X_WrByte>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80048f2:	2200      	movs	r2, #0
 80048f4:	21cd      	movs	r1, #205	; 0xcd
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc f9b4 	bl	8000c64 <VL53L0X_WrByte>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	4313      	orrs	r3, r2
 8004904:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004906:	2211      	movs	r2, #17
 8004908:	21cc      	movs	r1, #204	; 0xcc
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc f9aa 	bl	8000c64 <VL53L0X_WrByte>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	4313      	orrs	r3, r2
 8004918:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800491a:	2207      	movs	r2, #7
 800491c:	21ff      	movs	r1, #255	; 0xff
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc f9a0 	bl	8000c64 <VL53L0X_WrByte>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	4313      	orrs	r3, r2
 800492c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800492e:	2200      	movs	r2, #0
 8004930:	21be      	movs	r1, #190	; 0xbe
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc f996 	bl	8000c64 <VL53L0X_WrByte>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	4313      	orrs	r3, r2
 8004940:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004942:	2206      	movs	r2, #6
 8004944:	21ff      	movs	r1, #255	; 0xff
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc f98c 	bl	8000c64 <VL53L0X_WrByte>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	4313      	orrs	r3, r2
 8004954:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004956:	2209      	movs	r2, #9
 8004958:	21cc      	movs	r1, #204	; 0xcc
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc f982 	bl	8000c64 <VL53L0X_WrByte>
 8004960:	4603      	mov	r3, r0
 8004962:	461a      	mov	r2, r3
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	4313      	orrs	r3, r2
 8004968:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800496a:	2200      	movs	r2, #0
 800496c:	21ff      	movs	r1, #255	; 0xff
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc f978 	bl	8000c64 <VL53L0X_WrByte>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	4313      	orrs	r3, r2
 800497c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800497e:	2201      	movs	r2, #1
 8004980:	21ff      	movs	r1, #255	; 0xff
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc f96e 	bl	8000c64 <VL53L0X_WrByte>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	4313      	orrs	r3, r2
 8004990:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc f964 	bl	8000c64 <VL53L0X_WrByte>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	e058      	b.n	8004a5a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80049a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d121      	bne.n	80049f4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d81b      	bhi.n	80049ee <VL53L0X_SetGpioConfig+0x1ce>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <VL53L0X_SetGpioConfig+0x19c>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049d1 	.word	0x080049d1
 80049c0:	080049d7 	.word	0x080049d7
 80049c4:	080049dd 	.word	0x080049dd
 80049c8:	080049e3 	.word	0x080049e3
 80049cc:	080049e9 	.word	0x080049e9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73bb      	strb	r3, [r7, #14]
				break;
 80049d4:	e00f      	b.n	80049f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73bb      	strb	r3, [r7, #14]
				break;
 80049da:	e00c      	b.n	80049f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80049dc:	2302      	movs	r3, #2
 80049de:	73bb      	strb	r3, [r7, #14]
				break;
 80049e0:	e009      	b.n	80049f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73bb      	strb	r3, [r7, #14]
				break;
 80049e6:	e006      	b.n	80049f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80049e8:	2304      	movs	r3, #4
 80049ea:	73bb      	strb	r3, [r7, #14]
				break;
 80049ec:	e003      	b.n	80049f6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80049ee:	23f5      	movs	r3, #245	; 0xf5
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	e000      	b.n	80049f6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80049f4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d107      	bne.n	8004a0e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80049fe:	7bbb      	ldrb	r3, [r7, #14]
 8004a00:	461a      	mov	r2, r3
 8004a02:	210a      	movs	r1, #10
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fc f92d 	bl	8000c64 <VL53L0X_WrByte>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004a16:	7e3b      	ldrb	r3, [r7, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73bb      	strb	r3, [r7, #14]
 8004a20:	e001      	b.n	8004a26 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004a22:	2310      	movs	r3, #16
 8004a24:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004a26:	7bbb      	ldrb	r3, [r7, #14]
 8004a28:	22ef      	movs	r2, #239	; 0xef
 8004a2a:	2184      	movs	r1, #132	; 0x84
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc f967 	bl	8000d00 <VL53L0X_UpdateByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	787a      	ldrb	r2, [r7, #1]
 8004a42:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f83f 	bl	8004ad4 <VL53L0X_ClearInterruptMask>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop

08004a68 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	460b      	mov	r3, r1
 8004a76:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	461a      	mov	r2, r3
 8004a82:	210e      	movs	r1, #14
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7fc f999 	bl	8000dbc <VL53L0X_RdWord>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004a8e:	8abb      	ldrh	r3, [r7, #20]
 8004a90:	045b      	lsls	r3, r3, #17
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <VL53L0X_GetInterruptThresholds+0x68>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	210c      	movs	r1, #12
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7fc f985 	bl	8000dbc <VL53L0X_RdWord>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004ab6:	8abb      	ldrh	r3, [r7, #20]
 8004ab8:	045b      	lsls	r3, r3, #17
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <VL53L0X_GetInterruptThresholds+0x68>)
 8004abe:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	1ffe0000 	.word	0x1ffe0000

08004ad4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	210b      	movs	r1, #11
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fc f8ba 	bl	8000c64 <VL53L0X_WrByte>
 8004af0:	4603      	mov	r3, r0
 8004af2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004af4:	2200      	movs	r2, #0
 8004af6:	210b      	movs	r1, #11
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fc f8b3 	bl	8000c64 <VL53L0X_WrByte>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004b08:	f107 030d 	add.w	r3, r7, #13
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2113      	movs	r1, #19
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fc f929 	bl	8000d68 <VL53L0X_RdByte>
 8004b16:	4603      	mov	r3, r0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	3301      	adds	r3, #1
 8004b24:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004b26:	7b7b      	ldrb	r3, [r7, #13]
 8004b28:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d006      	beq.n	8004b3e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d803      	bhi.n	8004b3e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0d3      	beq.n	8004ae6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004b3e:	7bbb      	ldrb	r3, [r7, #14]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004b44:	23f4      	movs	r3, #244	; 0xf4
 8004b46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004b62:	f107 030e 	add.w	r3, r7, #14
 8004b66:	461a      	mov	r2, r3
 8004b68:	2113      	movs	r1, #19
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f8fc 	bl	8000d68 <VL53L0X_RdByte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	f003 0207 	and.w	r2, r3, #7
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004b7e:	7bbb      	ldrb	r3, [r7, #14]
 8004b80:	f003 0318 	and.w	r3, r3, #24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004b88:	23fa      	movs	r3, #250	; 0xfa
 8004b8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fa02 	bl	8004fb6 <VL53L0X_perform_ref_spad_management>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004bd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004bd4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bda:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004bdc:	f107 0308 	add.w	r3, r7, #8
 8004be0:	461a      	mov	r2, r3
 8004be2:	2128      	movs	r1, #40	; 0x28
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fc f8e9 	bl	8000dbc <VL53L0X_RdWord>
 8004bea:	4603      	mov	r3, r0
 8004bec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11e      	bne.n	8004c34 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004bf6:	893b      	ldrh	r3, [r7, #8]
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dd0b      	ble.n	8004c24 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004c0c:	893a      	ldrh	r2, [r7, #8]
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	b21b      	sxth	r3, r3
 8004c16:	461a      	mov	r2, r3
					* 250;
 8004c18:	23fa      	movs	r3, #250	; 0xfa
 8004c1a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e007      	b.n	8004c34 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	b21b      	sxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	23fa      	movs	r3, #250	; 0xfa
 8004c2c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b08b      	sub	sp, #44	; 0x2c
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004c4e:	2308      	movs	r3, #8
 8004c50:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	fb01 f202 	mul.w	r2, r1, r2
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	e030      	b.n	8004ce2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	4413      	add	r3, r2
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d11e      	bne.n	8004cd4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004c96:	7ffa      	ldrb	r2, [r7, #31]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	fa42 f303 	asr.w	r3, r2, r3
 8004c9e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004ca4:	e016      	b.n	8004cd4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <get_next_good_spad+0x88>
				success = 1;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	fb02 f203 	mul.w	r2, r2, r3
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	601a      	str	r2, [r3, #0]
				break;
 8004cc6:	e009      	b.n	8004cdc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004cd4:	6a3a      	ldr	r2, [r7, #32]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d3e4      	bcc.n	8004ca6 <get_next_good_spad+0x66>
				coarseIndex++) {
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	3301      	adds	r3, #1
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d202      	bcs.n	8004cf0 <get_next_good_spad+0xb0>
 8004cea:	7fbb      	ldrb	r3, [r7, #30]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0c7      	beq.n	8004c80 <get_next_good_spad+0x40>
		}
	}
}
 8004cf0:	bf00      	nop
 8004cf2:	372c      	adds	r7, #44	; 0x2c
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
	...

08004cfc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <is_aperture+0x30>)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <is_aperture+0x22>
		isAperture = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	2000044c 	.word	0x2000044c

08004d30 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004d40:	2308      	movs	r3, #8
 8004d42:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	fb01 f202 	mul.w	r2, r1, r2
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004d68:	23ce      	movs	r3, #206	; 0xce
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e010      	b.n	8004d90 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b25a      	sxtb	r2, r3
 8004d78:	2101      	movs	r1, #1
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	4313      	orrs	r3, r2
 8004d84:	b259      	sxtb	r1, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	b2ca      	uxtb	r2, r1
 8004d8e:	701a      	strb	r2, [r3, #0]

	return status;
 8004d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3724      	adds	r7, #36	; 0x24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8004da8:	2306      	movs	r3, #6
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	21b0      	movs	r1, #176	; 0xb0
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fb fefc 	bl	8000bac <VL53L0X_WriteMulti>
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8004db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004dce:	2306      	movs	r3, #6
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	21b0      	movs	r1, #176	; 0xb0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fb ff19 	bl	8000c0c <VL53L0X_ReadMulti>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b08c      	sub	sp, #48	; 0x30
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	460b      	mov	r3, r1
 8004df8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8004e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e06:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0c:	e02b      	b.n	8004e66 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004e0e:	f107 031c 	add.w	r3, r7, #28
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff12 	bl	8004c40 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d103      	bne.n	8004e2c <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004e24:	23ce      	movs	r3, #206	; 0xce
 8004e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004e2a:	e020      	b.n	8004e6e <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e32:	4413      	add	r3, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff61 	bl	8004cfc <is_aperture>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004e44:	23ce      	movs	r3, #206	; 0xce
 8004e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004e4a:	e010      	b.n	8004e6e <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f7ff ff6b 	bl	8004d30 <enable_spad_bit>
		currentSpad++;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	3301      	adds	r3, #1
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d3cf      	bcc.n	8004e0e <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8004e74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff ff8d 	bl	8004d9e <set_ref_spad_map>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004e8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d121      	bne.n	8004ed6 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4619      	mov	r1, r3
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff ff93 	bl	8004dc4 <get_ref_spad_map>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8004ea8:	e011      	b.n	8004ece <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	4413      	add	r3, r2
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	f107 0114 	add.w	r1, r7, #20
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	440b      	add	r3, r1
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d003      	beq.n	8004ec8 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004ec0:	23ce      	movs	r3, #206	; 0xce
 8004ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004ec6:	e006      	b.n	8004ed6 <enable_ref_spads+0xec>
			}
			i++;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	3301      	adds	r3, #1
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3e9      	bcc.n	8004eaa <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004ed6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3730      	adds	r7, #48	; 0x30
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b08a      	sub	sp, #40	; 0x28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004f02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8004f0a:	22c0      	movs	r2, #192	; 0xc0
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb fea8 	bl	8000c64 <VL53L0X_WrByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8004f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fc49 	bl	80047c0 <VL53L0X_PerformSingleRangingMeasurement>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8004f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	21ff      	movs	r1, #255	; 0xff
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fb fe8f 	bl	8000c64 <VL53L0X_WrByte>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	21b6      	movs	r1, #182	; 0xb6
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fb ff2f 	bl	8000dbc <VL53L0X_RdWord>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8004f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	21ff      	movs	r1, #255	; 0xff
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fb fe77 	bl	8000c64 <VL53L0X_WrByte>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d112      	bne.n	8004faa <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fb fe69 	bl	8000c64 <VL53L0X_WrByte>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004fa6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3728      	adds	r7, #40	; 0x28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004fb6:	b590      	push	{r4, r7, lr}
 8004fb8:	b09d      	sub	sp, #116	; 0x74
 8004fba:	af06      	add	r7, sp, #24
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8004fc8:	23b4      	movs	r3, #180	; 0xb4
 8004fca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8004fd2:	232c      	movs	r3, #44	; 0x2c
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004fe2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8004ff0:	2306      	movs	r3, #6
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800501a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800501c:	2300      	movs	r3, #0
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005020:	e009      	b.n	8005036 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	4413      	add	r3, r2
 8005028:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005032:	3301      	adds	r3, #1
 8005034:	64bb      	str	r3, [r7, #72]	; 0x48
 8005036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	429a      	cmp	r2, r3
 800503c:	d3f1      	bcc.n	8005022 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800503e:	2201      	movs	r2, #1
 8005040:	21ff      	movs	r1, #255	; 0xff
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7fb fe0e 	bl	8000c64 <VL53L0X_WrByte>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800504e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005056:	2200      	movs	r2, #0
 8005058:	214f      	movs	r1, #79	; 0x4f
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7fb fe02 	bl	8000c64 <VL53L0X_WrByte>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005066:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800506a:	2b00      	cmp	r3, #0
 800506c:	d107      	bne.n	800507e <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800506e:	222c      	movs	r2, #44	; 0x2c
 8005070:	214e      	movs	r1, #78	; 0x4e
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7fb fdf6 	bl	8000c64 <VL53L0X_WrByte>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800507e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005082:	2b00      	cmp	r3, #0
 8005084:	d107      	bne.n	8005096 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005086:	2200      	movs	r2, #0
 8005088:	21ff      	movs	r1, #255	; 0xff
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7fb fdea 	bl	8000c64 <VL53L0X_WrByte>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005096:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800509e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80050a2:	461a      	mov	r2, r3
 80050a4:	21b6      	movs	r1, #182	; 0xb6
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7fb fddc 	bl	8000c64 <VL53L0X_WrByte>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80050b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d107      	bne.n	80050ca <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80050ba:	2200      	movs	r2, #0
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7fb fdd0 	bl	8000c64 <VL53L0X_WrByte>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80050ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80050d2:	f107 0210 	add.w	r2, r7, #16
 80050d6:	f107 0111 	add.w	r1, r7, #17
 80050da:	2300      	movs	r3, #0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fbbb 	bl	8005858 <VL53L0X_perform_ref_calibration>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80050e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d121      	bne.n	8005134 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80050f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f6:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800510c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005110:	f107 0218 	add.w	r2, r7, #24
 8005114:	9204      	str	r2, [sp, #16]
 8005116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005118:	9203      	str	r2, [sp, #12]
 800511a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800511c:	9202      	str	r2, [sp, #8]
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	4623      	mov	r3, r4
 8005126:	4602      	mov	r2, r0
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fe5e 	bl	8004dea <enable_ref_spads>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005134:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005138:	2b00      	cmp	r3, #0
 800513a:	d174      	bne.n	8005226 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005140:	f107 0312 	add.w	r3, r7, #18
 8005144:	4619      	mov	r1, r3
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fecb 	bl	8004ee2 <perform_ref_signal_measurement>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005152:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005156:	2b00      	cmp	r3, #0
 8005158:	d161      	bne.n	800521e <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800515a:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800515c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800515e:	429a      	cmp	r2, r3
 8005160:	d25d      	bcs.n	800521e <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005162:	2300      	movs	r3, #0
 8005164:	64bb      	str	r3, [r7, #72]	; 0x48
 8005166:	e009      	b.n	800517c <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516c:	4413      	add	r3, r2
 800516e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005178:	3301      	adds	r3, #1
 800517a:	64bb      	str	r3, [r7, #72]	; 0x48
 800517c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	429a      	cmp	r2, r3
 8005182:	d3f1      	bcc.n	8005168 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005184:	e002      	b.n	800518c <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005188:	3301      	adds	r3, #1
 800518a:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800518c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	4413      	add	r3, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff fdb1 	bl	8004cfc <is_aperture>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80051a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3ee      	bcc.n	8005186 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80051a8:	2301      	movs	r3, #1
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80051ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ae:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80051bc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80051c0:	f107 0218 	add.w	r2, r7, #24
 80051c4:	9204      	str	r2, [sp, #16]
 80051c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c8:	9203      	str	r2, [sp, #12]
 80051ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051cc:	9202      	str	r2, [sp, #8]
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4623      	mov	r3, r4
 80051d6:	4602      	mov	r2, r0
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff fe06 	bl	8004dea <enable_ref_spads>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80051e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11b      	bne.n	8005224 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80051f0:	f107 0312 	add.w	r3, r7, #18
 80051f4:	4619      	mov	r1, r3
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff fe73 	bl	8004ee2 <perform_ref_signal_measurement>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005202:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800520a:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800520c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800520e:	429a      	cmp	r2, r3
 8005210:	d208      	bcs.n	8005224 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800521c:	e002      	b.n	8005224 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005222:	e000      	b.n	8005226 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005224:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005226:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800522a:	2b00      	cmp	r3, #0
 800522c:	f040 80af 	bne.w	800538e <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005230:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005232:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005234:	429a      	cmp	r2, r3
 8005236:	f240 80aa 	bls.w	800538e <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800523a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800524a:	f107 031c 	add.w	r3, r7, #28
 800524e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005250:	4618      	mov	r0, r3
 8005252:	f002 fe59 	bl	8007f08 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005256:	8a7b      	ldrh	r3, [r7, #18]
 8005258:	461a      	mov	r2, r3
 800525a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	425b      	neglt	r3, r3
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800526c:	e086      	b.n	800537c <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800527a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527c:	f7ff fce0 	bl	8004c40 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d103      	bne.n	8005290 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005288:	23ce      	movs	r3, #206	; 0xce
 800528a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800528e:	e07e      	b.n	800538e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005290:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fd2f 	bl	8004cfc <is_aperture>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80052ae:	e06e      	b.n	800538e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	3301      	adds	r3, #1
 80052b4:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80052c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fd33 	bl	8004d30 <enable_spad_bit>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80052d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10c      	bne.n	80052f2 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80052d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052da:	3301      	adds	r3, #1
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80052e4:	4619      	mov	r1, r3
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff fd59 	bl	8004d9e <set_ref_spad_map>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80052f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d146      	bne.n	8005388 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80052fa:	f107 0312 	add.w	r3, r7, #18
 80052fe:	4619      	mov	r1, r3
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fdee 	bl	8004ee2 <perform_ref_signal_measurement>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800530c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005310:	2b00      	cmp	r3, #0
 8005312:	d13b      	bne.n	800538c <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005314:	8a7b      	ldrh	r3, [r7, #18]
 8005316:	461a      	mov	r2, r3
 8005318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	bfb8      	it	lt
 8005320:	425b      	neglt	r3, r3
 8005322:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005324:	8a7b      	ldrh	r3, [r7, #18]
 8005326:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005328:	429a      	cmp	r2, r3
 800532a:	d21c      	bcs.n	8005366 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005330:	429a      	cmp	r2, r3
 8005332:	d914      	bls.n	800535e <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005334:	f107 031c 	add.w	r3, r7, #28
 8005338:	4619      	mov	r1, r3
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fd2f 	bl	8004d9e <set_ref_spad_map>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800534c:	f107 011c 	add.w	r1, r7, #28
 8005350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005352:	4618      	mov	r0, r3
 8005354:	f002 fdd8 	bl	8007f08 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535a:	3b01      	subs	r3, #1
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005364:	e00a      	b.n	800537c <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005370:	f107 031c 	add.w	r3, r7, #28
 8005374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005376:	4618      	mov	r0, r3
 8005378:	f002 fdc6 	bl	8007f08 <memcpy>
		while (!complete) {
 800537c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005380:	2b00      	cmp	r3, #0
 8005382:	f43f af74 	beq.w	800526e <VL53L0X_perform_ref_spad_management+0x2b8>
 8005386:	e002      	b.n	800538e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800538c:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800538e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005392:	2b00      	cmp	r3, #0
 8005394:	d115      	bne.n	80053c2 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800539a:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80053a2:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80053c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	375c      	adds	r7, #92	; 0x5c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}

080053ce <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80053ce:	b590      	push	{r4, r7, lr}
 80053d0:	b093      	sub	sp, #76	; 0x4c
 80053d2:	af06      	add	r7, sp, #24
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80053e6:	23b4      	movs	r3, #180	; 0xb4
 80053e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80053ec:	2306      	movs	r3, #6
 80053ee:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80053f0:	232c      	movs	r3, #44	; 0x2c
 80053f2:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80053f4:	2201      	movs	r2, #1
 80053f6:	21ff      	movs	r1, #255	; 0xff
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7fb fc33 	bl	8000c64 <VL53L0X_WrByte>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005404:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005408:	2b00      	cmp	r3, #0
 800540a:	d107      	bne.n	800541c <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800540c:	2200      	movs	r2, #0
 800540e:	214f      	movs	r1, #79	; 0x4f
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7fb fc27 	bl	8000c64 <VL53L0X_WrByte>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800541c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005424:	222c      	movs	r2, #44	; 0x2c
 8005426:	214e      	movs	r1, #78	; 0x4e
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f7fb fc1b 	bl	8000c64 <VL53L0X_WrByte>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005434:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800543c:	2200      	movs	r2, #0
 800543e:	21ff      	movs	r1, #255	; 0xff
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7fb fc0f 	bl	8000c64 <VL53L0X_WrByte>
 8005446:	4603      	mov	r3, r0
 8005448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800544c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005458:	461a      	mov	r2, r3
 800545a:	21b6      	movs	r1, #182	; 0xb6
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7fb fc01 	bl	8000c64 <VL53L0X_WrByte>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	e009      	b.n	8005482 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	4413      	add	r3, r2
 8005474:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	429a      	cmp	r2, r3
 8005488:	d3f1      	bcc.n	800546e <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005490:	e002      	b.n	8005498 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	3301      	adds	r3, #1
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005498:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	4413      	add	r3, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fc2b 	bl	8004cfc <is_aperture>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <VL53L0X_set_reference_spads+0xe6>
 80054ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3ee      	bcc.n	8005492 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80054c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054c4:	79f9      	ldrb	r1, [r7, #7]
 80054c6:	f107 0214 	add.w	r2, r7, #20
 80054ca:	9204      	str	r2, [sp, #16]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	9203      	str	r2, [sp, #12]
 80054d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d2:	9202      	str	r2, [sp, #8]
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4623      	mov	r3, r4
 80054dc:	4602      	mov	r2, r0
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fc83 	bl	8004dea <enable_ref_spads>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80054ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10c      	bne.n	800550c <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800550c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005510:	4618      	mov	r0, r3
 8005512:	3734      	adds	r7, #52	; 0x34
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005524:	2300      	movs	r3, #0
 8005526:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	2100      	movs	r1, #0
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fb fb91 	bl	8000c64 <VL53L0X_WrByte>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9bf 	bl	80058d2 <VL53L0X_measurement_poll_for_completion>
 8005554:	4603      	mov	r3, r0
 8005556:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005560:	2100      	movs	r1, #0
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fab6 	bl	8004ad4 <VL53L0X_ClearInterruptMask>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800556c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005574:	2200      	movs	r2, #0
 8005576:	2100      	movs	r1, #0
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fb fb73 	bl	8000c64 <VL53L0X_WrByte>
 800557e:	4603      	mov	r3, r0
 8005580:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	4608      	mov	r0, r1
 8005598:	4611      	mov	r1, r2
 800559a:	461a      	mov	r2, r3
 800559c:	4603      	mov	r3, r0
 800559e:	70fb      	strb	r3, [r7, #3]
 80055a0:	460b      	mov	r3, r1
 80055a2:	70bb      	strb	r3, [r7, #2]
 80055a4:	4613      	mov	r3, r2
 80055a6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80055b0:	2201      	movs	r2, #1
 80055b2:	21ff      	movs	r1, #255	; 0xff
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fb fb55 	bl	8000c64 <VL53L0X_WrByte>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80055c4:	2200      	movs	r2, #0
 80055c6:	2100      	movs	r1, #0
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb fb4b 	bl	8000c64 <VL53L0X_WrByte>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055d8:	2200      	movs	r2, #0
 80055da:	21ff      	movs	r1, #255	; 0xff
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fb fb41 	bl	8000c64 <VL53L0X_WrByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01e      	beq.n	8005630 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80055f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	21cb      	movs	r1, #203	; 0xcb
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb fbb2 	bl	8000d68 <VL53L0X_RdByte>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	4313      	orrs	r3, r2
 800560c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800560e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d02a      	beq.n	800566c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005616:	f107 030e 	add.w	r3, r7, #14
 800561a:	461a      	mov	r2, r3
 800561c:	21ee      	movs	r1, #238	; 0xee
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb fba2 	bl	8000d68 <VL53L0X_RdByte>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	4313      	orrs	r3, r2
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	e01d      	b.n	800566c <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005630:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005638:	78bb      	ldrb	r3, [r7, #2]
 800563a:	461a      	mov	r2, r3
 800563c:	21cb      	movs	r1, #203	; 0xcb
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb fb10 	bl	8000c64 <VL53L0X_WrByte>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	4313      	orrs	r3, r2
 800564c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800564e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005656:	787b      	ldrb	r3, [r7, #1]
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	21ee      	movs	r1, #238	; 0xee
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fb fb4f 	bl	8000d00 <VL53L0X_UpdateByte>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	4313      	orrs	r3, r2
 800566a:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800566c:	2201      	movs	r2, #1
 800566e:	21ff      	movs	r1, #255	; 0xff
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fb faf7 	bl	8000c64 <VL53L0X_WrByte>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	4313      	orrs	r3, r2
 800567e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005680:	2201      	movs	r2, #1
 8005682:	2100      	movs	r1, #0
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fb faed 	bl	8000c64 <VL53L0X_WrByte>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	4313      	orrs	r3, r2
 8005692:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005694:	2200      	movs	r2, #0
 8005696:	21ff      	movs	r1, #255	; 0xff
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fb fae3 	bl	8000c64 <VL53L0X_WrByte>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	f023 0310 	bic.w	r3, r3, #16
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	701a      	strb	r2, [r3, #0]

	return Status;
 80056b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af04      	add	r7, sp, #16
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	71fb      	strb	r3, [r7, #7]
 80056d2:	4613      	mov	r3, r2
 80056d4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80056ea:	79bb      	ldrb	r3, [r7, #6]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80056f6:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80056f8:	2201      	movs	r2, #1
 80056fa:	2101      	movs	r1, #1
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7fb fab1 	bl	8000c64 <VL53L0X_WrByte>
 8005702:	4603      	mov	r3, r0
 8005704:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800570e:	2140      	movs	r1, #64	; 0x40
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff ff01 	bl	8005518 <VL53L0X_perform_single_ref_calibration>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800571a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d115      	bne.n	800574e <VL53L0X_perform_vhv_calibration+0x8e>
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d112      	bne.n	800574e <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005728:	7d39      	ldrb	r1, [r7, #20]
 800572a:	7d7a      	ldrb	r2, [r7, #21]
 800572c:	2300      	movs	r3, #0
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	2301      	movs	r3, #1
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	f107 0313 	add.w	r3, r7, #19
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	460b      	mov	r3, r1
 8005740:	2101      	movs	r1, #1
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff ff23 	bl	800558e <VL53L0X_ref_calibration_io>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]
 800574c:	e002      	b.n	8005754 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d112      	bne.n	8005782 <VL53L0X_perform_vhv_calibration+0xc2>
 800575c:	79bb      	ldrb	r3, [r7, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00f      	beq.n	8005782 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005762:	7dbb      	ldrb	r3, [r7, #22]
 8005764:	461a      	mov	r2, r3
 8005766:	2101      	movs	r1, #1
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7fb fa7b 	bl	8000c64 <VL53L0X_WrByte>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7dba      	ldrb	r2, [r7, #22]
 800577e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005782:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b08a      	sub	sp, #40	; 0x28
 8005792:	af04      	add	r7, sp, #16
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	4611      	mov	r1, r2
 800579a:	461a      	mov	r2, r3
 800579c:	460b      	mov	r3, r1
 800579e:	71fb      	strb	r3, [r7, #7]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80057b4:	79bb      	ldrb	r3, [r7, #6]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80057c0:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80057c2:	2202      	movs	r2, #2
 80057c4:	2101      	movs	r1, #1
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7fb fa4c 	bl	8000c64 <VL53L0X_WrByte>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80057d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80057d8:	2100      	movs	r1, #0
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff fe9c 	bl	8005518 <VL53L0X_perform_single_ref_calibration>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80057e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d115      	bne.n	8005818 <VL53L0X_perform_phase_calibration+0x8a>
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d112      	bne.n	8005818 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80057f2:	7d39      	ldrb	r1, [r7, #20]
 80057f4:	7d7a      	ldrb	r2, [r7, #21]
 80057f6:	2301      	movs	r3, #1
 80057f8:	9303      	str	r3, [sp, #12]
 80057fa:	2300      	movs	r3, #0
 80057fc:	9302      	str	r3, [sp, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	f107 0313 	add.w	r3, r7, #19
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	460b      	mov	r3, r1
 800580a:	2101      	movs	r1, #1
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff febe 	bl	800558e <VL53L0X_ref_calibration_io>
 8005812:	4603      	mov	r3, r0
 8005814:	75fb      	strb	r3, [r7, #23]
 8005816:	e002      	b.n	800581e <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800581e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d112      	bne.n	800584c <VL53L0X_perform_phase_calibration+0xbe>
 8005826:	79bb      	ldrb	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00f      	beq.n	800584c <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800582c:	7dbb      	ldrb	r3, [r7, #22]
 800582e:	461a      	mov	r2, r3
 8005830:	2101      	movs	r1, #1
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7fb fa16 	bl	8000c64 <VL53L0X_WrByte>
 8005838:	4603      	mov	r3, r0
 800583a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800583c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	7dba      	ldrb	r2, [r7, #22]
 8005848:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800584c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005874:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	2300      	movs	r3, #0
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff1f 	bl	80056c0 <VL53L0X_perform_vhv_calibration>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	2300      	movs	r3, #0
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f7ff ff7a 	bl	800578e <VL53L0X_perform_phase_calibration>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800589e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80058a6:	7dbb      	ldrb	r3, [r7, #22]
 80058a8:	461a      	mov	r2, r3
 80058aa:	2101      	movs	r1, #1
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7fb f9d9 	bl	8000c64 <VL53L0X_WrByte>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80058b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	7dba      	ldrb	r2, [r7, #22]
 80058c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80058c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80058e6:	f107 030f 	add.w	r3, r7, #15
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fe fe00 	bl	80044f2 <VL53L0X_GetMeasurementDataReady>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80058f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d110      	bne.n	8005920 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d00f      	beq.n	8005924 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3301      	adds	r3, #1
 8005908:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005910:	d302      	bcc.n	8005918 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005912:	23f9      	movs	r3, #249	; 0xf9
 8005914:	75fb      	strb	r3, [r7, #23]
			break;
 8005916:	e006      	b.n	8005926 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fb fac3 	bl	8000ea4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800591e:	e7e2      	b.n	80058e6 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005924:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	3301      	adds	r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	4603      	mov	r3, r0
 800595e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	085b      	lsrs	r3, r3, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800598a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800598c:	e002      	b.n	8005994 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	089b      	lsrs	r3, r3, #2
 8005992:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d8f8      	bhi.n	800598e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800599c:	e017      	b.n	80059ce <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4413      	add	r3, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d30b      	bcc.n	80059c2 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4413      	add	r3, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e002      	b.n	80059c8 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e4      	bne.n	800599e <VL53L0X_isqrt+0x24>
	}

	return res;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80059ec:	2200      	movs	r2, #0
 80059ee:	2183      	movs	r1, #131	; 0x83
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fb f937 	bl	8000c64 <VL53L0X_WrByte>
 80059f6:	4603      	mov	r3, r0
 80059f8:	461a      	mov	r2, r3
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11e      	bne.n	8005a46 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005a0c:	f107 030f 	add.w	r3, r7, #15
 8005a10:	461a      	mov	r2, r3
 8005a12:	2183      	movs	r1, #131	; 0x83
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fb f9a7 	bl	8000d68 <VL53L0X_RdByte>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <VL53L0X_device_read_strobe+0x5a>
 8005a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a38:	d3e8      	bcc.n	8005a0c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a40:	d301      	bcc.n	8005a46 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005a42:	23f9      	movs	r3, #249	; 0xf9
 8005a44:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005a46:	2201      	movs	r2, #1
 8005a48:	2183      	movs	r1, #131	; 0x83
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb f90a 	bl	8000c64 <VL53L0X_WrByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b098      	sub	sp, #96	; 0x60
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005a96:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005a9a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005aae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ab6:	2b07      	cmp	r3, #7
 8005ab8:	f000 8408 	beq.w	80062cc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005abc:	2201      	movs	r2, #1
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fb f8cf 	bl	8000c64 <VL53L0X_WrByte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	21ff      	movs	r1, #255	; 0xff
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fb f8c3 	bl	8000c64 <VL53L0X_WrByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005aec:	2200      	movs	r2, #0
 8005aee:	2100      	movs	r1, #0
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fb f8b7 	bl	8000c64 <VL53L0X_WrByte>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005b04:	2206      	movs	r2, #6
 8005b06:	21ff      	movs	r1, #255	; 0xff
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fb f8ab 	bl	8000c64 <VL53L0X_WrByte>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005b1c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005b20:	461a      	mov	r2, r3
 8005b22:	2183      	movs	r1, #131	; 0x83
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fb f91f 	bl	8000d68 <VL53L0X_RdByte>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b3c:	f043 0304 	orr.w	r3, r3, #4
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	2183      	movs	r1, #131	; 0x83
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb f88c 	bl	8000c64 <VL53L0X_WrByte>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005b5a:	2207      	movs	r2, #7
 8005b5c:	21ff      	movs	r1, #255	; 0xff
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fb f880 	bl	8000c64 <VL53L0X_WrByte>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005b72:	2201      	movs	r2, #1
 8005b74:	2181      	movs	r1, #129	; 0x81
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb f874 	bl	8000c64 <VL53L0X_WrByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fb f98a 	bl	8000ea4 <VL53L0X_PollingDelay>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	2180      	movs	r1, #128	; 0x80
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb f85e 	bl	8000c64 <VL53L0X_WrByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8098 	beq.w	8005cf2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bc6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 8091 	bne.w	8005cf2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005bd0:	226b      	movs	r2, #107	; 0x6b
 8005bd2:	2194      	movs	r1, #148	; 0x94
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fb f845 	bl	8000c64 <VL53L0X_WrByte>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff fef9 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c00:	461a      	mov	r2, r3
 8005c02:	2190      	movs	r1, #144	; 0x90
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fb f911 	bl	8000e2c <VL53L0X_RdDWord>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	0bdb      	lsrs	r3, r3, #15
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	2194      	movs	r1, #148	; 0x94
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fb f813 	bl	8000c64 <VL53L0X_WrByte>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	461a      	mov	r2, r3
 8005c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff fec7 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c64:	461a      	mov	r2, r3
 8005c66:	2190      	movs	r1, #144	; 0x90
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fb f8df 	bl	8000e2c <VL53L0X_RdDWord>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	0e1b      	lsrs	r3, r3, #24
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005c9a:	2225      	movs	r2, #37	; 0x25
 8005c9c:	2194      	movs	r1, #148	; 0x94
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fa ffe0 	bl	8000c64 <VL53L0X_WrByte>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fe94 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005cc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2190      	movs	r1, #144	; 0x90
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb f8ac 	bl	8000e2c <VL53L0X_RdDWord>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	0e1b      	lsrs	r3, r3, #24
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8189 	beq.w	8006010 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005cfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d02:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 8182 	bne.w	8006010 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	2194      	movs	r1, #148	; 0x94
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fa ffa7 	bl	8000c64 <VL53L0X_WrByte>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fe5b 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005d38:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2190      	movs	r1, #144	; 0x90
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fb f811 	bl	8000d68 <VL53L0X_RdByte>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005d54:	227b      	movs	r2, #123	; 0x7b
 8005d56:	2194      	movs	r1, #148	; 0x94
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fa ff83 	bl	8000c64 <VL53L0X_WrByte>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fe37 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005d80:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005d84:	461a      	mov	r2, r3
 8005d86:	2190      	movs	r1, #144	; 0x90
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fa ffed 	bl	8000d68 <VL53L0X_RdByte>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	461a      	mov	r2, r3
 8005d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005d9c:	2277      	movs	r2, #119	; 0x77
 8005d9e:	2194      	movs	r1, #148	; 0x94
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fa ff5f 	bl	8000c64 <VL53L0X_WrByte>
 8005da6:	4603      	mov	r3, r0
 8005da8:	461a      	mov	r2, r3
 8005daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fe13 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005dcc:	461a      	mov	r2, r3
 8005dce:	2190      	movs	r1, #144	; 0x90
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fb f82b 	bl	8000e2c <VL53L0X_RdDWord>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	0e5b      	lsrs	r3, r3, #25
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	0c9b      	lsrs	r3, r3, #18
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	0adb      	lsrs	r3, r3, #11
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005e2e:	2278      	movs	r2, #120	; 0x78
 8005e30:	2194      	movs	r1, #148	; 0x94
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fa ff16 	bl	8000c64 <VL53L0X_WrByte>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff fdca 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005e5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2190      	movs	r1, #144	; 0x90
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fa ffe2 	bl	8000e2c <VL53L0X_RdDWord>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	0f5b      	lsrs	r3, r3, #29
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e80:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e86:	4413      	add	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	0d9b      	lsrs	r3, r3, #22
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	0bdb      	lsrs	r3, r3, #15
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	019b      	lsls	r3, r3, #6
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005ed6:	2279      	movs	r2, #121	; 0x79
 8005ed8:	2194      	movs	r1, #148	; 0x94
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fa fec2 	bl	8000c64 <VL53L0X_WrByte>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fd76 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f06:	461a      	mov	r2, r3
 8005f08:	2190      	movs	r1, #144	; 0x90
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fa ff8e 	bl	8000e2c <VL53L0X_RdDWord>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	0e9b      	lsrs	r3, r3, #26
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f28:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f2e:	4413      	add	r3, r2
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	0cdb      	lsrs	r3, r3, #19
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	0b1b      	lsrs	r3, r3, #12
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005f70:	227a      	movs	r2, #122	; 0x7a
 8005f72:	2194      	movs	r1, #148	; 0x94
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fa fe75 	bl	8000c64 <VL53L0X_WrByte>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fd29 	bl	80059e0 <VL53L0X_device_read_strobe>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	461a      	mov	r2, r3
 8005f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2190      	movs	r1, #144	; 0x90
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fa ff41 	bl	8000e2c <VL53L0X_RdDWord>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	0f9b      	lsrs	r3, r3, #30
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005fc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fc8:	4413      	add	r3, r2
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	0ddb      	lsrs	r3, r3, #23
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	0a5b      	lsrs	r3, r3, #9
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	089b      	lsrs	r3, r3, #2
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800600a:	2300      	movs	r3, #0
 800600c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80f1 	beq.w	80061fe <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800601c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006020:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006024:	2b00      	cmp	r3, #0
 8006026:	f040 80ea 	bne.w	80061fe <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800602a:	227b      	movs	r2, #123	; 0x7b
 800602c:	2194      	movs	r1, #148	; 0x94
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fa fe18 	bl	8000c64 <VL53L0X_WrByte>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800603c:	4313      	orrs	r3, r2
 800603e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fccc 	bl	80059e0 <VL53L0X_device_read_strobe>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006050:	4313      	orrs	r3, r2
 8006052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800605a:	461a      	mov	r2, r3
 800605c:	2190      	movs	r1, #144	; 0x90
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fa fee4 	bl	8000e2c <VL53L0X_RdDWord>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800606c:	4313      	orrs	r3, r2
 800606e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006072:	227c      	movs	r2, #124	; 0x7c
 8006074:	2194      	movs	r1, #148	; 0x94
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fa fdf4 	bl	8000c64 <VL53L0X_WrByte>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006084:	4313      	orrs	r3, r2
 8006086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fca8 	bl	80059e0 <VL53L0X_device_read_strobe>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006098:	4313      	orrs	r3, r2
 800609a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800609e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a2:	461a      	mov	r2, r3
 80060a4:	2190      	movs	r1, #144	; 0x90
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fa fec0 	bl	8000e2c <VL53L0X_RdDWord>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80060ba:	2273      	movs	r2, #115	; 0x73
 80060bc:	2194      	movs	r1, #148	; 0x94
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fa fdd0 	bl	8000c64 <VL53L0X_WrByte>
 80060c4:	4603      	mov	r3, r0
 80060c6:	461a      	mov	r2, r3
 80060c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fc84 	bl	80059e0 <VL53L0X_device_read_strobe>
 80060d8:	4603      	mov	r3, r0
 80060da:	461a      	mov	r2, r3
 80060dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ea:	461a      	mov	r2, r3
 80060ec:	2190      	movs	r1, #144	; 0x90
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fa fe9c 	bl	8000e2c <VL53L0X_RdDWord>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006106:	b29b      	uxth	r3, r3
 8006108:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800610a:	2274      	movs	r2, #116	; 0x74
 800610c:	2194      	movs	r1, #148	; 0x94
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fa fda8 	bl	8000c64 <VL53L0X_WrByte>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800611c:	4313      	orrs	r3, r2
 800611e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fc5c 	bl	80059e0 <VL53L0X_device_read_strobe>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006130:	4313      	orrs	r3, r2
 8006132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800613a:	461a      	mov	r2, r3
 800613c:	2190      	movs	r1, #144	; 0x90
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fa fe74 	bl	8000e2c <VL53L0X_RdDWord>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800614c:	4313      	orrs	r3, r2
 800614e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006158:	4313      	orrs	r3, r2
 800615a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800615c:	2275      	movs	r2, #117	; 0x75
 800615e:	2194      	movs	r1, #148	; 0x94
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7fa fd7f 	bl	8000c64 <VL53L0X_WrByte>
 8006166:	4603      	mov	r3, r0
 8006168:	461a      	mov	r2, r3
 800616a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800616e:	4313      	orrs	r3, r2
 8006170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fc33 	bl	80059e0 <VL53L0X_device_read_strobe>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006182:	4313      	orrs	r3, r2
 8006184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006188:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800618c:	461a      	mov	r2, r3
 800618e:	2190      	movs	r1, #144	; 0x90
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fa fe4b 	bl	8000e2c <VL53L0X_RdDWord>
 8006196:	4603      	mov	r3, r0
 8006198:	461a      	mov	r2, r3
 800619a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800619e:	4313      	orrs	r3, r2
 80061a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80061ac:	2276      	movs	r2, #118	; 0x76
 80061ae:	2194      	movs	r1, #148	; 0x94
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fa fd57 	bl	8000c64 <VL53L0X_WrByte>
 80061b6:	4603      	mov	r3, r0
 80061b8:	461a      	mov	r2, r3
 80061ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061be:	4313      	orrs	r3, r2
 80061c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fc0b 	bl	80059e0 <VL53L0X_device_read_strobe>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80061d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061dc:	461a      	mov	r2, r3
 80061de:	2190      	movs	r1, #144	; 0x90
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fa fe23 	bl	8000e2c <VL53L0X_RdDWord>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80061f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061fa:	4313      	orrs	r3, r2
 80061fc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80061fe:	2200      	movs	r2, #0
 8006200:	2181      	movs	r1, #129	; 0x81
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fa fd2e 	bl	8000c64 <VL53L0X_WrByte>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006210:	4313      	orrs	r3, r2
 8006212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006216:	2206      	movs	r2, #6
 8006218:	21ff      	movs	r1, #255	; 0xff
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fa fd22 	bl	8000c64 <VL53L0X_WrByte>
 8006220:	4603      	mov	r3, r0
 8006222:	461a      	mov	r2, r3
 8006224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006228:	4313      	orrs	r3, r2
 800622a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800622e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006232:	461a      	mov	r2, r3
 8006234:	2183      	movs	r1, #131	; 0x83
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fa fd96 	bl	8000d68 <VL53L0X_RdByte>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006244:	4313      	orrs	r3, r2
 8006246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800624a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800624e:	f023 0304 	bic.w	r3, r3, #4
 8006252:	b2db      	uxtb	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	2183      	movs	r1, #131	; 0x83
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fa fd03 	bl	8000c64 <VL53L0X_WrByte>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006266:	4313      	orrs	r3, r2
 8006268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800626c:	2201      	movs	r2, #1
 800626e:	21ff      	movs	r1, #255	; 0xff
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fa fcf7 	bl	8000c64 <VL53L0X_WrByte>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800627e:	4313      	orrs	r3, r2
 8006280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006284:	2201      	movs	r2, #1
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fa fceb 	bl	8000c64 <VL53L0X_WrByte>
 800628e:	4603      	mov	r3, r0
 8006290:	461a      	mov	r2, r3
 8006292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006296:	4313      	orrs	r3, r2
 8006298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800629c:	2200      	movs	r2, #0
 800629e:	21ff      	movs	r1, #255	; 0xff
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fa fcdf 	bl	8000c64 <VL53L0X_WrByte>
 80062a6:	4603      	mov	r3, r0
 80062a8:	461a      	mov	r2, r3
 80062aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80062b4:	2200      	movs	r2, #0
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fa fcd3 	bl	8000c64 <VL53L0X_WrByte>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80062cc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 808f 	bne.w	80063f4 <VL53L0X_get_info_from_device+0x98e>
 80062d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062da:	2b07      	cmp	r3, #7
 80062dc:	f000 808a 	beq.w	80063f4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d024      	beq.n	8006334 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80062ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062ee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11e      	bne.n	8006334 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80062fc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006306:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800630a:	2300      	movs	r3, #0
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630e:	e00e      	b.n	800632e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006310:	f107 0208 	add.w	r2, r7, #8
 8006314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006316:	4413      	add	r3, r2
 8006318:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631e:	4413      	add	r3, r2
 8006320:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006324:	460a      	mov	r2, r1
 8006326:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632a:	3301      	adds	r3, #1
 800632c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006330:	2b05      	cmp	r3, #5
 8006332:	dded      	ble.n	8006310 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d018      	beq.n	8006370 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800633e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006342:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006346:	2b00      	cmp	r3, #0
 8006348:	d112      	bne.n	8006370 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800634a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006354:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	33f3      	adds	r3, #243	; 0xf3
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006364:	f107 0310 	add.w	r3, r7, #16
 8006368:	4619      	mov	r1, r3
 800636a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800636c:	f001 fe5c 	bl	8008028 <strcpy>

		}

		if (((option & 4) == 4) &&
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d030      	beq.n	80063dc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800637a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800637e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006382:	2b00      	cmp	r3, #0
 8006384:	d12a      	bne.n	80063dc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006398:	025b      	lsls	r3, r3, #9
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063a0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80063aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d011      	beq.n	80063d4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80063b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80063b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80063c4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80063c8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80063cc:	425b      	negs	r3, r3
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80063d4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80063dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80063ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3760      	adds	r7, #96	; 0x60
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006400:	b490      	push	{r4, r7}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800640c:	f240 6377 	movw	r3, #1655	; 0x677
 8006410:	f04f 0400 	mov.w	r4, #0
 8006414:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006418:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800641c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800642e:	68bb      	ldr	r3, [r7, #8]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bc90      	pop	{r4, r7}
 8006438:	4770      	bx	lr

0800643a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800643a:	b480      	push	{r7}
 800643c:	b087      	sub	sp, #28
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d017      	beq.n	8006484 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3b01      	subs	r3, #1
 8006458:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800645a:	e005      	b.n	8006468 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	3301      	adds	r3, #1
 8006466:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f4      	bne.n	800645c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006472:	89fb      	ldrh	r3, [r7, #14]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	b29b      	uxth	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006480:	4413      	add	r3, r2
 8006482:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006484:	8afb      	ldrh	r3, [r7, #22]

}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	0a12      	lsrs	r2, r2, #8
 80064a6:	b292      	uxth	r2, r2
 80064a8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
	...

080064bc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff ff94 	bl	8006400 <VL53L0X_calc_macro_period_ps>
 80064d8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80064e0:	4a0a      	ldr	r2, [pc, #40]	; (800650c <VL53L0X_calc_timeout_mclks+0x50>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064f0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	441a      	add	r2, r3
	timeout_period_mclks =
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006502:	69fb      	ldr	r3, [r7, #28]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	10624dd3 	.word	0x10624dd3

08006510 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	807b      	strh	r3, [r7, #2]
 800651c:	4613      	mov	r3, r2
 800651e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006524:	787b      	ldrb	r3, [r7, #1]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ff69 	bl	8006400 <VL53L0X_calc_macro_period_ps>
 800652e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <VL53L0X_calc_timeout_us+0x50>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <VL53L0X_calc_timeout_us+0x50>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006556:	697b      	ldr	r3, [r7, #20]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	10624dd3 	.word	0x10624dd3

08006564 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	; 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <get_sequence_step_timeout+0x38>
 8006590:	7afb      	ldrb	r3, [r7, #11]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d002      	beq.n	800659c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d128      	bne.n	80065ee <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800659c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80065a0:	461a      	mov	r2, r3
 80065a2:	2100      	movs	r1, #0
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7fd fa86 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80065b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80065b8:	f107 0320 	add.w	r3, r7, #32
 80065bc:	461a      	mov	r2, r3
 80065be:	2146      	movs	r1, #70	; 0x46
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7fa fbd1 	bl	8000d68 <VL53L0X_RdByte>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80065cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff ff5c 	bl	8006490 <VL53L0X_decode_timeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80065dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80065e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065e2:	4619      	mov	r1, r3
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ff93 	bl	8006510 <VL53L0X_calc_timeout_us>
 80065ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80065ec:	e092      	b.n	8006714 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d135      	bne.n	8006660 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80065f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80065f8:	461a      	mov	r2, r3
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7fd fa5a 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006608:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 8081 	bne.w	8006714 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006612:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006616:	461a      	mov	r2, r3
 8006618:	2100      	movs	r1, #0
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7fd fa4b 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006626:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800662e:	f107 031e 	add.w	r3, r7, #30
 8006632:	461a      	mov	r2, r3
 8006634:	2151      	movs	r1, #81	; 0x51
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7fa fbc0 	bl	8000dbc <VL53L0X_RdWord>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006642:	8bfb      	ldrh	r3, [r7, #30]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff ff23 	bl	8006490 <VL53L0X_decode_timeout>
 800664a:	4603      	mov	r3, r0
 800664c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800664e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006654:	4619      	mov	r1, r3
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff ff5a 	bl	8006510 <VL53L0X_calc_timeout_us>
 800665c:	62b8      	str	r0, [r7, #40]	; 0x28
 800665e:	e059      	b.n	8006714 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d156      	bne.n	8006714 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	4619      	mov	r1, r3
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7fd fb2d 	bl	8003ccc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01d      	beq.n	80066b8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800667c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006680:	461a      	mov	r2, r3
 8006682:	2100      	movs	r1, #0
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7fd fa16 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006690:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10f      	bne.n	80066b8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006698:	f107 031e 	add.w	r3, r7, #30
 800669c:	461a      	mov	r2, r3
 800669e:	2151      	movs	r1, #81	; 0x51
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7fa fb8b 	bl	8000dbc <VL53L0X_RdWord>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80066ac:	8bfb      	ldrh	r3, [r7, #30]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff feee 	bl	8006490 <VL53L0X_decode_timeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80066b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d109      	bne.n	80066d4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80066c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80066c4:	461a      	mov	r2, r3
 80066c6:	2101      	movs	r1, #1
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7fd f9f4 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80066d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10f      	bne.n	80066fc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80066dc:	f107 031c 	add.w	r3, r7, #28
 80066e0:	461a      	mov	r2, r3
 80066e2:	2171      	movs	r1, #113	; 0x71
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7fa fb69 	bl	8000dbc <VL53L0X_RdWord>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80066f0:	8bbb      	ldrh	r3, [r7, #28]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff fecc 	bl	8006490 <VL53L0X_decode_timeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80066fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006704:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff feff 	bl	8006510 <VL53L0X_calc_timeout_us>
 8006712:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006718:	601a      	str	r2, [r3, #0]

	return Status;
 800671a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800671e:	4618      	mov	r0, r3
 8006720:	3730      	adds	r7, #48	; 0x30
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b08a      	sub	sp, #40	; 0x28
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	460b      	mov	r3, r1
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <set_sequence_step_timeout+0x26>
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d002      	beq.n	800674c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d138      	bne.n	80067be <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800674c:	f107 031b 	add.w	r3, r7, #27
 8006750:	461a      	mov	r2, r3
 8006752:	2100      	movs	r1, #0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7fd f9ae 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006760:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11a      	bne.n	800679e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006768:	7efb      	ldrb	r3, [r7, #27]
 800676a:	461a      	mov	r2, r3
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fea4 	bl	80064bc <VL53L0X_calc_timeout_mclks>
 8006774:	4603      	mov	r3, r0
 8006776:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006778:	8bbb      	ldrh	r3, [r7, #28]
 800677a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677e:	d903      	bls.n	8006788 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006780:	23ff      	movs	r3, #255	; 0xff
 8006782:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006786:	e004      	b.n	8006792 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006788:	8bbb      	ldrh	r3, [r7, #28]
 800678a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800678c:	3b01      	subs	r3, #1
 800678e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800679e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 80ab 	bne.w	80068fe <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80067a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067ac:	461a      	mov	r2, r3
 80067ae:	2146      	movs	r1, #70	; 0x46
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7fa fa57 	bl	8000c64 <VL53L0X_WrByte>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80067bc:	e09f      	b.n	80068fe <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d135      	bne.n	8006830 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80067c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11b      	bne.n	8006804 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80067cc:	f107 031b 	add.w	r3, r7, #27
 80067d0:	461a      	mov	r2, r3
 80067d2:	2100      	movs	r1, #0
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7fd f96e 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80067e0:	7efb      	ldrb	r3, [r7, #27]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fe68 	bl	80064bc <VL53L0X_calc_timeout_mclks>
 80067ec:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80067ee:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80067f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fe21 	bl	800643a <VL53L0X_encode_timeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067fc:	8b3a      	ldrh	r2, [r7, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006808:	2b00      	cmp	r3, #0
 800680a:	d108      	bne.n	800681e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800680c:	8b3b      	ldrh	r3, [r7, #24]
 800680e:	461a      	mov	r2, r3
 8006810:	2151      	movs	r1, #81	; 0x51
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7fa fa4a 	bl	8000cac <VL53L0X_WrWord>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800681e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006822:	2b00      	cmp	r3, #0
 8006824:	d16b      	bne.n	80068fe <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800682e:	e066      	b.n	80068fe <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	2b04      	cmp	r3, #4
 8006834:	d160      	bne.n	80068f8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006836:	f107 0310 	add.w	r3, r7, #16
 800683a:	4619      	mov	r1, r3
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7fd fa45 	bl	8003ccc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006846:	7cfb      	ldrb	r3, [r7, #19]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01d      	beq.n	8006888 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800684c:	f107 031b 	add.w	r3, r7, #27
 8006850:	461a      	mov	r2, r3
 8006852:	2100      	movs	r1, #0
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7fd f92e 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006860:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10f      	bne.n	8006888 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006868:	f107 0318 	add.w	r3, r7, #24
 800686c:	461a      	mov	r2, r3
 800686e:	2151      	movs	r1, #81	; 0x51
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7fa faa3 	bl	8000dbc <VL53L0X_RdWord>
 8006876:	4603      	mov	r3, r0
 8006878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800687c:	8b3b      	ldrh	r3, [r7, #24]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fe06 	bl	8006490 <VL53L0X_decode_timeout>
 8006884:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006886:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006890:	f107 031b 	add.w	r3, r7, #27
 8006894:	461a      	mov	r2, r3
 8006896:	2101      	movs	r1, #1
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7fd f90c 	bl	8003ab6 <VL53L0X_GetVcselPulsePeriod>
 800689e:	4603      	mov	r3, r0
 80068a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80068a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d128      	bne.n	80068fe <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80068ac:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80068ae:	461a      	mov	r2, r3
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff fe02 	bl	80064bc <VL53L0X_calc_timeout_mclks>
 80068b8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80068ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	4413      	add	r3, r2
 80068c0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80068c2:	6a38      	ldr	r0, [r7, #32]
 80068c4:	f7ff fdb9 	bl	800643a <VL53L0X_encode_timeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80068cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d108      	bne.n	80068e6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80068d4:	8bfb      	ldrh	r3, [r7, #30]
 80068d6:	461a      	mov	r2, r3
 80068d8:	2171      	movs	r1, #113	; 0x71
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7fa f9e6 	bl	8000cac <VL53L0X_WrWord>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80068e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d107      	bne.n	80068fe <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80068f6:	e002      	b.n	80068fe <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068f8:	23fc      	movs	r3, #252	; 0xfc
 80068fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80068fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b08a      	sub	sp, #40	; 0x28
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
 8006916:	4613      	mov	r3, r2
 8006918:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800691a:	2300      	movs	r3, #0
 800691c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006920:	230c      	movs	r3, #12
 8006922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006926:	2312      	movs	r3, #18
 8006928:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800692c:	2308      	movs	r3, #8
 800692e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006932:	230e      	movs	r3, #14
 8006934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800693c:	78bb      	ldrb	r3, [r7, #2]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006948:	23fc      	movs	r3, #252	; 0xfc
 800694a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800694e:	e020      	b.n	8006992 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <VL53L0X_set_vcsel_pulse_period+0x68>
 8006956:	78ba      	ldrb	r2, [r7, #2]
 8006958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800695c:	429a      	cmp	r2, r3
 800695e:	d304      	bcc.n	800696a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006960:	78ba      	ldrb	r2, [r7, #2]
 8006962:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006966:	429a      	cmp	r2, r3
 8006968:	d903      	bls.n	8006972 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800696a:	23fc      	movs	r3, #252	; 0xfc
 800696c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006970:	e00f      	b.n	8006992 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10c      	bne.n	8006992 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006978:	78ba      	ldrb	r2, [r7, #2]
 800697a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800697e:	429a      	cmp	r2, r3
 8006980:	d304      	bcc.n	800698c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006982:	78ba      	ldrb	r2, [r7, #2]
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006988:	429a      	cmp	r2, r3
 800698a:	d902      	bls.n	8006992 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800698c:	23fc      	movs	r3, #252	; 0xfc
 800698e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800699a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800699e:	e239      	b.n	8006e14 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d150      	bne.n	8006a48 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80069a6:	78bb      	ldrb	r3, [r7, #2]
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	d110      	bne.n	80069ce <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80069ac:	2218      	movs	r2, #24
 80069ae:	2157      	movs	r1, #87	; 0x57
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fa f957 	bl	8000c64 <VL53L0X_WrByte>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80069bc:	2208      	movs	r2, #8
 80069be:	2156      	movs	r1, #86	; 0x56
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fa f94f 	bl	8000c64 <VL53L0X_WrByte>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069cc:	e17f      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80069ce:	78bb      	ldrb	r3, [r7, #2]
 80069d0:	2b0e      	cmp	r3, #14
 80069d2:	d110      	bne.n	80069f6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80069d4:	2230      	movs	r2, #48	; 0x30
 80069d6:	2157      	movs	r1, #87	; 0x57
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fa f943 	bl	8000c64 <VL53L0X_WrByte>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80069e4:	2208      	movs	r2, #8
 80069e6:	2156      	movs	r1, #86	; 0x56
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fa f93b 	bl	8000c64 <VL53L0X_WrByte>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069f4:	e16b      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80069f6:	78bb      	ldrb	r3, [r7, #2]
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d110      	bne.n	8006a1e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80069fc:	2240      	movs	r2, #64	; 0x40
 80069fe:	2157      	movs	r1, #87	; 0x57
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fa f92f 	bl	8000c64 <VL53L0X_WrByte>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	2156      	movs	r1, #86	; 0x56
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fa f927 	bl	8000c64 <VL53L0X_WrByte>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a1c:	e157      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006a1e:	78bb      	ldrb	r3, [r7, #2]
 8006a20:	2b12      	cmp	r3, #18
 8006a22:	f040 8154 	bne.w	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006a26:	2250      	movs	r2, #80	; 0x50
 8006a28:	2157      	movs	r1, #87	; 0x57
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fa f91a 	bl	8000c64 <VL53L0X_WrByte>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006a36:	2208      	movs	r2, #8
 8006a38:	2156      	movs	r1, #86	; 0x56
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fa f912 	bl	8000c64 <VL53L0X_WrByte>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a46:	e142      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	f040 813f 	bne.w	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006a50:	78bb      	ldrb	r3, [r7, #2]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d14c      	bne.n	8006af0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006a56:	2210      	movs	r2, #16
 8006a58:	2148      	movs	r1, #72	; 0x48
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fa f902 	bl	8000c64 <VL53L0X_WrByte>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006a66:	2208      	movs	r2, #8
 8006a68:	2147      	movs	r1, #71	; 0x47
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa f8fa 	bl	8000c64 <VL53L0X_WrByte>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006a76:	2202      	movs	r2, #2
 8006a78:	2132      	movs	r1, #50	; 0x32
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa f8f2 	bl	8000c64 <VL53L0X_WrByte>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006a8e:	220c      	movs	r2, #12
 8006a90:	2130      	movs	r1, #48	; 0x30
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fa f8e6 	bl	8000c64 <VL53L0X_WrByte>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	21ff      	movs	r1, #255	; 0xff
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa f8da 	bl	8000c64 <VL53L0X_WrByte>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006abe:	2230      	movs	r2, #48	; 0x30
 8006ac0:	2130      	movs	r1, #48	; 0x30
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fa f8ce 	bl	8000c64 <VL53L0X_WrByte>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	21ff      	movs	r1, #255	; 0xff
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fa f8c2 	bl	8000c64 <VL53L0X_WrByte>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006aee:	e0ee      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006af0:	78bb      	ldrb	r3, [r7, #2]
 8006af2:	2b0a      	cmp	r3, #10
 8006af4:	d14c      	bne.n	8006b90 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006af6:	2228      	movs	r2, #40	; 0x28
 8006af8:	2148      	movs	r1, #72	; 0x48
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fa f8b2 	bl	8000c64 <VL53L0X_WrByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006b06:	2208      	movs	r2, #8
 8006b08:	2147      	movs	r1, #71	; 0x47
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa f8aa 	bl	8000c64 <VL53L0X_WrByte>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006b16:	2203      	movs	r2, #3
 8006b18:	2132      	movs	r1, #50	; 0x32
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa f8a2 	bl	8000c64 <VL53L0X_WrByte>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006b2e:	2209      	movs	r2, #9
 8006b30:	2130      	movs	r1, #48	; 0x30
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fa f896 	bl	8000c64 <VL53L0X_WrByte>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006b46:	2201      	movs	r2, #1
 8006b48:	21ff      	movs	r1, #255	; 0xff
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fa f88a 	bl	8000c64 <VL53L0X_WrByte>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006b5e:	2220      	movs	r2, #32
 8006b60:	2130      	movs	r1, #48	; 0x30
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa f87e 	bl	8000c64 <VL53L0X_WrByte>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006b76:	2200      	movs	r2, #0
 8006b78:	21ff      	movs	r1, #255	; 0xff
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa f872 	bl	8000c64 <VL53L0X_WrByte>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b8e:	e09e      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006b90:	78bb      	ldrb	r3, [r7, #2]
 8006b92:	2b0c      	cmp	r3, #12
 8006b94:	d14c      	bne.n	8006c30 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006b96:	2238      	movs	r2, #56	; 0x38
 8006b98:	2148      	movs	r1, #72	; 0x48
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa f862 	bl	8000c64 <VL53L0X_WrByte>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006ba6:	2208      	movs	r2, #8
 8006ba8:	2147      	movs	r1, #71	; 0x47
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fa f85a 	bl	8000c64 <VL53L0X_WrByte>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	2132      	movs	r1, #50	; 0x32
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fa f852 	bl	8000c64 <VL53L0X_WrByte>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006bce:	2208      	movs	r2, #8
 8006bd0:	2130      	movs	r1, #48	; 0x30
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fa f846 	bl	8000c64 <VL53L0X_WrByte>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006be6:	2201      	movs	r2, #1
 8006be8:	21ff      	movs	r1, #255	; 0xff
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fa f83a 	bl	8000c64 <VL53L0X_WrByte>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006bfe:	2220      	movs	r2, #32
 8006c00:	2130      	movs	r1, #48	; 0x30
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fa f82e 	bl	8000c64 <VL53L0X_WrByte>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006c16:	2200      	movs	r2, #0
 8006c18:	21ff      	movs	r1, #255	; 0xff
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fa f822 	bl	8000c64 <VL53L0X_WrByte>
 8006c20:	4603      	mov	r3, r0
 8006c22:	461a      	mov	r2, r3
 8006c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c2e:	e04e      	b.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006c30:	78bb      	ldrb	r3, [r7, #2]
 8006c32:	2b0e      	cmp	r3, #14
 8006c34:	d14b      	bne.n	8006cce <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006c36:	2248      	movs	r2, #72	; 0x48
 8006c38:	2148      	movs	r1, #72	; 0x48
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fa f812 	bl	8000c64 <VL53L0X_WrByte>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006c46:	2208      	movs	r2, #8
 8006c48:	2147      	movs	r1, #71	; 0x47
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fa f80a 	bl	8000c64 <VL53L0X_WrByte>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006c56:	2203      	movs	r2, #3
 8006c58:	2132      	movs	r1, #50	; 0x32
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa f802 	bl	8000c64 <VL53L0X_WrByte>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006c6e:	2207      	movs	r2, #7
 8006c70:	2130      	movs	r1, #48	; 0x30
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7f9 fff6 	bl	8000c64 <VL53L0X_WrByte>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006c86:	2201      	movs	r2, #1
 8006c88:	21ff      	movs	r1, #255	; 0xff
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7f9 ffea 	bl	8000c64 <VL53L0X_WrByte>
 8006c90:	4603      	mov	r3, r0
 8006c92:	461a      	mov	r2, r3
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	2130      	movs	r1, #48	; 0x30
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7f9 ffde 	bl	8000c64 <VL53L0X_WrByte>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	21ff      	movs	r1, #255	; 0xff
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7f9 ffd2 	bl	8000c64 <VL53L0X_WrByte>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d17f      	bne.n	8006dd6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fe3c 	bl	8005956 <VL53L0X_encode_vcsel_period>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d045      	beq.n	8006d7a <VL53L0X_set_vcsel_pulse_period+0x470>
 8006cee:	e06e      	b.n	8006dce <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2103      	movs	r1, #3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fc33 	bl	8006564 <get_sequence_step_timeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006d0c:	f107 0310 	add.w	r3, r7, #16
 8006d10:	461a      	mov	r2, r3
 8006d12:	2102      	movs	r1, #2
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff fc25 	bl	8006564 <get_sequence_step_timeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d109      	bne.n	8006d3c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2150      	movs	r1, #80	; 0x50
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7f9 ff97 	bl	8000c64 <VL53L0X_WrByte>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	461a      	mov	r2, r3
 8006d48:	2103      	movs	r1, #3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff fceb 	bl	8006726 <set_sequence_step_timeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8006d56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d108      	bne.n	8006d70 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	461a      	mov	r2, r3
 8006d62:	2102      	movs	r1, #2
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fcde 	bl	8006726 <set_sequence_step_timeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	78ba      	ldrb	r2, [r7, #2]
 8006d74:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006d78:	e02e      	b.n	8006dd8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006d7a:	f107 0318 	add.w	r3, r7, #24
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2104      	movs	r1, #4
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fbee 	bl	8006564 <get_sequence_step_timeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006d8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006d96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2170      	movs	r1, #112	; 0x70
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7f9 ff60 	bl	8000c64 <VL53L0X_WrByte>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006daa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	461a      	mov	r2, r3
 8006db6:	2104      	movs	r1, #4
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fcb4 	bl	8006726 <set_sequence_step_timeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	78ba      	ldrb	r2, [r7, #2]
 8006dc8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006dcc:	e004      	b.n	8006dd8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006dce:	23fc      	movs	r3, #252	; 0xfc
 8006dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dd4:	e000      	b.n	8006dd8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8006dd6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006de6:	69f9      	ldr	r1, [r7, #28]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fc fe26 	bl	8003a3a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8006df4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8006dfc:	f107 010f 	add.w	r1, r7, #15
 8006e00:	2301      	movs	r3, #1
 8006e02:	2200      	movs	r2, #0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7fe fcc2 	bl	800578e <VL53L0X_perform_phase_calibration>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3728      	adds	r7, #40	; 0x28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	460b      	mov	r3, r1
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d00a      	beq.n	8006e4e <VL53L0X_get_vcsel_pulse_period+0x32>
 8006e38:	e013      	b.n	8006e62 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006e3a:	f107 0316 	add.w	r3, r7, #22
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2150      	movs	r1, #80	; 0x50
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7f9 ff90 	bl	8000d68 <VL53L0X_RdByte>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006e4c:	e00b      	b.n	8006e66 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006e4e:	f107 0316 	add.w	r3, r7, #22
 8006e52:	461a      	mov	r2, r3
 8006e54:	2170      	movs	r1, #112	; 0x70
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7f9 ff86 	bl	8000d68 <VL53L0X_RdByte>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006e60:	e001      	b.n	8006e66 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e62:	23fc      	movs	r3, #252	; 0xfc
 8006e64:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d107      	bne.n	8006e7e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006e6e:	7dbb      	ldrb	r3, [r7, #22]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fd5e 	bl	8005932 <VL53L0X_decode_vcsel_period>
 8006e76:	4603      	mov	r3, r0
 8006e78:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	701a      	strb	r2, [r3, #0]

	return Status;
 8006e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b092      	sub	sp, #72	; 0x48
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006e9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006e9e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006ea0:	f240 7376 	movw	r3, #1910	; 0x776
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006ea6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006eac:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006eb2:	f240 234e 	movw	r3, #590	; 0x24e
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006eb8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006ebe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006ec4:	f240 2326 	movw	r3, #550	; 0x226
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006ece:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006ed2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d205      	bcs.n	8006eec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ee0:	23fc      	movs	r3, #252	; 0xfc
 8006ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8006ee6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006eea:	e0aa      	b.n	8007042 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fc fee4 	bl	8003ccc <VL53L0X_GetSequenceStepEnables>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006f0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d15b      	bne.n	8006fca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8006f12:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8006f18:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006f1e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d052      	beq.n	8006fca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff fb19 	bl	8006564 <get_sequence_step_timeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006f38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006f40:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f44:	e07d      	b.n	8007042 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006f46:	7d3b      	ldrb	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00f      	beq.n	8006f6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006f4c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f50:	4413      	add	r3, r2
 8006f52:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d204      	bcs.n	8006f66 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	643b      	str	r3, [r7, #64]	; 0x40
 8006f64:	e002      	b.n	8006f6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f66:	23fc      	movs	r3, #252	; 0xfc
 8006f68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006f6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006f74:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f78:	e063      	b.n	8007042 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006f7a:	7dbb      	ldrb	r3, [r7, #22]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d011      	beq.n	8006fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	4413      	add	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d204      	bcs.n	8006f9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	643b      	str	r3, [r7, #64]	; 0x40
 8006f9a:	e016      	b.n	8006fca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f9c:	23fc      	movs	r3, #252	; 0xfc
 8006f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006fa2:	e012      	b.n	8006fca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006fa4:	7d7b      	ldrb	r3, [r7, #21]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00f      	beq.n	8006fca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fae:	4413      	add	r3, r2
 8006fb0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d204      	bcs.n	8006fc4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc2:	e002      	b.n	8006fca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fc4:	23fc      	movs	r3, #252	; 0xfc
 8006fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006fca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006fd2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006fd6:	e034      	b.n	8007042 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d019      	beq.n	8007012 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006fde:	f107 030c 	add.w	r3, r7, #12
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fabc 	bl	8006564 <get_sequence_step_timeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff6:	4413      	add	r3, r2
 8006ff8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d204      	bcs.n	800700c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	643b      	str	r3, [r7, #64]	; 0x40
 800700a:	e002      	b.n	8007012 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800700c:	23fc      	movs	r3, #252	; 0xfc
 800700e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007012:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007016:	2b00      	cmp	r3, #0
 8007018:	d111      	bne.n	800703e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800701a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00e      	beq.n	800703e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800702a:	2104      	movs	r1, #4
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fb7a 	bl	8006726 <set_sequence_step_timeout>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800703e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007042:	4618      	mov	r0, r3
 8007044:	3748      	adds	r7, #72	; 0x48
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b090      	sub	sp, #64	; 0x40
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007054:	2300      	movs	r3, #0
 8007056:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800705a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800705e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007060:	f240 7376 	movw	r3, #1910	; 0x776
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007066:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800706c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007070:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007072:	f240 234e 	movw	r3, #590	; 0x24e
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007078:	f240 23b2 	movw	r3, #690	; 0x2b2
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800707e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007084:	f240 2326 	movw	r3, #550	; 0x226
 8007088:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800708e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007092:	441a      	add	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fc fe14 	bl	8003ccc <VL53L0X_GetSequenceStepEnables>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80070aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80070b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070b6:	e075      	b.n	80071a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80070b8:	7e3b      	ldrb	r3, [r7, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80070be:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80070c4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d030      	beq.n	800712c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80070ca:	f107 0310 	add.w	r3, r7, #16
 80070ce:	461a      	mov	r2, r3
 80070d0:	2102      	movs	r1, #2
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fa46 	bl	8006564 <get_sequence_step_timeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80070de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d122      	bne.n	800712c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80070e6:	7e3b      	ldrb	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80070f0:	6939      	ldr	r1, [r7, #16]
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070f6:	441a      	add	r2, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80070fc:	7ebb      	ldrb	r3, [r7, #26]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007106:	6939      	ldr	r1, [r7, #16]
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	440b      	add	r3, r1
 800710c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800710e:	441a      	add	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e00a      	b.n	800712c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007116:	7e7b      	ldrb	r3, [r7, #25]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007120:	6939      	ldr	r1, [r7, #16]
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007126:	441a      	add	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800712c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007130:	2b00      	cmp	r3, #0
 8007132:	d114      	bne.n	800715e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007134:	7efb      	ldrb	r3, [r7, #27]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800713a:	f107 030c 	add.w	r3, r7, #12
 800713e:	461a      	mov	r2, r3
 8007140:	2103      	movs	r1, #3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fa0e 	bl	8006564 <get_sequence_step_timeout>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007152:	68f9      	ldr	r1, [r7, #12]
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007158:	441a      	add	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800715e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007162:	2b00      	cmp	r3, #0
 8007164:	d114      	bne.n	8007190 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007166:	7f3b      	ldrb	r3, [r7, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	461a      	mov	r2, r3
 8007172:	2104      	movs	r1, #4
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff f9f5 	bl	8006564 <get_sequence_step_timeout>
 800717a:	4603      	mov	r3, r0
 800717c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007184:	6979      	ldr	r1, [r7, #20]
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800718a:	441a      	add	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007190:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007194:	2b00      	cmp	r3, #0
 8007196:	d103      	bne.n	80071a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3740      	adds	r7, #64	; 0x40
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80071be:	e0c6      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	74fb      	strb	r3, [r7, #19]
		Index++;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	3301      	adds	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2bff      	cmp	r3, #255	; 0xff
 80071d4:	f040 808d 	bne.w	80072f2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4413      	add	r3, r2
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	747b      	strb	r3, [r7, #17]
			Index++;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3301      	adds	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80071e8:	7c7b      	ldrb	r3, [r7, #17]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d87e      	bhi.n	80072ec <VL53L0X_load_tuning_settings+0x140>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <VL53L0X_load_tuning_settings+0x48>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007205 	.word	0x08007205
 80071f8:	0800723f 	.word	0x0800723f
 80071fc:	08007279 	.word	0x08007279
 8007200:	080072b3 	.word	0x080072b3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	743b      	strb	r3, [r7, #16]
				Index++;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	3301      	adds	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4413      	add	r3, r2
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	3301      	adds	r3, #1
 8007222:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007224:	7c3b      	ldrb	r3, [r7, #16]
 8007226:	b29b      	uxth	r3, r3
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	b29a      	uxth	r2, r3
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	b29b      	uxth	r3, r3
 8007230:	4413      	add	r3, r2
 8007232:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	89ba      	ldrh	r2, [r7, #12]
 8007238:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800723c:	e087      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	4413      	add	r3, r2
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	743b      	strb	r3, [r7, #16]
				Index++;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	3301      	adds	r3, #1
 800724c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	4413      	add	r3, r2
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3301      	adds	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800725e:	7c3b      	ldrb	r3, [r7, #16]
 8007260:	b29b      	uxth	r3, r3
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	b29a      	uxth	r2, r3
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	b29b      	uxth	r3, r3
 800726a:	4413      	add	r3, r2
 800726c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	89ba      	ldrh	r2, [r7, #12]
 8007272:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007276:	e06a      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4413      	add	r3, r2
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	743b      	strb	r3, [r7, #16]
				Index++;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4413      	add	r3, r2
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3301      	adds	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007298:	7c3b      	ldrb	r3, [r7, #16]
 800729a:	b29b      	uxth	r3, r3
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	b29a      	uxth	r2, r3
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	89ba      	ldrh	r2, [r7, #12]
 80072ac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80072b0:	e04d      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	4413      	add	r3, r2
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	743b      	strb	r3, [r7, #16]
				Index++;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3301      	adds	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	4413      	add	r3, r2
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	73fb      	strb	r3, [r7, #15]
				Index++;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	3301      	adds	r3, #1
 80072d0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80072d2:	7c3b      	ldrb	r3, [r7, #16]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	b29a      	uxth	r2, r3
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4413      	add	r3, r2
 80072e0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	89ba      	ldrh	r2, [r7, #12]
 80072e6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80072ea:	e030      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072ec:	23fc      	movs	r3, #252	; 0xfc
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e02d      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d828      	bhi.n	800734a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4413      	add	r3, r2
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	3301      	adds	r3, #1
 8007306:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007308:	2300      	movs	r3, #0
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	e00f      	b.n	800732e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	4413      	add	r3, r2
 8007314:	7819      	ldrb	r1, [r3, #0]
 8007316:	f107 0208 	add.w	r2, r7, #8
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	4413      	add	r3, r2
 800731e:	460a      	mov	r2, r1
 8007320:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3301      	adds	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	3301      	adds	r3, #1
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	7cfb      	ldrb	r3, [r7, #19]
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	429a      	cmp	r2, r3
 8007334:	dbeb      	blt.n	800730e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007336:	7cfb      	ldrb	r3, [r7, #19]
 8007338:	f107 0208 	add.w	r2, r7, #8
 800733c:	7cb9      	ldrb	r1, [r7, #18]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7f9 fc34 	bl	8000bac <VL53L0X_WriteMulti>
 8007344:	4603      	mov	r3, r0
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e001      	b.n	800734e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800734a:	23fc      	movs	r3, #252	; 0xfc
 800734c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	4413      	add	r3, r2
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <VL53L0X_load_tuning_settings+0x1b8>
 800735a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f43f af2e 	beq.w	80071c0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007364:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800737c:	2300      	movs	r3, #0
 800737e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007386:	f107 0313 	add.w	r3, r7, #19
 800738a:	4619      	mov	r1, r3
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7fc fd29 	bl	8003de4 <VL53L0X_GetXTalkCompensationEnable>
 8007392:	4603      	mov	r3, r0
 8007394:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007396:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d111      	bne.n	80073c2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800739e:	7cfb      	ldrb	r3, [r7, #19]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00e      	beq.n	80073c2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	8a9b      	ldrh	r3, [r3, #20]
 80073ae:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	3380      	adds	r3, #128	; 0x80
 80073bc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80073c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b086      	sub	sp, #24
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80073e6:	f107 0310 	add.w	r3, r7, #16
 80073ea:	461a      	mov	r2, r3
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff ffbe 	bl	8007370 <VL53L0X_get_total_xtalk_rate>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80073f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	441a      	add	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	601a      	str	r2, [r3, #0]

	return Status;
 800740c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b09a      	sub	sp, #104	; 0x68
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007426:	2312      	movs	r3, #18
 8007428:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800742a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800742e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007430:	2342      	movs	r3, #66	; 0x42
 8007432:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007434:	2306      	movs	r3, #6
 8007436:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007438:	2307      	movs	r3, #7
 800743a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007448:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007450:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	3380      	adds	r3, #128	; 0x80
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01b      	beq.n	80074b0 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	029b      	lsls	r3, r3, #10
 800747c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007484:	4413      	add	r3, r2
 8007486:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007488:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007492:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007494:	4613      	mov	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800749c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800749e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074a0:	fb02 f303 	mul.w	r3, r2, r3
 80074a4:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80074a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80074b4:	fb02 f303 	mul.w	r3, r2, r3
 80074b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c8:	fb02 f303 	mul.w	r3, r2, r3
 80074cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80074ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80074d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074da:	085a      	lsrs	r2, r3, #1
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	441a      	add	r2, r3
 80074e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ec:	fb02 f303 	mul.w	r3, r2, r3
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f8:	d302      	bcc.n	8007500 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 80074fa:	4b55      	ldr	r3, [pc, #340]	; (8007650 <VL53L0X_calc_dmax+0x238>)
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
 80074fe:	e016      	b.n	800752e <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007502:	085a      	lsrs	r2, r3, #1
 8007504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007506:	441a      	add	r2, r3
 8007508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750a:	fbb2 f3f3 	udiv	r3, r2, r3
 800750e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800751a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800751c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800752e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007530:	039b      	lsls	r3, r3, #14
 8007532:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007536:	4a47      	ldr	r2, [pc, #284]	; (8007654 <VL53L0X_calc_dmax+0x23c>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	099b      	lsrs	r3, r3, #6
 800753e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800754a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	3308      	adds	r3, #8
 8007558:	091b      	lsrs	r3, r3, #4
 800755a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007576:	0b9b      	lsrs	r3, r3, #14
 8007578:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800757a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800757c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800757e:	4413      	add	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4413      	add	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	039b      	lsls	r3, r3, #14
 800759a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	4413      	add	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ae:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075b4:	fb02 f303 	mul.w	r3, r2, r3
 80075b8:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80075c0:	4a24      	ldr	r2, [pc, #144]	; (8007654 <VL53L0X_calc_dmax+0x23c>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	099b      	lsrs	r3, r3, #6
 80075c8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <VL53L0X_calc_dmax+0x23c>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80075e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e2:	3380      	adds	r3, #128	; 0x80
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	085a      	lsrs	r2, r3, #1
 80075f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f4:	441a      	add	r2, r3
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80075fe:	e001      	b.n	8007604 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007604:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007606:	f7fe f9b8 	bl	800597a <VL53L0X_isqrt>
 800760a:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d008      	beq.n	8007624 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	085a      	lsrs	r2, r3, #1
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	441a      	add	r2, r3
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007622:	e001      	b.n	8007628 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007628:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800762a:	f7fe f9a6 	bl	800597a <VL53L0X_isqrt>
 800762e:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763a:	429a      	cmp	r2, r3
 800763c:	d902      	bls.n	8007644 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800763e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007642:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007644:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007648:	4618      	mov	r0, r3
 800764a:	3768      	adds	r7, #104	; 0x68
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	fff00000 	.word	0xfff00000
 8007654:	10624dd3 	.word	0x10624dd3

08007658 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b0b4      	sub	sp, #208	; 0xd0
 800765c:	af04      	add	r7, sp, #16
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007666:	f44f 7348 	mov.w	r3, #800	; 0x320
 800766a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800766e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007676:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800767a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800767e:	f241 235c 	movw	r3, #4700	; 0x125c
 8007682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007686:	4b9e      	ldr	r3, [pc, #632]	; (8007900 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800768c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007690:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007692:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800769a:	fbb2 f3f3 	udiv	r3, r2, r3
 800769e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80076a0:	4b98      	ldr	r3, [pc, #608]	; (8007904 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80076a2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80076a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80076aa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80076ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80076b0:	f240 6377 	movw	r3, #1655	; 0x677
 80076b4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80076ce:	0c1b      	lsrs	r3, r3, #16
 80076d0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	461a      	mov	r2, r3
 80076de:	68b9      	ldr	r1, [r7, #8]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff fe74 	bl	80073ce <VL53L0X_get_total_signal_rate>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80076ec:	f107 0314 	add.w	r3, r7, #20
 80076f0:	461a      	mov	r2, r3
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff fe3b 	bl	8007370 <VL53L0X_get_total_xtalk_rate>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800770c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800770e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007712:	0c1b      	lsrs	r3, r3, #16
 8007714:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007724:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772a:	429a      	cmp	r2, r3
 800772c:	d902      	bls.n	8007734 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800772e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007734:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007738:	2b00      	cmp	r3, #0
 800773a:	d168      	bne.n	800780e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800774c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007750:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007754:	461a      	mov	r2, r3
 8007756:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7fe feae 	bl	80064bc <VL53L0X_calc_timeout_mclks>
 8007760:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007772:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007776:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800777a:	461a      	mov	r2, r3
 800777c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7fe fe9b 	bl	80064bc <VL53L0X_calc_timeout_mclks>
 8007786:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007788:	2303      	movs	r3, #3
 800778a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800778e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007792:	2b08      	cmp	r3, #8
 8007794:	d102      	bne.n	800779c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007796:	2302      	movs	r3, #2
 8007798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800779c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800779e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80077a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	02db      	lsls	r3, r3, #11
 80077ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80077b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80077b8:	4a53      	ldr	r2, [pc, #332]	; (8007908 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	099b      	lsrs	r3, r3, #6
 80077c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80077c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80077d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80077da:	4a4b      	ldr	r2, [pc, #300]	; (8007908 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80077dc:	fba2 2303 	umull	r2, r3, r2, r3
 80077e0:	099b      	lsrs	r3, r3, #6
 80077e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3380      	adds	r3, #128	; 0x80
 80077ea:	0a1b      	lsrs	r3, r3, #8
 80077ec:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
 80077f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80077fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007800:	3380      	adds	r3, #128	; 0x80
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800780e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007816:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800781a:	e165      	b.n	8007ae8 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800781c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007828:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007830:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e153      	b.n	8007ae4 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800783c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007844:	2301      	movs	r3, #1
 8007846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800784a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800784e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007852:	041a      	lsls	r2, r3, #16
 8007854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007856:	fbb2 f3f3 	udiv	r3, r2, r3
 800785a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800785e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007864:	429a      	cmp	r2, r3
 8007866:	d902      	bls.n	800786e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800786e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007872:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800787e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007882:	4613      	mov	r3, r2
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe f875 	bl	800597a <VL53L0X_isqrt>
 8007890:	4603      	mov	r3, r0
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	891b      	ldrh	r3, [r3, #8]
 800789a:	461a      	mov	r2, r3
 800789c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80078a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80078a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ac:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80078ae:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80078b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80078b4:	4a14      	ldr	r2, [pc, #80]	; (8007908 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	099b      	lsrs	r3, r3, #6
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80078be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80078c6:	4a10      	ldr	r2, [pc, #64]	; (8007908 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	099b      	lsrs	r3, r3, #6
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80078d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80078d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfb8      	it	lt
 80078e2:	425b      	neglt	r3, r3
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	7e1b      	ldrb	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80078f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078fc:	e035      	b.n	800796a <VL53L0X_calc_sigma_estimate+0x312>
 80078fe:	bf00      	nop
 8007900:	028f87ae 	.word	0x028f87ae
 8007904:	0006999a 	.word	0x0006999a
 8007908:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800790c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800790e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007924:	fb02 f303 	mul.w	r3, r2, r3
 8007928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800792c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007932:	4413      	add	r3, r2
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800793a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800793e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007964:	0b9b      	lsrs	r3, r3, #14
 8007966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800796e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800798a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007996:	0c1b      	lsrs	r3, r3, #16
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799e:	fb02 f303 	mul.w	r3, r2, r3
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	4413      	add	r3, r2
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80079ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ae:	f7fd ffe4 	bl	800597a <VL53L0X_isqrt>
 80079b2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	041b      	lsls	r3, r3, #16
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	3332      	adds	r3, #50	; 0x32
 80079be:	4a4c      	ldr	r2, [pc, #304]	; (8007af0 <VL53L0X_calc_sigma_estimate+0x498>)
 80079c0:	fba2 2303 	umull	r2, r3, r2, r3
 80079c4:	095a      	lsrs	r2, r3, #5
 80079c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80079d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079d4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80079e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079e4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80079e8:	3308      	adds	r3, #8
 80079ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80079ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079f2:	4a40      	ldr	r2, [pc, #256]	; (8007af4 <VL53L0X_calc_sigma_estimate+0x49c>)
 80079f4:	fba2 2303 	umull	r2, r3, r2, r3
 80079f8:	0b5b      	lsrs	r3, r3, #13
 80079fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80079fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d902      	bls.n	8007a0e <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007a0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007a1c:	4a36      	ldr	r2, [pc, #216]	; (8007af8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	099b      	lsrs	r3, r3, #6
 8007a24:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a2e:	441a      	add	r2, r3
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd ff9f 	bl	800597a <VL53L0X_isqrt>
 8007a3c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a4a:	4a2b      	ldr	r2, [pc, #172]	; (8007af8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	099b      	lsrs	r3, r3, #6
 8007a52:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a5c:	fb02 f303 	mul.w	r3, r2, r3
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	4413      	add	r3, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fd ff81 	bl	800597a <VL53L0X_isqrt>
 8007a78:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a80:	fb02 f303 	mul.w	r3, r2, r3
 8007a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <VL53L0X_calc_sigma_estimate+0x44a>
 8007a8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <VL53L0X_calc_sigma_estimate+0x44a>
 8007a96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d903      	bls.n	8007aaa <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007ab0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007abc:	6939      	ldr	r1, [r7, #16]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ac6:	9302      	str	r3, [sp, #8]
 8007ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7ff fc9d 	bl	8007418 <VL53L0X_calc_dmax>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ae4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	37c0      	adds	r7, #192	; 0xc0
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	51eb851f 	.word	0x51eb851f
 8007af4:	d1b71759 	.word	0xd1b71759
 8007af8:	10624dd3 	.word	0x10624dd3

08007afc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b090      	sub	sp, #64	; 0x40
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	461a      	mov	r2, r3
 8007b08:	460b      	mov	r3, r1
 8007b0a:	72fb      	strb	r3, [r7, #11]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	10db      	asrs	r3, r3, #3
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007b5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <VL53L0X_get_pal_range_status+0x98>
 8007b64:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	d013      	beq.n	8007b94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007b6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	d00f      	beq.n	8007b94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007b74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b78:	2b0c      	cmp	r3, #12
 8007b7a:	d00b      	beq.n	8007b94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007b7c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b80:	2b0d      	cmp	r3, #13
 8007b82:	d007      	beq.n	8007b94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007b84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b88:	2b0e      	cmp	r3, #14
 8007b8a:	d003      	beq.n	8007b94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007b8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b90:	2b0f      	cmp	r3, #15
 8007b92:	d103      	bne.n	8007b9c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007b9a:	e002      	b.n	8007ba2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007ba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007baa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7fc f9ea 	bl	8003f8c <VL53L0X_GetLimitCheckEnable>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d02e      	beq.n	8007c24 <VL53L0X_get_pal_range_status+0x128>
 8007bc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d12a      	bne.n	8007c24 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007bce:	f107 0310 	add.w	r3, r7, #16
 8007bd2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007bd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff fd3d 	bl	8007658 <VL53L0X_calc_sigma_estimate>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007be4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d103      	bne.n	8007bf4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007bf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d113      	bne.n	8007c24 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007bfc:	f107 0320 	add.w	r3, r7, #32
 8007c00:	461a      	mov	r2, r3
 8007c02:	2100      	movs	r1, #0
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7fc fa45 	bl	8004094 <VL53L0X_GetLimitCheckValue>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d006      	beq.n	8007c24 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8007c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c18:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d902      	bls.n	8007c24 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007c24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d109      	bne.n	8007c40 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007c2c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007c30:	461a      	mov	r2, r3
 8007c32:	2102      	movs	r1, #2
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7fc f9a9 	bl	8003f8c <VL53L0X_GetLimitCheckEnable>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007c40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d044      	beq.n	8007cd2 <VL53L0X_get_pal_range_status+0x1d6>
 8007c48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d140      	bne.n	8007cd2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007c50:	f107 031c 	add.w	r3, r7, #28
 8007c54:	461a      	mov	r2, r3
 8007c56:	2102      	movs	r1, #2
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7fc fa1b 	bl	8004094 <VL53L0X_GetLimitCheckValue>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007c64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d107      	bne.n	8007c7c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	21ff      	movs	r1, #255	; 0xff
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7f8 fff7 	bl	8000c64 <VL53L0X_WrByte>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007c7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007c84:	f107 0316 	add.w	r3, r7, #22
 8007c88:	461a      	mov	r2, r3
 8007c8a:	21b6      	movs	r1, #182	; 0xb6
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7f9 f895 	bl	8000dbc <VL53L0X_RdWord>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007c98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d107      	bne.n	8007cb0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	21ff      	movs	r1, #255	; 0xff
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7f8 ffdd 	bl	8000c64 <VL53L0X_WrByte>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007cb0:	8afb      	ldrh	r3, [r7, #22]
 8007cb2:	025b      	lsls	r3, r3, #9
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007cc4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d902      	bls.n	8007cd2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007cd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2103      	movs	r1, #3
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7fc f952 	bl	8003f8c <VL53L0X_GetLimitCheckEnable>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d023      	beq.n	8007d3e <VL53L0X_get_pal_range_status+0x242>
 8007cf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d11f      	bne.n	8007d3e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007cfe:	893b      	ldrh	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
 8007d08:	e005      	b.n	8007d16 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	021a      	lsls	r2, r3, #8
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	2103      	movs	r1, #3
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7fc f9b8 	bl	8004094 <VL53L0X_GetLimitCheckValue>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d006      	beq.n	8007d3e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007d30:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d202      	bcs.n	8007d3e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d14a      	bne.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007d46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d103      	bne.n	8007d56 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d50:	22ff      	movs	r2, #255	; 0xff
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	e042      	b.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007d56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d007      	beq.n	8007d6e <VL53L0X_get_pal_range_status+0x272>
 8007d5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d003      	beq.n	8007d6e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007d66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d103      	bne.n	8007d76 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d70:	2205      	movs	r2, #5
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e032      	b.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007d76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d7a:	2b06      	cmp	r3, #6
 8007d7c:	d003      	beq.n	8007d86 <VL53L0X_get_pal_range_status+0x28a>
 8007d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	d103      	bne.n	8007d8e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d88:	2204      	movs	r2, #4
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e026      	b.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007d8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d007      	beq.n	8007da6 <VL53L0X_get_pal_range_status+0x2aa>
 8007d96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d9a:	2b0a      	cmp	r3, #10
 8007d9c:	d003      	beq.n	8007da6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007d9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d103      	bne.n	8007dae <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da8:	2203      	movs	r2, #3
 8007daa:	701a      	strb	r2, [r3, #0]
 8007dac:	e016      	b.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007dae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d003      	beq.n	8007dbe <VL53L0X_get_pal_range_status+0x2c2>
 8007db6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d103      	bne.n	8007dc6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	701a      	strb	r2, [r3, #0]
 8007dc4:	e00a      	b.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007dc6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d103      	bne.n	8007dd6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e002      	b.n	8007ddc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de6:	2200      	movs	r2, #0
 8007de8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007dea:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8007dee:	461a      	mov	r2, r3
 8007df0:	2101      	movs	r1, #1
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7fc f8ca 	bl	8003f8c <VL53L0X_GetLimitCheckEnable>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007dfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d14f      	bne.n	8007ea6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <VL53L0X_get_pal_range_status+0x31a>
 8007e0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d103      	bne.n	8007e1e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e1c:	e002      	b.n	8007e24 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e2a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007e2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d003      	beq.n	8007e3e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007e36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d103      	bne.n	8007e46 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e44:	e002      	b.n	8007e4c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007e56:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <VL53L0X_get_pal_range_status+0x36a>
 8007e5e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d103      	bne.n	8007e6e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e6c:	e002      	b.n	8007e74 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <VL53L0X_get_pal_range_status+0x392>
 8007e86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d103      	bne.n	8007e96 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e94:	e002      	b.n	8007e9c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007ea2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ea6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3740      	adds	r7, #64	; 0x40
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <__errno>:
 8007eb4:	4b01      	ldr	r3, [pc, #4]	; (8007ebc <__errno+0x8>)
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	2000045c 	.word	0x2000045c

08007ec0 <__libc_init_array>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	4e0c      	ldr	r6, [pc, #48]	; (8007ef8 <__libc_init_array+0x38>)
 8007ec6:	4c0d      	ldr	r4, [pc, #52]	; (8007efc <__libc_init_array+0x3c>)
 8007ec8:	1ba4      	subs	r4, r4, r6
 8007eca:	10a4      	asrs	r4, r4, #2
 8007ecc:	42a5      	cmp	r5, r4
 8007ece:	d109      	bne.n	8007ee4 <__libc_init_array+0x24>
 8007ed0:	f000 ff88 	bl	8008de4 <_init>
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	4e0a      	ldr	r6, [pc, #40]	; (8007f00 <__libc_init_array+0x40>)
 8007ed8:	4c0a      	ldr	r4, [pc, #40]	; (8007f04 <__libc_init_array+0x44>)
 8007eda:	1ba4      	subs	r4, r4, r6
 8007edc:	10a4      	asrs	r4, r4, #2
 8007ede:	42a5      	cmp	r5, r4
 8007ee0:	d105      	bne.n	8007eee <__libc_init_array+0x2e>
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ee8:	4798      	blx	r3
 8007eea:	3501      	adds	r5, #1
 8007eec:	e7ee      	b.n	8007ecc <__libc_init_array+0xc>
 8007eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef2:	4798      	blx	r3
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	e7f2      	b.n	8007ede <__libc_init_array+0x1e>
 8007ef8:	0800909c 	.word	0x0800909c
 8007efc:	0800909c 	.word	0x0800909c
 8007f00:	0800909c 	.word	0x0800909c
 8007f04:	080090a0 	.word	0x080090a0

08007f08 <memcpy>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	1e43      	subs	r3, r0, #1
 8007f0c:	440a      	add	r2, r1
 8007f0e:	4291      	cmp	r1, r2
 8007f10:	d100      	bne.n	8007f14 <memcpy+0xc>
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f1c:	e7f7      	b.n	8007f0e <memcpy+0x6>

08007f1e <memset>:
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4402      	add	r2, r0
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d100      	bne.n	8007f28 <memset+0xa>
 8007f26:	4770      	bx	lr
 8007f28:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2c:	e7f9      	b.n	8007f22 <memset+0x4>
	...

08007f30 <iprintf>:
 8007f30:	b40f      	push	{r0, r1, r2, r3}
 8007f32:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <iprintf+0x2c>)
 8007f34:	b513      	push	{r0, r1, r4, lr}
 8007f36:	681c      	ldr	r4, [r3, #0]
 8007f38:	b124      	cbz	r4, 8007f44 <iprintf+0x14>
 8007f3a:	69a3      	ldr	r3, [r4, #24]
 8007f3c:	b913      	cbnz	r3, 8007f44 <iprintf+0x14>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fa2a 	bl	8008398 <__sinit>
 8007f44:	ab05      	add	r3, sp, #20
 8007f46:	9a04      	ldr	r2, [sp, #16]
 8007f48:	68a1      	ldr	r1, [r4, #8]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f000 fbdf 	bl	8008710 <_vfiprintf_r>
 8007f52:	b002      	add	sp, #8
 8007f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f58:	b004      	add	sp, #16
 8007f5a:	4770      	bx	lr
 8007f5c:	2000045c 	.word	0x2000045c

08007f60 <_puts_r>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	460e      	mov	r6, r1
 8007f64:	4605      	mov	r5, r0
 8007f66:	b118      	cbz	r0, 8007f70 <_puts_r+0x10>
 8007f68:	6983      	ldr	r3, [r0, #24]
 8007f6a:	b90b      	cbnz	r3, 8007f70 <_puts_r+0x10>
 8007f6c:	f000 fa14 	bl	8008398 <__sinit>
 8007f70:	69ab      	ldr	r3, [r5, #24]
 8007f72:	68ac      	ldr	r4, [r5, #8]
 8007f74:	b913      	cbnz	r3, 8007f7c <_puts_r+0x1c>
 8007f76:	4628      	mov	r0, r5
 8007f78:	f000 fa0e 	bl	8008398 <__sinit>
 8007f7c:	4b23      	ldr	r3, [pc, #140]	; (800800c <_puts_r+0xac>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d117      	bne.n	8007fb2 <_puts_r+0x52>
 8007f82:	686c      	ldr	r4, [r5, #4]
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	071b      	lsls	r3, r3, #28
 8007f88:	d51d      	bpl.n	8007fc6 <_puts_r+0x66>
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	b1db      	cbz	r3, 8007fc6 <_puts_r+0x66>
 8007f8e:	3e01      	subs	r6, #1
 8007f90:	68a3      	ldr	r3, [r4, #8]
 8007f92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f96:	3b01      	subs	r3, #1
 8007f98:	60a3      	str	r3, [r4, #8]
 8007f9a:	b9e9      	cbnz	r1, 8007fd8 <_puts_r+0x78>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da2e      	bge.n	8007ffe <_puts_r+0x9e>
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	210a      	movs	r1, #10
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f847 	bl	8008038 <__swbuf_r>
 8007faa:	3001      	adds	r0, #1
 8007fac:	d011      	beq.n	8007fd2 <_puts_r+0x72>
 8007fae:	200a      	movs	r0, #10
 8007fb0:	e011      	b.n	8007fd6 <_puts_r+0x76>
 8007fb2:	4b17      	ldr	r3, [pc, #92]	; (8008010 <_puts_r+0xb0>)
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	d101      	bne.n	8007fbc <_puts_r+0x5c>
 8007fb8:	68ac      	ldr	r4, [r5, #8]
 8007fba:	e7e3      	b.n	8007f84 <_puts_r+0x24>
 8007fbc:	4b15      	ldr	r3, [pc, #84]	; (8008014 <_puts_r+0xb4>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	bf08      	it	eq
 8007fc2:	68ec      	ldreq	r4, [r5, #12]
 8007fc4:	e7de      	b.n	8007f84 <_puts_r+0x24>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 f887 	bl	80080dc <__swsetup_r>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d0dd      	beq.n	8007f8e <_puts_r+0x2e>
 8007fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da04      	bge.n	8007fe6 <_puts_r+0x86>
 8007fdc:	69a2      	ldr	r2, [r4, #24]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	dc06      	bgt.n	8007ff0 <_puts_r+0x90>
 8007fe2:	290a      	cmp	r1, #10
 8007fe4:	d004      	beq.n	8007ff0 <_puts_r+0x90>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	6022      	str	r2, [r4, #0]
 8007fec:	7019      	strb	r1, [r3, #0]
 8007fee:	e7cf      	b.n	8007f90 <_puts_r+0x30>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f820 	bl	8008038 <__swbuf_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d1c9      	bne.n	8007f90 <_puts_r+0x30>
 8007ffc:	e7e9      	b.n	8007fd2 <_puts_r+0x72>
 8007ffe:	200a      	movs	r0, #10
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	6022      	str	r2, [r4, #0]
 8008006:	7018      	strb	r0, [r3, #0]
 8008008:	e7e5      	b.n	8007fd6 <_puts_r+0x76>
 800800a:	bf00      	nop
 800800c:	08009028 	.word	0x08009028
 8008010:	08009048 	.word	0x08009048
 8008014:	08009008 	.word	0x08009008

08008018 <puts>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <puts+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f7ff bf9f 	b.w	8007f60 <_puts_r>
 8008022:	bf00      	nop
 8008024:	2000045c 	.word	0x2000045c

08008028 <strcpy>:
 8008028:	4603      	mov	r3, r0
 800802a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800802e:	f803 2b01 	strb.w	r2, [r3], #1
 8008032:	2a00      	cmp	r2, #0
 8008034:	d1f9      	bne.n	800802a <strcpy+0x2>
 8008036:	4770      	bx	lr

08008038 <__swbuf_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	4614      	mov	r4, r2
 800803e:	4605      	mov	r5, r0
 8008040:	b118      	cbz	r0, 800804a <__swbuf_r+0x12>
 8008042:	6983      	ldr	r3, [r0, #24]
 8008044:	b90b      	cbnz	r3, 800804a <__swbuf_r+0x12>
 8008046:	f000 f9a7 	bl	8008398 <__sinit>
 800804a:	4b21      	ldr	r3, [pc, #132]	; (80080d0 <__swbuf_r+0x98>)
 800804c:	429c      	cmp	r4, r3
 800804e:	d12a      	bne.n	80080a6 <__swbuf_r+0x6e>
 8008050:	686c      	ldr	r4, [r5, #4]
 8008052:	69a3      	ldr	r3, [r4, #24]
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	d52e      	bpl.n	80080ba <__swbuf_r+0x82>
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	b363      	cbz	r3, 80080ba <__swbuf_r+0x82>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	6820      	ldr	r0, [r4, #0]
 8008064:	b2f6      	uxtb	r6, r6
 8008066:	1ac0      	subs	r0, r0, r3
 8008068:	6963      	ldr	r3, [r4, #20]
 800806a:	4637      	mov	r7, r6
 800806c:	4283      	cmp	r3, r0
 800806e:	dc04      	bgt.n	800807a <__swbuf_r+0x42>
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f000 f926 	bl	80082c4 <_fflush_r>
 8008078:	bb28      	cbnz	r0, 80080c6 <__swbuf_r+0x8e>
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	3001      	adds	r0, #1
 800807e:	3b01      	subs	r3, #1
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	701e      	strb	r6, [r3, #0]
 800808a:	6963      	ldr	r3, [r4, #20]
 800808c:	4283      	cmp	r3, r0
 800808e:	d004      	beq.n	800809a <__swbuf_r+0x62>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	07db      	lsls	r3, r3, #31
 8008094:	d519      	bpl.n	80080ca <__swbuf_r+0x92>
 8008096:	2e0a      	cmp	r6, #10
 8008098:	d117      	bne.n	80080ca <__swbuf_r+0x92>
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	f000 f911 	bl	80082c4 <_fflush_r>
 80080a2:	b190      	cbz	r0, 80080ca <__swbuf_r+0x92>
 80080a4:	e00f      	b.n	80080c6 <__swbuf_r+0x8e>
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <__swbuf_r+0x9c>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	d101      	bne.n	80080b0 <__swbuf_r+0x78>
 80080ac:	68ac      	ldr	r4, [r5, #8]
 80080ae:	e7d0      	b.n	8008052 <__swbuf_r+0x1a>
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__swbuf_r+0xa0>)
 80080b2:	429c      	cmp	r4, r3
 80080b4:	bf08      	it	eq
 80080b6:	68ec      	ldreq	r4, [r5, #12]
 80080b8:	e7cb      	b.n	8008052 <__swbuf_r+0x1a>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 f80d 	bl	80080dc <__swsetup_r>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d0cc      	beq.n	8008060 <__swbuf_r+0x28>
 80080c6:	f04f 37ff 	mov.w	r7, #4294967295
 80080ca:	4638      	mov	r0, r7
 80080cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ce:	bf00      	nop
 80080d0:	08009028 	.word	0x08009028
 80080d4:	08009048 	.word	0x08009048
 80080d8:	08009008 	.word	0x08009008

080080dc <__swsetup_r>:
 80080dc:	4b32      	ldr	r3, [pc, #200]	; (80081a8 <__swsetup_r+0xcc>)
 80080de:	b570      	push	{r4, r5, r6, lr}
 80080e0:	681d      	ldr	r5, [r3, #0]
 80080e2:	4606      	mov	r6, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	b125      	cbz	r5, 80080f2 <__swsetup_r+0x16>
 80080e8:	69ab      	ldr	r3, [r5, #24]
 80080ea:	b913      	cbnz	r3, 80080f2 <__swsetup_r+0x16>
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 f953 	bl	8008398 <__sinit>
 80080f2:	4b2e      	ldr	r3, [pc, #184]	; (80081ac <__swsetup_r+0xd0>)
 80080f4:	429c      	cmp	r4, r3
 80080f6:	d10f      	bne.n	8008118 <__swsetup_r+0x3c>
 80080f8:	686c      	ldr	r4, [r5, #4]
 80080fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	0715      	lsls	r5, r2, #28
 8008102:	d42c      	bmi.n	800815e <__swsetup_r+0x82>
 8008104:	06d0      	lsls	r0, r2, #27
 8008106:	d411      	bmi.n	800812c <__swsetup_r+0x50>
 8008108:	2209      	movs	r2, #9
 800810a:	6032      	str	r2, [r6, #0]
 800810c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	e03e      	b.n	8008196 <__swsetup_r+0xba>
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <__swsetup_r+0xd4>)
 800811a:	429c      	cmp	r4, r3
 800811c:	d101      	bne.n	8008122 <__swsetup_r+0x46>
 800811e:	68ac      	ldr	r4, [r5, #8]
 8008120:	e7eb      	b.n	80080fa <__swsetup_r+0x1e>
 8008122:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <__swsetup_r+0xd8>)
 8008124:	429c      	cmp	r4, r3
 8008126:	bf08      	it	eq
 8008128:	68ec      	ldreq	r4, [r5, #12]
 800812a:	e7e6      	b.n	80080fa <__swsetup_r+0x1e>
 800812c:	0751      	lsls	r1, r2, #29
 800812e:	d512      	bpl.n	8008156 <__swsetup_r+0x7a>
 8008130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008132:	b141      	cbz	r1, 8008146 <__swsetup_r+0x6a>
 8008134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008138:	4299      	cmp	r1, r3
 800813a:	d002      	beq.n	8008142 <__swsetup_r+0x66>
 800813c:	4630      	mov	r0, r6
 800813e:	f000 fa19 	bl	8008574 <_free_r>
 8008142:	2300      	movs	r3, #0
 8008144:	6363      	str	r3, [r4, #52]	; 0x34
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	2300      	movs	r3, #0
 8008150:	6063      	str	r3, [r4, #4]
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f043 0308 	orr.w	r3, r3, #8
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	b94b      	cbnz	r3, 8008176 <__swsetup_r+0x9a>
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816c:	d003      	beq.n	8008176 <__swsetup_r+0x9a>
 800816e:	4621      	mov	r1, r4
 8008170:	4630      	mov	r0, r6
 8008172:	f000 f9bf 	bl	80084f4 <__smakebuf_r>
 8008176:	89a2      	ldrh	r2, [r4, #12]
 8008178:	f012 0301 	ands.w	r3, r2, #1
 800817c:	d00c      	beq.n	8008198 <__swsetup_r+0xbc>
 800817e:	2300      	movs	r3, #0
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	6963      	ldr	r3, [r4, #20]
 8008184:	425b      	negs	r3, r3
 8008186:	61a3      	str	r3, [r4, #24]
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	b953      	cbnz	r3, 80081a2 <__swsetup_r+0xc6>
 800818c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008190:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008194:	d1ba      	bne.n	800810c <__swsetup_r+0x30>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	0792      	lsls	r2, r2, #30
 800819a:	bf58      	it	pl
 800819c:	6963      	ldrpl	r3, [r4, #20]
 800819e:	60a3      	str	r3, [r4, #8]
 80081a0:	e7f2      	b.n	8008188 <__swsetup_r+0xac>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e7f7      	b.n	8008196 <__swsetup_r+0xba>
 80081a6:	bf00      	nop
 80081a8:	2000045c 	.word	0x2000045c
 80081ac:	08009028 	.word	0x08009028
 80081b0:	08009048 	.word	0x08009048
 80081b4:	08009008 	.word	0x08009008

080081b8 <__sflush_r>:
 80081b8:	898a      	ldrh	r2, [r1, #12]
 80081ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081be:	4605      	mov	r5, r0
 80081c0:	0710      	lsls	r0, r2, #28
 80081c2:	460c      	mov	r4, r1
 80081c4:	d458      	bmi.n	8008278 <__sflush_r+0xc0>
 80081c6:	684b      	ldr	r3, [r1, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc05      	bgt.n	80081d8 <__sflush_r+0x20>
 80081cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dc02      	bgt.n	80081d8 <__sflush_r+0x20>
 80081d2:	2000      	movs	r0, #0
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d0f9      	beq.n	80081d2 <__sflush_r+0x1a>
 80081de:	2300      	movs	r3, #0
 80081e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081e4:	682f      	ldr	r7, [r5, #0]
 80081e6:	6a21      	ldr	r1, [r4, #32]
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	d032      	beq.n	8008252 <__sflush_r+0x9a>
 80081ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	075a      	lsls	r2, r3, #29
 80081f2:	d505      	bpl.n	8008200 <__sflush_r+0x48>
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	1ac0      	subs	r0, r0, r3
 80081f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081fa:	b10b      	cbz	r3, 8008200 <__sflush_r+0x48>
 80081fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081fe:	1ac0      	subs	r0, r0, r3
 8008200:	2300      	movs	r3, #0
 8008202:	4602      	mov	r2, r0
 8008204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008206:	6a21      	ldr	r1, [r4, #32]
 8008208:	4628      	mov	r0, r5
 800820a:	47b0      	blx	r6
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	d106      	bne.n	8008220 <__sflush_r+0x68>
 8008212:	6829      	ldr	r1, [r5, #0]
 8008214:	291d      	cmp	r1, #29
 8008216:	d848      	bhi.n	80082aa <__sflush_r+0xf2>
 8008218:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <__sflush_r+0x108>)
 800821a:	40ca      	lsrs	r2, r1
 800821c:	07d6      	lsls	r6, r2, #31
 800821e:	d544      	bpl.n	80082aa <__sflush_r+0xf2>
 8008220:	2200      	movs	r2, #0
 8008222:	6062      	str	r2, [r4, #4]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	04d9      	lsls	r1, r3, #19
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	d504      	bpl.n	8008236 <__sflush_r+0x7e>
 800822c:	1c42      	adds	r2, r0, #1
 800822e:	d101      	bne.n	8008234 <__sflush_r+0x7c>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b903      	cbnz	r3, 8008236 <__sflush_r+0x7e>
 8008234:	6560      	str	r0, [r4, #84]	; 0x54
 8008236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008238:	602f      	str	r7, [r5, #0]
 800823a:	2900      	cmp	r1, #0
 800823c:	d0c9      	beq.n	80081d2 <__sflush_r+0x1a>
 800823e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008242:	4299      	cmp	r1, r3
 8008244:	d002      	beq.n	800824c <__sflush_r+0x94>
 8008246:	4628      	mov	r0, r5
 8008248:	f000 f994 	bl	8008574 <_free_r>
 800824c:	2000      	movs	r0, #0
 800824e:	6360      	str	r0, [r4, #52]	; 0x34
 8008250:	e7c0      	b.n	80081d4 <__sflush_r+0x1c>
 8008252:	2301      	movs	r3, #1
 8008254:	4628      	mov	r0, r5
 8008256:	47b0      	blx	r6
 8008258:	1c41      	adds	r1, r0, #1
 800825a:	d1c8      	bne.n	80081ee <__sflush_r+0x36>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c5      	beq.n	80081ee <__sflush_r+0x36>
 8008262:	2b1d      	cmp	r3, #29
 8008264:	d001      	beq.n	800826a <__sflush_r+0xb2>
 8008266:	2b16      	cmp	r3, #22
 8008268:	d101      	bne.n	800826e <__sflush_r+0xb6>
 800826a:	602f      	str	r7, [r5, #0]
 800826c:	e7b1      	b.n	80081d2 <__sflush_r+0x1a>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	e7ad      	b.n	80081d4 <__sflush_r+0x1c>
 8008278:	690f      	ldr	r7, [r1, #16]
 800827a:	2f00      	cmp	r7, #0
 800827c:	d0a9      	beq.n	80081d2 <__sflush_r+0x1a>
 800827e:	0793      	lsls	r3, r2, #30
 8008280:	bf18      	it	ne
 8008282:	2300      	movne	r3, #0
 8008284:	680e      	ldr	r6, [r1, #0]
 8008286:	bf08      	it	eq
 8008288:	694b      	ldreq	r3, [r1, #20]
 800828a:	eba6 0807 	sub.w	r8, r6, r7
 800828e:	600f      	str	r7, [r1, #0]
 8008290:	608b      	str	r3, [r1, #8]
 8008292:	f1b8 0f00 	cmp.w	r8, #0
 8008296:	dd9c      	ble.n	80081d2 <__sflush_r+0x1a>
 8008298:	4643      	mov	r3, r8
 800829a:	463a      	mov	r2, r7
 800829c:	6a21      	ldr	r1, [r4, #32]
 800829e:	4628      	mov	r0, r5
 80082a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082a2:	47b0      	blx	r6
 80082a4:	2800      	cmp	r0, #0
 80082a6:	dc06      	bgt.n	80082b6 <__sflush_r+0xfe>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e78e      	b.n	80081d4 <__sflush_r+0x1c>
 80082b6:	4407      	add	r7, r0
 80082b8:	eba8 0800 	sub.w	r8, r8, r0
 80082bc:	e7e9      	b.n	8008292 <__sflush_r+0xda>
 80082be:	bf00      	nop
 80082c0:	20400001 	.word	0x20400001

080082c4 <_fflush_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	4605      	mov	r5, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	b1db      	cbz	r3, 8008306 <_fflush_r+0x42>
 80082ce:	b118      	cbz	r0, 80082d8 <_fflush_r+0x14>
 80082d0:	6983      	ldr	r3, [r0, #24]
 80082d2:	b90b      	cbnz	r3, 80082d8 <_fflush_r+0x14>
 80082d4:	f000 f860 	bl	8008398 <__sinit>
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <_fflush_r+0x48>)
 80082da:	429c      	cmp	r4, r3
 80082dc:	d109      	bne.n	80082f2 <_fflush_r+0x2e>
 80082de:	686c      	ldr	r4, [r5, #4]
 80082e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e4:	b17b      	cbz	r3, 8008306 <_fflush_r+0x42>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ee:	f7ff bf63 	b.w	80081b8 <__sflush_r>
 80082f2:	4b07      	ldr	r3, [pc, #28]	; (8008310 <_fflush_r+0x4c>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	d101      	bne.n	80082fc <_fflush_r+0x38>
 80082f8:	68ac      	ldr	r4, [r5, #8]
 80082fa:	e7f1      	b.n	80082e0 <_fflush_r+0x1c>
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <_fflush_r+0x50>)
 80082fe:	429c      	cmp	r4, r3
 8008300:	bf08      	it	eq
 8008302:	68ec      	ldreq	r4, [r5, #12]
 8008304:	e7ec      	b.n	80082e0 <_fflush_r+0x1c>
 8008306:	2000      	movs	r0, #0
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	08009028 	.word	0x08009028
 8008310:	08009048 	.word	0x08009048
 8008314:	08009008 	.word	0x08009008

08008318 <std>:
 8008318:	2300      	movs	r3, #0
 800831a:	b510      	push	{r4, lr}
 800831c:	4604      	mov	r4, r0
 800831e:	e9c0 3300 	strd	r3, r3, [r0]
 8008322:	6083      	str	r3, [r0, #8]
 8008324:	8181      	strh	r1, [r0, #12]
 8008326:	6643      	str	r3, [r0, #100]	; 0x64
 8008328:	81c2      	strh	r2, [r0, #14]
 800832a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800832e:	6183      	str	r3, [r0, #24]
 8008330:	4619      	mov	r1, r3
 8008332:	2208      	movs	r2, #8
 8008334:	305c      	adds	r0, #92	; 0x5c
 8008336:	f7ff fdf2 	bl	8007f1e <memset>
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <std+0x38>)
 800833c:	6224      	str	r4, [r4, #32]
 800833e:	6263      	str	r3, [r4, #36]	; 0x24
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <std+0x3c>)
 8008342:	62a3      	str	r3, [r4, #40]	; 0x28
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <std+0x40>)
 8008346:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <std+0x44>)
 800834a:	6323      	str	r3, [r4, #48]	; 0x30
 800834c:	bd10      	pop	{r4, pc}
 800834e:	bf00      	nop
 8008350:	08008c6d 	.word	0x08008c6d
 8008354:	08008c8f 	.word	0x08008c8f
 8008358:	08008cc7 	.word	0x08008cc7
 800835c:	08008ceb 	.word	0x08008ceb

08008360 <_cleanup_r>:
 8008360:	4901      	ldr	r1, [pc, #4]	; (8008368 <_cleanup_r+0x8>)
 8008362:	f000 b885 	b.w	8008470 <_fwalk_reent>
 8008366:	bf00      	nop
 8008368:	080082c5 	.word	0x080082c5

0800836c <__sfmoreglue>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	2568      	movs	r5, #104	; 0x68
 8008370:	1e4a      	subs	r2, r1, #1
 8008372:	4355      	muls	r5, r2
 8008374:	460e      	mov	r6, r1
 8008376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800837a:	f000 f947 	bl	800860c <_malloc_r>
 800837e:	4604      	mov	r4, r0
 8008380:	b140      	cbz	r0, 8008394 <__sfmoreglue+0x28>
 8008382:	2100      	movs	r1, #0
 8008384:	e9c0 1600 	strd	r1, r6, [r0]
 8008388:	300c      	adds	r0, #12
 800838a:	60a0      	str	r0, [r4, #8]
 800838c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008390:	f7ff fdc5 	bl	8007f1e <memset>
 8008394:	4620      	mov	r0, r4
 8008396:	bd70      	pop	{r4, r5, r6, pc}

08008398 <__sinit>:
 8008398:	6983      	ldr	r3, [r0, #24]
 800839a:	b510      	push	{r4, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	bb33      	cbnz	r3, 80083ee <__sinit+0x56>
 80083a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80083a4:	6503      	str	r3, [r0, #80]	; 0x50
 80083a6:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <__sinit+0x58>)
 80083a8:	4a12      	ldr	r2, [pc, #72]	; (80083f4 <__sinit+0x5c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6282      	str	r2, [r0, #40]	; 0x28
 80083ae:	4298      	cmp	r0, r3
 80083b0:	bf04      	itt	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	6183      	streq	r3, [r0, #24]
 80083b6:	f000 f81f 	bl	80083f8 <__sfp>
 80083ba:	6060      	str	r0, [r4, #4]
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f81b 	bl	80083f8 <__sfp>
 80083c2:	60a0      	str	r0, [r4, #8]
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f817 	bl	80083f8 <__sfp>
 80083ca:	2200      	movs	r2, #0
 80083cc:	60e0      	str	r0, [r4, #12]
 80083ce:	2104      	movs	r1, #4
 80083d0:	6860      	ldr	r0, [r4, #4]
 80083d2:	f7ff ffa1 	bl	8008318 <std>
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	68a0      	ldr	r0, [r4, #8]
 80083dc:	f7ff ff9c 	bl	8008318 <std>
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	68e0      	ldr	r0, [r4, #12]
 80083e6:	f7ff ff97 	bl	8008318 <std>
 80083ea:	2301      	movs	r3, #1
 80083ec:	61a3      	str	r3, [r4, #24]
 80083ee:	bd10      	pop	{r4, pc}
 80083f0:	08009004 	.word	0x08009004
 80083f4:	08008361 	.word	0x08008361

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <__sfp+0x70>)
 80083fc:	4607      	mov	r7, r0
 80083fe:	681e      	ldr	r6, [r3, #0]
 8008400:	69b3      	ldr	r3, [r6, #24]
 8008402:	b913      	cbnz	r3, 800840a <__sfp+0x12>
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff ffc7 	bl	8008398 <__sinit>
 800840a:	3648      	adds	r6, #72	; 0x48
 800840c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008410:	3b01      	subs	r3, #1
 8008412:	d503      	bpl.n	800841c <__sfp+0x24>
 8008414:	6833      	ldr	r3, [r6, #0]
 8008416:	b133      	cbz	r3, 8008426 <__sfp+0x2e>
 8008418:	6836      	ldr	r6, [r6, #0]
 800841a:	e7f7      	b.n	800840c <__sfp+0x14>
 800841c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008420:	b16d      	cbz	r5, 800843e <__sfp+0x46>
 8008422:	3468      	adds	r4, #104	; 0x68
 8008424:	e7f4      	b.n	8008410 <__sfp+0x18>
 8008426:	2104      	movs	r1, #4
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff ff9f 	bl	800836c <__sfmoreglue>
 800842e:	6030      	str	r0, [r6, #0]
 8008430:	2800      	cmp	r0, #0
 8008432:	d1f1      	bne.n	8008418 <__sfp+0x20>
 8008434:	230c      	movs	r3, #12
 8008436:	4604      	mov	r4, r0
 8008438:	603b      	str	r3, [r7, #0]
 800843a:	4620      	mov	r0, r4
 800843c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <__sfp+0x74>)
 8008440:	6665      	str	r5, [r4, #100]	; 0x64
 8008442:	e9c4 5500 	strd	r5, r5, [r4]
 8008446:	60a5      	str	r5, [r4, #8]
 8008448:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800844c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008450:	2208      	movs	r2, #8
 8008452:	4629      	mov	r1, r5
 8008454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008458:	f7ff fd61 	bl	8007f1e <memset>
 800845c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008464:	e7e9      	b.n	800843a <__sfp+0x42>
 8008466:	bf00      	nop
 8008468:	08009004 	.word	0x08009004
 800846c:	ffff0001 	.word	0xffff0001

08008470 <_fwalk_reent>:
 8008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008474:	4680      	mov	r8, r0
 8008476:	4689      	mov	r9, r1
 8008478:	2600      	movs	r6, #0
 800847a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800847e:	b914      	cbnz	r4, 8008486 <_fwalk_reent+0x16>
 8008480:	4630      	mov	r0, r6
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800848a:	3f01      	subs	r7, #1
 800848c:	d501      	bpl.n	8008492 <_fwalk_reent+0x22>
 800848e:	6824      	ldr	r4, [r4, #0]
 8008490:	e7f5      	b.n	800847e <_fwalk_reent+0xe>
 8008492:	89ab      	ldrh	r3, [r5, #12]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d907      	bls.n	80084a8 <_fwalk_reent+0x38>
 8008498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800849c:	3301      	adds	r3, #1
 800849e:	d003      	beq.n	80084a8 <_fwalk_reent+0x38>
 80084a0:	4629      	mov	r1, r5
 80084a2:	4640      	mov	r0, r8
 80084a4:	47c8      	blx	r9
 80084a6:	4306      	orrs	r6, r0
 80084a8:	3568      	adds	r5, #104	; 0x68
 80084aa:	e7ee      	b.n	800848a <_fwalk_reent+0x1a>

080084ac <__swhatbuf_r>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	460e      	mov	r6, r1
 80084b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b4:	b096      	sub	sp, #88	; 0x58
 80084b6:	2900      	cmp	r1, #0
 80084b8:	4614      	mov	r4, r2
 80084ba:	461d      	mov	r5, r3
 80084bc:	da07      	bge.n	80084ce <__swhatbuf_r+0x22>
 80084be:	2300      	movs	r3, #0
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	89b3      	ldrh	r3, [r6, #12]
 80084c4:	061a      	lsls	r2, r3, #24
 80084c6:	d410      	bmi.n	80084ea <__swhatbuf_r+0x3e>
 80084c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084cc:	e00e      	b.n	80084ec <__swhatbuf_r+0x40>
 80084ce:	466a      	mov	r2, sp
 80084d0:	f000 fc32 	bl	8008d38 <_fstat_r>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	dbf2      	blt.n	80084be <__swhatbuf_r+0x12>
 80084d8:	9a01      	ldr	r2, [sp, #4]
 80084da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084e2:	425a      	negs	r2, r3
 80084e4:	415a      	adcs	r2, r3
 80084e6:	602a      	str	r2, [r5, #0]
 80084e8:	e7ee      	b.n	80084c8 <__swhatbuf_r+0x1c>
 80084ea:	2340      	movs	r3, #64	; 0x40
 80084ec:	2000      	movs	r0, #0
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	b016      	add	sp, #88	; 0x58
 80084f2:	bd70      	pop	{r4, r5, r6, pc}

080084f4 <__smakebuf_r>:
 80084f4:	898b      	ldrh	r3, [r1, #12]
 80084f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084f8:	079d      	lsls	r5, r3, #30
 80084fa:	4606      	mov	r6, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	d507      	bpl.n	8008510 <__smakebuf_r+0x1c>
 8008500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	6123      	str	r3, [r4, #16]
 8008508:	2301      	movs	r3, #1
 800850a:	6163      	str	r3, [r4, #20]
 800850c:	b002      	add	sp, #8
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	ab01      	add	r3, sp, #4
 8008512:	466a      	mov	r2, sp
 8008514:	f7ff ffca 	bl	80084ac <__swhatbuf_r>
 8008518:	9900      	ldr	r1, [sp, #0]
 800851a:	4605      	mov	r5, r0
 800851c:	4630      	mov	r0, r6
 800851e:	f000 f875 	bl	800860c <_malloc_r>
 8008522:	b948      	cbnz	r0, 8008538 <__smakebuf_r+0x44>
 8008524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008528:	059a      	lsls	r2, r3, #22
 800852a:	d4ef      	bmi.n	800850c <__smakebuf_r+0x18>
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	f043 0302 	orr.w	r3, r3, #2
 8008534:	81a3      	strh	r3, [r4, #12]
 8008536:	e7e3      	b.n	8008500 <__smakebuf_r+0xc>
 8008538:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <__smakebuf_r+0x7c>)
 800853a:	62b3      	str	r3, [r6, #40]	; 0x28
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	6020      	str	r0, [r4, #0]
 8008540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	6120      	str	r0, [r4, #16]
 800854a:	6163      	str	r3, [r4, #20]
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	b15b      	cbz	r3, 8008568 <__smakebuf_r+0x74>
 8008550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008554:	4630      	mov	r0, r6
 8008556:	f000 fc01 	bl	8008d5c <_isatty_r>
 800855a:	b128      	cbz	r0, 8008568 <__smakebuf_r+0x74>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	431d      	orrs	r5, r3
 800856c:	81a5      	strh	r5, [r4, #12]
 800856e:	e7cd      	b.n	800850c <__smakebuf_r+0x18>
 8008570:	08008361 	.word	0x08008361

08008574 <_free_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4605      	mov	r5, r0
 8008578:	2900      	cmp	r1, #0
 800857a:	d043      	beq.n	8008604 <_free_r+0x90>
 800857c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008580:	1f0c      	subs	r4, r1, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	bfb8      	it	lt
 8008586:	18e4      	addlt	r4, r4, r3
 8008588:	f000 fc18 	bl	8008dbc <__malloc_lock>
 800858c:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <_free_r+0x94>)
 800858e:	6813      	ldr	r3, [r2, #0]
 8008590:	4610      	mov	r0, r2
 8008592:	b933      	cbnz	r3, 80085a2 <_free_r+0x2e>
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	6014      	str	r4, [r2, #0]
 8008598:	4628      	mov	r0, r5
 800859a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859e:	f000 bc0e 	b.w	8008dbe <__malloc_unlock>
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	d90b      	bls.n	80085be <_free_r+0x4a>
 80085a6:	6821      	ldr	r1, [r4, #0]
 80085a8:	1862      	adds	r2, r4, r1
 80085aa:	4293      	cmp	r3, r2
 80085ac:	bf01      	itttt	eq
 80085ae:	681a      	ldreq	r2, [r3, #0]
 80085b0:	685b      	ldreq	r3, [r3, #4]
 80085b2:	1852      	addeq	r2, r2, r1
 80085b4:	6022      	streq	r2, [r4, #0]
 80085b6:	6063      	str	r3, [r4, #4]
 80085b8:	6004      	str	r4, [r0, #0]
 80085ba:	e7ed      	b.n	8008598 <_free_r+0x24>
 80085bc:	4613      	mov	r3, r2
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	b10a      	cbz	r2, 80085c6 <_free_r+0x52>
 80085c2:	42a2      	cmp	r2, r4
 80085c4:	d9fa      	bls.n	80085bc <_free_r+0x48>
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	1858      	adds	r0, r3, r1
 80085ca:	42a0      	cmp	r0, r4
 80085cc:	d10b      	bne.n	80085e6 <_free_r+0x72>
 80085ce:	6820      	ldr	r0, [r4, #0]
 80085d0:	4401      	add	r1, r0
 80085d2:	1858      	adds	r0, r3, r1
 80085d4:	4282      	cmp	r2, r0
 80085d6:	6019      	str	r1, [r3, #0]
 80085d8:	d1de      	bne.n	8008598 <_free_r+0x24>
 80085da:	6810      	ldr	r0, [r2, #0]
 80085dc:	6852      	ldr	r2, [r2, #4]
 80085de:	4401      	add	r1, r0
 80085e0:	6019      	str	r1, [r3, #0]
 80085e2:	605a      	str	r2, [r3, #4]
 80085e4:	e7d8      	b.n	8008598 <_free_r+0x24>
 80085e6:	d902      	bls.n	80085ee <_free_r+0x7a>
 80085e8:	230c      	movs	r3, #12
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	e7d4      	b.n	8008598 <_free_r+0x24>
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	1821      	adds	r1, r4, r0
 80085f2:	428a      	cmp	r2, r1
 80085f4:	bf01      	itttt	eq
 80085f6:	6811      	ldreq	r1, [r2, #0]
 80085f8:	6852      	ldreq	r2, [r2, #4]
 80085fa:	1809      	addeq	r1, r1, r0
 80085fc:	6021      	streq	r1, [r4, #0]
 80085fe:	6062      	str	r2, [r4, #4]
 8008600:	605c      	str	r4, [r3, #4]
 8008602:	e7c9      	b.n	8008598 <_free_r+0x24>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	200004e0 	.word	0x200004e0

0800860c <_malloc_r>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	1ccd      	adds	r5, r1, #3
 8008610:	f025 0503 	bic.w	r5, r5, #3
 8008614:	3508      	adds	r5, #8
 8008616:	2d0c      	cmp	r5, #12
 8008618:	bf38      	it	cc
 800861a:	250c      	movcc	r5, #12
 800861c:	2d00      	cmp	r5, #0
 800861e:	4606      	mov	r6, r0
 8008620:	db01      	blt.n	8008626 <_malloc_r+0x1a>
 8008622:	42a9      	cmp	r1, r5
 8008624:	d903      	bls.n	800862e <_malloc_r+0x22>
 8008626:	230c      	movs	r3, #12
 8008628:	6033      	str	r3, [r6, #0]
 800862a:	2000      	movs	r0, #0
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	f000 fbc5 	bl	8008dbc <__malloc_lock>
 8008632:	4a21      	ldr	r2, [pc, #132]	; (80086b8 <_malloc_r+0xac>)
 8008634:	6814      	ldr	r4, [r2, #0]
 8008636:	4621      	mov	r1, r4
 8008638:	b991      	cbnz	r1, 8008660 <_malloc_r+0x54>
 800863a:	4c20      	ldr	r4, [pc, #128]	; (80086bc <_malloc_r+0xb0>)
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	b91b      	cbnz	r3, 8008648 <_malloc_r+0x3c>
 8008640:	4630      	mov	r0, r6
 8008642:	f000 fb03 	bl	8008c4c <_sbrk_r>
 8008646:	6020      	str	r0, [r4, #0]
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f000 fafe 	bl	8008c4c <_sbrk_r>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d124      	bne.n	800869e <_malloc_r+0x92>
 8008654:	230c      	movs	r3, #12
 8008656:	4630      	mov	r0, r6
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	f000 fbb0 	bl	8008dbe <__malloc_unlock>
 800865e:	e7e4      	b.n	800862a <_malloc_r+0x1e>
 8008660:	680b      	ldr	r3, [r1, #0]
 8008662:	1b5b      	subs	r3, r3, r5
 8008664:	d418      	bmi.n	8008698 <_malloc_r+0x8c>
 8008666:	2b0b      	cmp	r3, #11
 8008668:	d90f      	bls.n	800868a <_malloc_r+0x7e>
 800866a:	600b      	str	r3, [r1, #0]
 800866c:	18cc      	adds	r4, r1, r3
 800866e:	50cd      	str	r5, [r1, r3]
 8008670:	4630      	mov	r0, r6
 8008672:	f000 fba4 	bl	8008dbe <__malloc_unlock>
 8008676:	f104 000b 	add.w	r0, r4, #11
 800867a:	1d23      	adds	r3, r4, #4
 800867c:	f020 0007 	bic.w	r0, r0, #7
 8008680:	1ac3      	subs	r3, r0, r3
 8008682:	d0d3      	beq.n	800862c <_malloc_r+0x20>
 8008684:	425a      	negs	r2, r3
 8008686:	50e2      	str	r2, [r4, r3]
 8008688:	e7d0      	b.n	800862c <_malloc_r+0x20>
 800868a:	684b      	ldr	r3, [r1, #4]
 800868c:	428c      	cmp	r4, r1
 800868e:	bf16      	itet	ne
 8008690:	6063      	strne	r3, [r4, #4]
 8008692:	6013      	streq	r3, [r2, #0]
 8008694:	460c      	movne	r4, r1
 8008696:	e7eb      	b.n	8008670 <_malloc_r+0x64>
 8008698:	460c      	mov	r4, r1
 800869a:	6849      	ldr	r1, [r1, #4]
 800869c:	e7cc      	b.n	8008638 <_malloc_r+0x2c>
 800869e:	1cc4      	adds	r4, r0, #3
 80086a0:	f024 0403 	bic.w	r4, r4, #3
 80086a4:	42a0      	cmp	r0, r4
 80086a6:	d005      	beq.n	80086b4 <_malloc_r+0xa8>
 80086a8:	1a21      	subs	r1, r4, r0
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 face 	bl	8008c4c <_sbrk_r>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d0cf      	beq.n	8008654 <_malloc_r+0x48>
 80086b4:	6025      	str	r5, [r4, #0]
 80086b6:	e7db      	b.n	8008670 <_malloc_r+0x64>
 80086b8:	200004e0 	.word	0x200004e0
 80086bc:	200004e4 	.word	0x200004e4

080086c0 <__sfputc_r>:
 80086c0:	6893      	ldr	r3, [r2, #8]
 80086c2:	b410      	push	{r4}
 80086c4:	3b01      	subs	r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	6093      	str	r3, [r2, #8]
 80086ca:	da07      	bge.n	80086dc <__sfputc_r+0x1c>
 80086cc:	6994      	ldr	r4, [r2, #24]
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	db01      	blt.n	80086d6 <__sfputc_r+0x16>
 80086d2:	290a      	cmp	r1, #10
 80086d4:	d102      	bne.n	80086dc <__sfputc_r+0x1c>
 80086d6:	bc10      	pop	{r4}
 80086d8:	f7ff bcae 	b.w	8008038 <__swbuf_r>
 80086dc:	6813      	ldr	r3, [r2, #0]
 80086de:	1c58      	adds	r0, r3, #1
 80086e0:	6010      	str	r0, [r2, #0]
 80086e2:	7019      	strb	r1, [r3, #0]
 80086e4:	4608      	mov	r0, r1
 80086e6:	bc10      	pop	{r4}
 80086e8:	4770      	bx	lr

080086ea <__sfputs_r>:
 80086ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ec:	4606      	mov	r6, r0
 80086ee:	460f      	mov	r7, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	18d5      	adds	r5, r2, r3
 80086f4:	42ac      	cmp	r4, r5
 80086f6:	d101      	bne.n	80086fc <__sfputs_r+0x12>
 80086f8:	2000      	movs	r0, #0
 80086fa:	e007      	b.n	800870c <__sfputs_r+0x22>
 80086fc:	463a      	mov	r2, r7
 80086fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008702:	4630      	mov	r0, r6
 8008704:	f7ff ffdc 	bl	80086c0 <__sfputc_r>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d1f3      	bne.n	80086f4 <__sfputs_r+0xa>
 800870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008710 <_vfiprintf_r>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	b09d      	sub	sp, #116	; 0x74
 8008718:	4617      	mov	r7, r2
 800871a:	461d      	mov	r5, r3
 800871c:	4606      	mov	r6, r0
 800871e:	b118      	cbz	r0, 8008728 <_vfiprintf_r+0x18>
 8008720:	6983      	ldr	r3, [r0, #24]
 8008722:	b90b      	cbnz	r3, 8008728 <_vfiprintf_r+0x18>
 8008724:	f7ff fe38 	bl	8008398 <__sinit>
 8008728:	4b7c      	ldr	r3, [pc, #496]	; (800891c <_vfiprintf_r+0x20c>)
 800872a:	429c      	cmp	r4, r3
 800872c:	d158      	bne.n	80087e0 <_vfiprintf_r+0xd0>
 800872e:	6874      	ldr	r4, [r6, #4]
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	0718      	lsls	r0, r3, #28
 8008734:	d55e      	bpl.n	80087f4 <_vfiprintf_r+0xe4>
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d05b      	beq.n	80087f4 <_vfiprintf_r+0xe4>
 800873c:	2300      	movs	r3, #0
 800873e:	9309      	str	r3, [sp, #36]	; 0x24
 8008740:	2320      	movs	r3, #32
 8008742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008746:	2330      	movs	r3, #48	; 0x30
 8008748:	f04f 0b01 	mov.w	fp, #1
 800874c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008750:	9503      	str	r5, [sp, #12]
 8008752:	46b8      	mov	r8, r7
 8008754:	4645      	mov	r5, r8
 8008756:	f815 3b01 	ldrb.w	r3, [r5], #1
 800875a:	b10b      	cbz	r3, 8008760 <_vfiprintf_r+0x50>
 800875c:	2b25      	cmp	r3, #37	; 0x25
 800875e:	d154      	bne.n	800880a <_vfiprintf_r+0xfa>
 8008760:	ebb8 0a07 	subs.w	sl, r8, r7
 8008764:	d00b      	beq.n	800877e <_vfiprintf_r+0x6e>
 8008766:	4653      	mov	r3, sl
 8008768:	463a      	mov	r2, r7
 800876a:	4621      	mov	r1, r4
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff ffbc 	bl	80086ea <__sfputs_r>
 8008772:	3001      	adds	r0, #1
 8008774:	f000 80c2 	beq.w	80088fc <_vfiprintf_r+0x1ec>
 8008778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877a:	4453      	add	r3, sl
 800877c:	9309      	str	r3, [sp, #36]	; 0x24
 800877e:	f898 3000 	ldrb.w	r3, [r8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 80ba 	beq.w	80088fc <_vfiprintf_r+0x1ec>
 8008788:	2300      	movs	r3, #0
 800878a:	f04f 32ff 	mov.w	r2, #4294967295
 800878e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	9307      	str	r3, [sp, #28]
 8008796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800879a:	931a      	str	r3, [sp, #104]	; 0x68
 800879c:	46a8      	mov	r8, r5
 800879e:	2205      	movs	r2, #5
 80087a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80087a4:	485e      	ldr	r0, [pc, #376]	; (8008920 <_vfiprintf_r+0x210>)
 80087a6:	f000 fafb 	bl	8008da0 <memchr>
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	bb78      	cbnz	r0, 800880e <_vfiprintf_r+0xfe>
 80087ae:	06d9      	lsls	r1, r3, #27
 80087b0:	bf44      	itt	mi
 80087b2:	2220      	movmi	r2, #32
 80087b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087b8:	071a      	lsls	r2, r3, #28
 80087ba:	bf44      	itt	mi
 80087bc:	222b      	movmi	r2, #43	; 0x2b
 80087be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087c2:	782a      	ldrb	r2, [r5, #0]
 80087c4:	2a2a      	cmp	r2, #42	; 0x2a
 80087c6:	d02a      	beq.n	800881e <_vfiprintf_r+0x10e>
 80087c8:	46a8      	mov	r8, r5
 80087ca:	2000      	movs	r0, #0
 80087cc:	250a      	movs	r5, #10
 80087ce:	9a07      	ldr	r2, [sp, #28]
 80087d0:	4641      	mov	r1, r8
 80087d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d6:	3b30      	subs	r3, #48	; 0x30
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d969      	bls.n	80088b0 <_vfiprintf_r+0x1a0>
 80087dc:	b360      	cbz	r0, 8008838 <_vfiprintf_r+0x128>
 80087de:	e024      	b.n	800882a <_vfiprintf_r+0x11a>
 80087e0:	4b50      	ldr	r3, [pc, #320]	; (8008924 <_vfiprintf_r+0x214>)
 80087e2:	429c      	cmp	r4, r3
 80087e4:	d101      	bne.n	80087ea <_vfiprintf_r+0xda>
 80087e6:	68b4      	ldr	r4, [r6, #8]
 80087e8:	e7a2      	b.n	8008730 <_vfiprintf_r+0x20>
 80087ea:	4b4f      	ldr	r3, [pc, #316]	; (8008928 <_vfiprintf_r+0x218>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	bf08      	it	eq
 80087f0:	68f4      	ldreq	r4, [r6, #12]
 80087f2:	e79d      	b.n	8008730 <_vfiprintf_r+0x20>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7ff fc70 	bl	80080dc <__swsetup_r>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d09d      	beq.n	800873c <_vfiprintf_r+0x2c>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	b01d      	add	sp, #116	; 0x74
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	46a8      	mov	r8, r5
 800880c:	e7a2      	b.n	8008754 <_vfiprintf_r+0x44>
 800880e:	4a44      	ldr	r2, [pc, #272]	; (8008920 <_vfiprintf_r+0x210>)
 8008810:	4645      	mov	r5, r8
 8008812:	1a80      	subs	r0, r0, r2
 8008814:	fa0b f000 	lsl.w	r0, fp, r0
 8008818:	4318      	orrs	r0, r3
 800881a:	9004      	str	r0, [sp, #16]
 800881c:	e7be      	b.n	800879c <_vfiprintf_r+0x8c>
 800881e:	9a03      	ldr	r2, [sp, #12]
 8008820:	1d11      	adds	r1, r2, #4
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	9103      	str	r1, [sp, #12]
 8008826:	2a00      	cmp	r2, #0
 8008828:	db01      	blt.n	800882e <_vfiprintf_r+0x11e>
 800882a:	9207      	str	r2, [sp, #28]
 800882c:	e004      	b.n	8008838 <_vfiprintf_r+0x128>
 800882e:	4252      	negs	r2, r2
 8008830:	f043 0302 	orr.w	r3, r3, #2
 8008834:	9207      	str	r2, [sp, #28]
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	f898 3000 	ldrb.w	r3, [r8]
 800883c:	2b2e      	cmp	r3, #46	; 0x2e
 800883e:	d10e      	bne.n	800885e <_vfiprintf_r+0x14e>
 8008840:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008844:	2b2a      	cmp	r3, #42	; 0x2a
 8008846:	d138      	bne.n	80088ba <_vfiprintf_r+0x1aa>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	f108 0802 	add.w	r8, r8, #2
 800884e:	1d1a      	adds	r2, r3, #4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	9203      	str	r2, [sp, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	bfb8      	it	lt
 8008858:	f04f 33ff 	movlt.w	r3, #4294967295
 800885c:	9305      	str	r3, [sp, #20]
 800885e:	4d33      	ldr	r5, [pc, #204]	; (800892c <_vfiprintf_r+0x21c>)
 8008860:	2203      	movs	r2, #3
 8008862:	f898 1000 	ldrb.w	r1, [r8]
 8008866:	4628      	mov	r0, r5
 8008868:	f000 fa9a 	bl	8008da0 <memchr>
 800886c:	b140      	cbz	r0, 8008880 <_vfiprintf_r+0x170>
 800886e:	2340      	movs	r3, #64	; 0x40
 8008870:	1b40      	subs	r0, r0, r5
 8008872:	fa03 f000 	lsl.w	r0, r3, r0
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	f108 0801 	add.w	r8, r8, #1
 800887c:	4303      	orrs	r3, r0
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	f898 1000 	ldrb.w	r1, [r8]
 8008884:	2206      	movs	r2, #6
 8008886:	482a      	ldr	r0, [pc, #168]	; (8008930 <_vfiprintf_r+0x220>)
 8008888:	f108 0701 	add.w	r7, r8, #1
 800888c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008890:	f000 fa86 	bl	8008da0 <memchr>
 8008894:	2800      	cmp	r0, #0
 8008896:	d037      	beq.n	8008908 <_vfiprintf_r+0x1f8>
 8008898:	4b26      	ldr	r3, [pc, #152]	; (8008934 <_vfiprintf_r+0x224>)
 800889a:	bb1b      	cbnz	r3, 80088e4 <_vfiprintf_r+0x1d4>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	3307      	adds	r3, #7
 80088a0:	f023 0307 	bic.w	r3, r3, #7
 80088a4:	3308      	adds	r3, #8
 80088a6:	9303      	str	r3, [sp, #12]
 80088a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088aa:	444b      	add	r3, r9
 80088ac:	9309      	str	r3, [sp, #36]	; 0x24
 80088ae:	e750      	b.n	8008752 <_vfiprintf_r+0x42>
 80088b0:	fb05 3202 	mla	r2, r5, r2, r3
 80088b4:	2001      	movs	r0, #1
 80088b6:	4688      	mov	r8, r1
 80088b8:	e78a      	b.n	80087d0 <_vfiprintf_r+0xc0>
 80088ba:	2300      	movs	r3, #0
 80088bc:	250a      	movs	r5, #10
 80088be:	4619      	mov	r1, r3
 80088c0:	f108 0801 	add.w	r8, r8, #1
 80088c4:	9305      	str	r3, [sp, #20]
 80088c6:	4640      	mov	r0, r8
 80088c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088cc:	3a30      	subs	r2, #48	; 0x30
 80088ce:	2a09      	cmp	r2, #9
 80088d0:	d903      	bls.n	80088da <_vfiprintf_r+0x1ca>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0c3      	beq.n	800885e <_vfiprintf_r+0x14e>
 80088d6:	9105      	str	r1, [sp, #20]
 80088d8:	e7c1      	b.n	800885e <_vfiprintf_r+0x14e>
 80088da:	fb05 2101 	mla	r1, r5, r1, r2
 80088de:	2301      	movs	r3, #1
 80088e0:	4680      	mov	r8, r0
 80088e2:	e7f0      	b.n	80088c6 <_vfiprintf_r+0x1b6>
 80088e4:	ab03      	add	r3, sp, #12
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4622      	mov	r2, r4
 80088ea:	4b13      	ldr	r3, [pc, #76]	; (8008938 <_vfiprintf_r+0x228>)
 80088ec:	a904      	add	r1, sp, #16
 80088ee:	4630      	mov	r0, r6
 80088f0:	f3af 8000 	nop.w
 80088f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088f8:	4681      	mov	r9, r0
 80088fa:	d1d5      	bne.n	80088a8 <_vfiprintf_r+0x198>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	065b      	lsls	r3, r3, #25
 8008900:	f53f af7e 	bmi.w	8008800 <_vfiprintf_r+0xf0>
 8008904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008906:	e77d      	b.n	8008804 <_vfiprintf_r+0xf4>
 8008908:	ab03      	add	r3, sp, #12
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4622      	mov	r2, r4
 800890e:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <_vfiprintf_r+0x228>)
 8008910:	a904      	add	r1, sp, #16
 8008912:	4630      	mov	r0, r6
 8008914:	f000 f888 	bl	8008a28 <_printf_i>
 8008918:	e7ec      	b.n	80088f4 <_vfiprintf_r+0x1e4>
 800891a:	bf00      	nop
 800891c:	08009028 	.word	0x08009028
 8008920:	08009068 	.word	0x08009068
 8008924:	08009048 	.word	0x08009048
 8008928:	08009008 	.word	0x08009008
 800892c:	0800906e 	.word	0x0800906e
 8008930:	08009072 	.word	0x08009072
 8008934:	00000000 	.word	0x00000000
 8008938:	080086eb 	.word	0x080086eb

0800893c <_printf_common>:
 800893c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008940:	4691      	mov	r9, r2
 8008942:	461f      	mov	r7, r3
 8008944:	688a      	ldr	r2, [r1, #8]
 8008946:	690b      	ldr	r3, [r1, #16]
 8008948:	4606      	mov	r6, r0
 800894a:	4293      	cmp	r3, r2
 800894c:	bfb8      	it	lt
 800894e:	4613      	movlt	r3, r2
 8008950:	f8c9 3000 	str.w	r3, [r9]
 8008954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008958:	460c      	mov	r4, r1
 800895a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800895e:	b112      	cbz	r2, 8008966 <_printf_common+0x2a>
 8008960:	3301      	adds	r3, #1
 8008962:	f8c9 3000 	str.w	r3, [r9]
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	0699      	lsls	r1, r3, #26
 800896a:	bf42      	ittt	mi
 800896c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008970:	3302      	addmi	r3, #2
 8008972:	f8c9 3000 	strmi.w	r3, [r9]
 8008976:	6825      	ldr	r5, [r4, #0]
 8008978:	f015 0506 	ands.w	r5, r5, #6
 800897c:	d107      	bne.n	800898e <_printf_common+0x52>
 800897e:	f104 0a19 	add.w	sl, r4, #25
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	f8d9 2000 	ldr.w	r2, [r9]
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	42ab      	cmp	r3, r5
 800898c:	dc29      	bgt.n	80089e2 <_printf_common+0xa6>
 800898e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	3300      	adds	r3, #0
 8008996:	bf18      	it	ne
 8008998:	2301      	movne	r3, #1
 800899a:	0692      	lsls	r2, r2, #26
 800899c:	d42e      	bmi.n	80089fc <_printf_common+0xc0>
 800899e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089a2:	4639      	mov	r1, r7
 80089a4:	4630      	mov	r0, r6
 80089a6:	47c0      	blx	r8
 80089a8:	3001      	adds	r0, #1
 80089aa:	d021      	beq.n	80089f0 <_printf_common+0xb4>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	68e5      	ldr	r5, [r4, #12]
 80089b0:	f003 0306 	and.w	r3, r3, #6
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	bf18      	it	ne
 80089b8:	2500      	movne	r5, #0
 80089ba:	f8d9 2000 	ldr.w	r2, [r9]
 80089be:	f04f 0900 	mov.w	r9, #0
 80089c2:	bf08      	it	eq
 80089c4:	1aad      	subeq	r5, r5, r2
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	6922      	ldr	r2, [r4, #16]
 80089ca:	bf08      	it	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	4293      	cmp	r3, r2
 80089d2:	bfc4      	itt	gt
 80089d4:	1a9b      	subgt	r3, r3, r2
 80089d6:	18ed      	addgt	r5, r5, r3
 80089d8:	341a      	adds	r4, #26
 80089da:	454d      	cmp	r5, r9
 80089dc:	d11a      	bne.n	8008a14 <_printf_common+0xd8>
 80089de:	2000      	movs	r0, #0
 80089e0:	e008      	b.n	80089f4 <_printf_common+0xb8>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4652      	mov	r2, sl
 80089e6:	4639      	mov	r1, r7
 80089e8:	4630      	mov	r0, r6
 80089ea:	47c0      	blx	r8
 80089ec:	3001      	adds	r0, #1
 80089ee:	d103      	bne.n	80089f8 <_printf_common+0xbc>
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f8:	3501      	adds	r5, #1
 80089fa:	e7c2      	b.n	8008982 <_printf_common+0x46>
 80089fc:	2030      	movs	r0, #48	; 0x30
 80089fe:	18e1      	adds	r1, r4, r3
 8008a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a0a:	4422      	add	r2, r4
 8008a0c:	3302      	adds	r3, #2
 8008a0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a12:	e7c4      	b.n	800899e <_printf_common+0x62>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4622      	mov	r2, r4
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d0e6      	beq.n	80089f0 <_printf_common+0xb4>
 8008a22:	f109 0901 	add.w	r9, r9, #1
 8008a26:	e7d8      	b.n	80089da <_printf_common+0x9e>

08008a28 <_printf_i>:
 8008a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a30:	460c      	mov	r4, r1
 8008a32:	7e09      	ldrb	r1, [r1, #24]
 8008a34:	b085      	sub	sp, #20
 8008a36:	296e      	cmp	r1, #110	; 0x6e
 8008a38:	4617      	mov	r7, r2
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	4698      	mov	r8, r3
 8008a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a40:	f000 80b3 	beq.w	8008baa <_printf_i+0x182>
 8008a44:	d822      	bhi.n	8008a8c <_printf_i+0x64>
 8008a46:	2963      	cmp	r1, #99	; 0x63
 8008a48:	d036      	beq.n	8008ab8 <_printf_i+0x90>
 8008a4a:	d80a      	bhi.n	8008a62 <_printf_i+0x3a>
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	f000 80b9 	beq.w	8008bc4 <_printf_i+0x19c>
 8008a52:	2958      	cmp	r1, #88	; 0x58
 8008a54:	f000 8083 	beq.w	8008b5e <_printf_i+0x136>
 8008a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a60:	e032      	b.n	8008ac8 <_printf_i+0xa0>
 8008a62:	2964      	cmp	r1, #100	; 0x64
 8008a64:	d001      	beq.n	8008a6a <_printf_i+0x42>
 8008a66:	2969      	cmp	r1, #105	; 0x69
 8008a68:	d1f6      	bne.n	8008a58 <_printf_i+0x30>
 8008a6a:	6820      	ldr	r0, [r4, #0]
 8008a6c:	6813      	ldr	r3, [r2, #0]
 8008a6e:	0605      	lsls	r5, r0, #24
 8008a70:	f103 0104 	add.w	r1, r3, #4
 8008a74:	d52a      	bpl.n	8008acc <_printf_i+0xa4>
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6011      	str	r1, [r2, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da03      	bge.n	8008a86 <_printf_i+0x5e>
 8008a7e:	222d      	movs	r2, #45	; 0x2d
 8008a80:	425b      	negs	r3, r3
 8008a82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a86:	486f      	ldr	r0, [pc, #444]	; (8008c44 <_printf_i+0x21c>)
 8008a88:	220a      	movs	r2, #10
 8008a8a:	e039      	b.n	8008b00 <_printf_i+0xd8>
 8008a8c:	2973      	cmp	r1, #115	; 0x73
 8008a8e:	f000 809d 	beq.w	8008bcc <_printf_i+0x1a4>
 8008a92:	d808      	bhi.n	8008aa6 <_printf_i+0x7e>
 8008a94:	296f      	cmp	r1, #111	; 0x6f
 8008a96:	d020      	beq.n	8008ada <_printf_i+0xb2>
 8008a98:	2970      	cmp	r1, #112	; 0x70
 8008a9a:	d1dd      	bne.n	8008a58 <_printf_i+0x30>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	f043 0320 	orr.w	r3, r3, #32
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	e003      	b.n	8008aae <_printf_i+0x86>
 8008aa6:	2975      	cmp	r1, #117	; 0x75
 8008aa8:	d017      	beq.n	8008ada <_printf_i+0xb2>
 8008aaa:	2978      	cmp	r1, #120	; 0x78
 8008aac:	d1d4      	bne.n	8008a58 <_printf_i+0x30>
 8008aae:	2378      	movs	r3, #120	; 0x78
 8008ab0:	4865      	ldr	r0, [pc, #404]	; (8008c48 <_printf_i+0x220>)
 8008ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ab6:	e055      	b.n	8008b64 <_printf_i+0x13c>
 8008ab8:	6813      	ldr	r3, [r2, #0]
 8008aba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008abe:	1d19      	adds	r1, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6011      	str	r1, [r2, #0]
 8008ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e08c      	b.n	8008be6 <_printf_i+0x1be>
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ad2:	6011      	str	r1, [r2, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	b21b      	sxthne	r3, r3
 8008ad8:	e7cf      	b.n	8008a7a <_printf_i+0x52>
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	6825      	ldr	r5, [r4, #0]
 8008ade:	1d18      	adds	r0, r3, #4
 8008ae0:	6010      	str	r0, [r2, #0]
 8008ae2:	0628      	lsls	r0, r5, #24
 8008ae4:	d501      	bpl.n	8008aea <_printf_i+0xc2>
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	e002      	b.n	8008af0 <_printf_i+0xc8>
 8008aea:	0668      	lsls	r0, r5, #25
 8008aec:	d5fb      	bpl.n	8008ae6 <_printf_i+0xbe>
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	296f      	cmp	r1, #111	; 0x6f
 8008af2:	bf14      	ite	ne
 8008af4:	220a      	movne	r2, #10
 8008af6:	2208      	moveq	r2, #8
 8008af8:	4852      	ldr	r0, [pc, #328]	; (8008c44 <_printf_i+0x21c>)
 8008afa:	2100      	movs	r1, #0
 8008afc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b00:	6865      	ldr	r5, [r4, #4]
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	60a5      	str	r5, [r4, #8]
 8008b06:	f2c0 8095 	blt.w	8008c34 <_printf_i+0x20c>
 8008b0a:	6821      	ldr	r1, [r4, #0]
 8008b0c:	f021 0104 	bic.w	r1, r1, #4
 8008b10:	6021      	str	r1, [r4, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d13d      	bne.n	8008b92 <_printf_i+0x16a>
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	f040 808e 	bne.w	8008c38 <_printf_i+0x210>
 8008b1c:	4665      	mov	r5, ip
 8008b1e:	2a08      	cmp	r2, #8
 8008b20:	d10b      	bne.n	8008b3a <_printf_i+0x112>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	07db      	lsls	r3, r3, #31
 8008b26:	d508      	bpl.n	8008b3a <_printf_i+0x112>
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	6862      	ldr	r2, [r4, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	bfde      	ittt	le
 8008b30:	2330      	movle	r3, #48	; 0x30
 8008b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b3a:	ebac 0305 	sub.w	r3, ip, r5
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	f8cd 8000 	str.w	r8, [sp]
 8008b44:	463b      	mov	r3, r7
 8008b46:	aa03      	add	r2, sp, #12
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff fef6 	bl	800893c <_printf_common>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d14d      	bne.n	8008bf0 <_printf_i+0x1c8>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	b005      	add	sp, #20
 8008b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b5e:	4839      	ldr	r0, [pc, #228]	; (8008c44 <_printf_i+0x21c>)
 8008b60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b64:	6813      	ldr	r3, [r2, #0]
 8008b66:	6821      	ldr	r1, [r4, #0]
 8008b68:	1d1d      	adds	r5, r3, #4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6015      	str	r5, [r2, #0]
 8008b6e:	060a      	lsls	r2, r1, #24
 8008b70:	d50b      	bpl.n	8008b8a <_printf_i+0x162>
 8008b72:	07ca      	lsls	r2, r1, #31
 8008b74:	bf44      	itt	mi
 8008b76:	f041 0120 	orrmi.w	r1, r1, #32
 8008b7a:	6021      	strmi	r1, [r4, #0]
 8008b7c:	b91b      	cbnz	r3, 8008b86 <_printf_i+0x15e>
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	f022 0220 	bic.w	r2, r2, #32
 8008b84:	6022      	str	r2, [r4, #0]
 8008b86:	2210      	movs	r2, #16
 8008b88:	e7b7      	b.n	8008afa <_printf_i+0xd2>
 8008b8a:	064d      	lsls	r5, r1, #25
 8008b8c:	bf48      	it	mi
 8008b8e:	b29b      	uxthmi	r3, r3
 8008b90:	e7ef      	b.n	8008b72 <_printf_i+0x14a>
 8008b92:	4665      	mov	r5, ip
 8008b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b98:	fb02 3311 	mls	r3, r2, r1, r3
 8008b9c:	5cc3      	ldrb	r3, [r0, r3]
 8008b9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	d1f5      	bne.n	8008b94 <_printf_i+0x16c>
 8008ba8:	e7b9      	b.n	8008b1e <_printf_i+0xf6>
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1d18      	adds	r0, r3, #4
 8008bb0:	6961      	ldr	r1, [r4, #20]
 8008bb2:	6010      	str	r0, [r2, #0]
 8008bb4:	0628      	lsls	r0, r5, #24
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	d501      	bpl.n	8008bbe <_printf_i+0x196>
 8008bba:	6019      	str	r1, [r3, #0]
 8008bbc:	e002      	b.n	8008bc4 <_printf_i+0x19c>
 8008bbe:	066a      	lsls	r2, r5, #25
 8008bc0:	d5fb      	bpl.n	8008bba <_printf_i+0x192>
 8008bc2:	8019      	strh	r1, [r3, #0]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4665      	mov	r5, ip
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	e7b9      	b.n	8008b40 <_printf_i+0x118>
 8008bcc:	6813      	ldr	r3, [r2, #0]
 8008bce:	1d19      	adds	r1, r3, #4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	681d      	ldr	r5, [r3, #0]
 8008bd4:	6862      	ldr	r2, [r4, #4]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 f8e1 	bl	8008da0 <memchr>
 8008bde:	b108      	cbz	r0, 8008be4 <_printf_i+0x1bc>
 8008be0:	1b40      	subs	r0, r0, r5
 8008be2:	6060      	str	r0, [r4, #4]
 8008be4:	6863      	ldr	r3, [r4, #4]
 8008be6:	6123      	str	r3, [r4, #16]
 8008be8:	2300      	movs	r3, #0
 8008bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bee:	e7a7      	b.n	8008b40 <_printf_i+0x118>
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	47c0      	blx	r8
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d0aa      	beq.n	8008b54 <_printf_i+0x12c>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	079b      	lsls	r3, r3, #30
 8008c02:	d413      	bmi.n	8008c2c <_printf_i+0x204>
 8008c04:	68e0      	ldr	r0, [r4, #12]
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	4298      	cmp	r0, r3
 8008c0a:	bfb8      	it	lt
 8008c0c:	4618      	movlt	r0, r3
 8008c0e:	e7a3      	b.n	8008b58 <_printf_i+0x130>
 8008c10:	2301      	movs	r3, #1
 8008c12:	464a      	mov	r2, r9
 8008c14:	4639      	mov	r1, r7
 8008c16:	4630      	mov	r0, r6
 8008c18:	47c0      	blx	r8
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d09a      	beq.n	8008b54 <_printf_i+0x12c>
 8008c1e:	3501      	adds	r5, #1
 8008c20:	68e3      	ldr	r3, [r4, #12]
 8008c22:	9a03      	ldr	r2, [sp, #12]
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	42ab      	cmp	r3, r5
 8008c28:	dcf2      	bgt.n	8008c10 <_printf_i+0x1e8>
 8008c2a:	e7eb      	b.n	8008c04 <_printf_i+0x1dc>
 8008c2c:	2500      	movs	r5, #0
 8008c2e:	f104 0919 	add.w	r9, r4, #25
 8008c32:	e7f5      	b.n	8008c20 <_printf_i+0x1f8>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1ac      	bne.n	8008b92 <_printf_i+0x16a>
 8008c38:	7803      	ldrb	r3, [r0, #0]
 8008c3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c42:	e76c      	b.n	8008b1e <_printf_i+0xf6>
 8008c44:	08009079 	.word	0x08009079
 8008c48:	0800908a 	.word	0x0800908a

08008c4c <_sbrk_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	2300      	movs	r3, #0
 8008c50:	4c05      	ldr	r4, [pc, #20]	; (8008c68 <_sbrk_r+0x1c>)
 8008c52:	4605      	mov	r5, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	f7f7 ff06 	bl	8000a68 <_sbrk>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_sbrk_r+0x1a>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_sbrk_r+0x1a>
 8008c64:	602b      	str	r3, [r5, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	200005dc 	.word	0x200005dc

08008c6c <__sread>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	460c      	mov	r4, r1
 8008c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c74:	f000 f8a4 	bl	8008dc0 <_read_r>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	bfab      	itete	ge
 8008c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c80:	181b      	addge	r3, r3, r0
 8008c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c86:	bfac      	ite	ge
 8008c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c8a:	81a3      	strhlt	r3, [r4, #12]
 8008c8c:	bd10      	pop	{r4, pc}

08008c8e <__swrite>:
 8008c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	461f      	mov	r7, r3
 8008c94:	898b      	ldrh	r3, [r1, #12]
 8008c96:	4605      	mov	r5, r0
 8008c98:	05db      	lsls	r3, r3, #23
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4616      	mov	r6, r2
 8008c9e:	d505      	bpl.n	8008cac <__swrite+0x1e>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca8:	f000 f868 	bl	8008d7c <_lseek_r>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	4632      	mov	r2, r6
 8008cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cba:	463b      	mov	r3, r7
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc2:	f000 b817 	b.w	8008cf4 <_write_r>

08008cc6 <__sseek>:
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cce:	f000 f855 	bl	8008d7c <_lseek_r>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	bf15      	itete	ne
 8008cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ce2:	81a3      	strheq	r3, [r4, #12]
 8008ce4:	bf18      	it	ne
 8008ce6:	81a3      	strhne	r3, [r4, #12]
 8008ce8:	bd10      	pop	{r4, pc}

08008cea <__sclose>:
 8008cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cee:	f000 b813 	b.w	8008d18 <_close_r>
	...

08008cf4 <_write_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4c05      	ldr	r4, [pc, #20]	; (8008d14 <_write_r+0x20>)
 8008d00:	6022      	str	r2, [r4, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f7f7 fc2a 	bl	800055c <_write>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_write_r+0x1e>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_write_r+0x1e>
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	200005dc 	.word	0x200005dc

08008d18 <_close_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4c05      	ldr	r4, [pc, #20]	; (8008d34 <_close_r+0x1c>)
 8008d1e:	4605      	mov	r5, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	f7f7 fe6f 	bl	8000a06 <_close>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_close_r+0x1a>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_close_r+0x1a>
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	200005dc 	.word	0x200005dc

08008d38 <_fstat_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4c06      	ldr	r4, [pc, #24]	; (8008d58 <_fstat_r+0x20>)
 8008d3e:	4605      	mov	r5, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	4611      	mov	r1, r2
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	f7f7 fe69 	bl	8000a1c <_fstat>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d102      	bne.n	8008d54 <_fstat_r+0x1c>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	b103      	cbz	r3, 8008d54 <_fstat_r+0x1c>
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	bf00      	nop
 8008d58:	200005dc 	.word	0x200005dc

08008d5c <_isatty_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4c05      	ldr	r4, [pc, #20]	; (8008d78 <_isatty_r+0x1c>)
 8008d62:	4605      	mov	r5, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	f7f7 fe67 	bl	8000a3a <_isatty>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_isatty_r+0x1a>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_isatty_r+0x1a>
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	200005dc 	.word	0x200005dc

08008d7c <_lseek_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4605      	mov	r5, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	2200      	movs	r2, #0
 8008d86:	4c05      	ldr	r4, [pc, #20]	; (8008d9c <_lseek_r+0x20>)
 8008d88:	6022      	str	r2, [r4, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f7 fe5f 	bl	8000a4e <_lseek>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_lseek_r+0x1e>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_lseek_r+0x1e>
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	200005dc 	.word	0x200005dc

08008da0 <memchr>:
 8008da0:	b510      	push	{r4, lr}
 8008da2:	b2c9      	uxtb	r1, r1
 8008da4:	4402      	add	r2, r0
 8008da6:	4290      	cmp	r0, r2
 8008da8:	4603      	mov	r3, r0
 8008daa:	d101      	bne.n	8008db0 <memchr+0x10>
 8008dac:	2300      	movs	r3, #0
 8008dae:	e003      	b.n	8008db8 <memchr+0x18>
 8008db0:	781c      	ldrb	r4, [r3, #0]
 8008db2:	3001      	adds	r0, #1
 8008db4:	428c      	cmp	r4, r1
 8008db6:	d1f6      	bne.n	8008da6 <memchr+0x6>
 8008db8:	4618      	mov	r0, r3
 8008dba:	bd10      	pop	{r4, pc}

08008dbc <__malloc_lock>:
 8008dbc:	4770      	bx	lr

08008dbe <__malloc_unlock>:
 8008dbe:	4770      	bx	lr

08008dc0 <_read_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4c05      	ldr	r4, [pc, #20]	; (8008de0 <_read_r+0x20>)
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f7 fdfc 	bl	80009cc <_read>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_read_r+0x1e>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_read_r+0x1e>
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	200005dc 	.word	0x200005dc

08008de4 <_init>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr

08008df0 <_fini>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	bf00      	nop
 8008df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df6:	bc08      	pop	{r3}
 8008df8:	469e      	mov	lr, r3
 8008dfa:	4770      	bx	lr
